import os
import re
import logging
import signal
import sys
import asyncio
import html
import json
from collections import Counter
from typing import Optional, Dict, List
from datetime import datetime
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, BotCommand, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ChatMemberHandler,
    ContextTypes,
    filters,
    PicklePersistence,
    TypeHandler
)
from telegram.request import HTTPXRequest
from telegram.error import Forbidden, BadRequest, TimedOut, NetworkError, ChatMigrated

from database import Database
from constants import (
    TIME_SLOTS,
    generate_date_options,
    UKRAINE_TZ,
    CREATE_EVENT_DATE,
    CREATE_EVENT_TIME,
    CREATE_EVENT_PROCEDURE,
    CREATE_EVENT_PHOTO_NEEDED,
    CREATE_EVENT_COMMENT,
    CREATE_EVENT_CONFIRM,
    CREATE_EVENT_REVIEW,
    APPLY_SELECT_EVENTS,
    APPLY_FULL_NAME,
    APPLY_PHONE,
    APPLY_PHOTOS,
    APPLY_CONFIRM,
    BLOCK_USER_ID,
    ADD_PROCEDURE_TYPE_NAME,
    EDIT_PROCEDURE_TYPE_NAME,
    CLEAR_DB_PASSWORD
)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

LOG_FILE = os.getenv('BOT_LOG_FILE', 'bot-actions.log')
if LOG_FILE:
    try:
        file_handler = logging.FileHandler(LOG_FILE, encoding='utf-8')
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s'))
        logging.getLogger().addHandler(file_handler)
        logger.info(f"–õ–æ–≥—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –§–∞–π–ª: {LOG_FILE}")
    except Exception as err:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ñ–∞–π–ª –ª–æ–≥—É–≤–∞–Ω–Ω—è {LOG_FILE}: {err}")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = Database()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ .env
ADMIN_ID = int(os.getenv('ADMIN_ID', 0))
CHANNEL_ID = os.getenv('CHANNEL_ID', '')  # –ó–∞—Å—Ç–∞—Ä—ñ–ª–æ - —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è EVENTS_GROUP_ID
EVENTS_GROUP_ID = os.getenv('EVENTS_GROUP_ID', '')  # –ì—Ä—É–ø–∞ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø–æ–¥—ñ–π
if EVENTS_GROUP_ID and EVENTS_GROUP_ID.lstrip('-').isdigit():
    EVENTS_GROUP_ID = int(EVENTS_GROUP_ID)
elif not EVENTS_GROUP_ID and CHANNEL_ID:
    # Fallback –Ω–∞ CHANNEL_ID –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    EVENTS_GROUP_ID = int(CHANNEL_ID) if CHANNEL_ID.lstrip('-').isdigit() else CHANNEL_ID
GROUP_ID = os.getenv('GROUP_ID', '')
if GROUP_ID and GROUP_ID.lstrip('-').isdigit():
    GROUP_ID = int(GROUP_ID)
CHANNEL_LINK = os.getenv('CHANNEL_LINK', '')
APPLICATIONS_CHANNEL_ID = os.getenv('APPLICATIONS_CHANNEL_ID')
if not APPLICATIONS_CHANNEL_ID:
    APPLICATIONS_CHANNEL_ID = GROUP_ID

ADMIN_MESSAGE_TTL = 15
MAX_APPLICATION_PHOTOS = 3

APPLICATION_STATUS_LABELS = {
    'pending': "‚è≥ –û—á—ñ–∫—É—î",
    'approved': "‚úÖ –†–µ–∑–µ—Ä–≤",
    'primary': "üåü –û—Å–Ω–æ–≤–Ω–∏–π",
    'rejected': "‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ",
    'cancelled': "üö´ –°–∫–∞—Å–æ–≤–∞–Ω–æ"
}
STATUS_DISPLAY_ORDER = ['primary', 'approved', 'pending', 'cancelled', 'rejected']
APPLICATION_STATUS_EMOJI = {
    status: label.split()[0]
    for status, label in APPLICATION_STATUS_LABELS.items()
}


def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == ADMIN_ID


def format_date(date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    date = datetime.strptime(date_str, '%Y-%m-%d')
    return date.strftime('%d.%m.%Y')

UKRAINIAN_WEEKDAYS_ACCUSATIVE = [
    "–ø–æ–Ω–µ–¥—ñ–ª–æ–∫",
    "–≤—ñ–≤—Ç–æ—Ä–æ–∫",
    "—Å–µ—Ä–µ–¥—É",
    "—á–µ—Ç–≤–µ—Ä",
    "–ø'—è—Ç–Ω–∏—Ü—é",
    "—Å—É–±–æ—Ç—É",
    "–Ω–µ–¥—ñ–ª—é"
]


def get_weekday_accusative(date_str: str) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤—É –¥–Ω—è —Ç–∏–∂–Ω—è —É –∑–Ω–∞—Ö—ñ–¥–Ω–æ–º—É –≤—ñ–¥–º—ñ–Ω–∫—É"""
    date = datetime.strptime(date_str, '%Y-%m-%d')
    return UKRAINIAN_WEEKDAYS_ACCUSATIVE[date.weekday()]


def chunk_list(lst, n):
    """–†–æ–∑–±–∏—Ç—Ç—è —Å–ø–∏—Å–∫—É –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –ø–æ n –µ–ª–µ–º–µ–Ω—Ç—ñ–≤"""
    for i in range(0, len(lst), n):
        yield lst[i:i + n]


def trim_text(text: Optional[str], limit: int = 200) -> str:
    """–û–±—Ä—ñ–∑–∞—î —Ç–µ–∫—Å—Ç –¥–æ –≤–∫–∞–∑–∞–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏ –¥–ª—è –ª–æ–≥—ñ–≤"""
    if not text:
        return ""
    text = str(text)
    return text if len(text) <= limit else text[:limit] + "‚Ä¶"


async def log_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–∞–∑–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –∞–ø–¥–µ–π—Ç—É Telegram"""
    try:
        user = update.effective_user.id if update.effective_user else None
        chat = update.effective_chat.id if update.effective_chat else None
        update_dict = update.to_dict()
        logger.debug(
            "–û—Ç—Ä–∏–º–∞–Ω–æ –∞–ø–¥–µ–π—Ç: user=%s chat=%s keys=%s payload=%s",
            user,
            chat,
            list(update_dict.keys()),
            json.dumps(update_dict, ensure_ascii=False)
        )
    except Exception as err:
        logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–µ—Ä—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∞–ø–¥–µ–π—Ç: {err}")

async def auto_delete_message(context, chat_id: int, message_id: int, delay: int = 3):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ–∫—É–Ω–¥"""
    await asyncio.sleep(delay)
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id}: {e}")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    logger.error(f"Exception while handling an update:", exc_info=context.error)

    # –û–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
    if isinstance(context.error, Forbidden):
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞
        if update and hasattr(update, 'effective_user') and update.effective_user:
            user_id = update.effective_user.id
            db.block_user(user_id)
            logger.info(f"User {user_id} blocked the bot - marked as blocked in DB")

    elif isinstance(context.error, BadRequest):
        logger.warning(f"Bad request: {context.error}")

    elif isinstance(context.error, TimedOut):
        logger.warning(f"Request timed out: {context.error}")

    elif isinstance(context.error, NetworkError):
        logger.warning(f"Network error: {context.error}")

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
    try:
        if update and hasattr(update, 'effective_message') and update.effective_message:
            effective_message = update.effective_message
            user = update.effective_user if hasattr(update, 'effective_user') else None

            if user and is_admin(user.id):
                await send_admin_message(
                    context,
                    effective_message.chat_id,
                    "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    reply_to_message_id=effective_message.message_id
                )
            else:
                await effective_message.reply_text(
                    "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
    except Exception as e:
        logger.error(f"Could not send error message to user: {e}")


async def answer_callback_query(query, *args, **kwargs):
    """–ë–µ–∑–ø–µ—á–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ callback_query (—ñ–≥–Ω–æ—Ä—É—î –º–µ—Ä–µ–∂–µ–≤—ñ –∑–±–æ—ó Telegram)"""
    if not query:
        return

    try:
        await query.answer(*args, **kwargs)
    except NetworkError as err:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ callback_query: {err}")


def should_auto_delete_admin_message(chat_id: int) -> bool:
    return chat_id == ADMIN_ID


def schedule_admin_message_cleanup(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int):
    try:
        if getattr(context, "application", None):
            context.application.create_task(
                auto_delete_message(context, chat_id, message_id, delay=ADMIN_MESSAGE_TTL)
            )
        else:
            asyncio.create_task(auto_delete_message(context, chat_id, message_id, delay=ADMIN_MESSAGE_TTL))
    except Exception as err:
        logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {err}")


async def send_admin_message(
    context: ContextTypes.DEFAULT_TYPE,
    chat_id: int,
    text: str,
    *,
    auto_delete: bool = True,
    **kwargs
):
    """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ø—Ä–∏–±—Ä–∞—Ç–∏ –π–æ–≥–æ —á–µ—Ä–µ–∑ 15 —Å–µ–∫, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ"""
    logger.debug(
        "–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: chat_id=%s, auto_delete=%s, kwargs=%s, text=%s",
        chat_id,
        auto_delete,
        kwargs,
        trim_text(text)
    )
    message = await context.bot.send_message(chat_id=chat_id, text=text, **kwargs)
    logger.debug(
        "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: chat_id=%s, message_id=%s",
        chat_id,
        getattr(message, "message_id", None)
    )
    if should_auto_delete_admin_message(chat_id) and auto_delete:
        schedule_admin_message_cleanup(context, chat_id, message.message_id)
    return message


async def send_admin_message_from_update(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str,
    *,
    auto_delete: bool = True,
    **kwargs
):
    """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    message = update.message
    user = update.effective_user

    if message is None:
        chat_id = update.effective_chat.id if update.effective_chat else ADMIN_ID
        logger.debug(
            "–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (update –±–µ–∑ message): chat_id=%s text=%s kwargs=%s",
            chat_id,
            trim_text(text),
            kwargs
        )
        return await send_admin_message(context, chat_id, text, auto_delete=auto_delete, **kwargs)

    if user and is_admin(user.id):
        kwargs.setdefault("reply_to_message_id", message.message_id)
        logger.debug(
            "–í—ñ–¥–ø—Ä–∞–≤–∫–∞ reply –∞–¥–º—ñ–Ω—É (update): chat_id=%s text=%s kwargs=%s",
            message.chat_id,
            trim_text(text),
            kwargs
        )
        return await send_admin_message(context, message.chat_id, text, auto_delete=auto_delete, **kwargs)

    logger.debug(
        "–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (update): chat_id=%s text=%s kwargs=%s",
        message.chat_id,
        trim_text(text),
        kwargs
    )
    return await message.reply_text(text, **kwargs)


async def send_admin_message_from_query(
    query,
    context: ContextTypes.DEFAULT_TYPE,
    text: str,
    *,
    auto_delete: bool = True,
    **kwargs
):
    """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ callback, –≤–∏–¥–∞–ª—è—é—á–∏ –π–æ–≥–æ —á–µ—Ä–µ–∑ 15 —Å–µ–∫ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    chat_id = query.message.chat_id
    user = query.from_user

    if user and is_admin(user.id):
        kwargs.setdefault("reply_to_message_id", query.message.message_id)
        logger.debug(
            "–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ callback –∞–¥–º—ñ–Ω—É: chat_id=%s text=%s kwargs=%s",
            chat_id,
            trim_text(text),
            kwargs
        )
        return await send_admin_message(context, chat_id, text, auto_delete=auto_delete, **kwargs)

    logger.debug(
        "–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ callback –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: chat_id=%s text=%s kwargs=%s",
        chat_id,
        trim_text(text),
        kwargs
    )
    return await query.message.reply_text(text, **kwargs)


async def delete_admin_message(message):
    """–°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏"""
    if not message or not message.from_user:
        return
    if not is_admin(message.from_user.id):
        return
    try:
        await message.delete()
    except Exception as err:
        logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {err}")


async def clear_admin_dialog(context: ContextTypes.DEFAULT_TYPE, key: Optional[str] = None):
    """–í–∏–¥–∞–ª—è—î –∞–∫—Ç–∏–≤–Ω—ñ –∞–¥–º—ñ–Ω—Å—å–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
    dialogs = context.chat_data.get('admin_dialogs')
    if not dialogs:
        return

    day_summary_cache = context.bot_data.get('day_summary_messages', {})
    protected_message_ids = {
        mid for mid in day_summary_cache.values()
        if isinstance(mid, int) and mid > 0
    }
    group_ids_raw = {GROUP_ID}
    stored_group_id = context.bot_data.get('group_id')
    if stored_group_id:
        group_ids_raw.add(stored_group_id)
    group_ids = {str(gid) for gid in group_ids_raw if gid}

    keys = [key] if key else list(dialogs.keys())
    keys_to_process = set(keys)
    keep_entries = {
        stored_key: entry
        for stored_key, entry in dialogs.items()
        if stored_key not in keys_to_process
    }

    for dialog_key in keys:
        entry = dialogs.get(dialog_key)
        if not entry:
            continue

        entry_chat_id = entry.get('chat_id')
        entry_message_id = entry.get('message_id')

        should_keep = (
            dialog_key.startswith('day_summary_')
            or (entry_message_id in protected_message_ids)
            or (group_ids and entry_chat_id is not None and str(entry_chat_id) in group_ids)
        )

        if should_keep:
            keep_entries[dialog_key] = entry
            continue

        try:
            await context.bot.delete_message(
                chat_id=entry_chat_id,
                message_id=entry_message_id
            )
            logger.debug("–í–∏–¥–∞–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—Å—å–∫–∏–π –¥—ñ–∞–ª–æ–≥: key=%s chat_id=%s message_id=%s", dialog_key, entry_chat_id, entry_message_id)
        except Exception as err:
            logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω—Å—å–∫–∏–π –¥—ñ–∞–ª–æ–≥ '{dialog_key}': {err}")

    if keep_entries:
        context.chat_data['admin_dialogs'] = keep_entries
    else:
        context.chat_data.pop('admin_dialogs', None)


async def register_admin_dialog(context: ContextTypes.DEFAULT_TYPE, key: str, message):
    """–†–µ—î—Å—Ç—Ä—É—î –Ω–æ–≤–µ –∞–¥–º—ñ–Ω—Å—å–∫–µ –¥—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ, –∑–∞–º—ñ–Ω–∏–≤—à–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î"""
    if not message:
        return

    dialogs = context.chat_data.get('admin_dialogs')
    existing = dialogs.get(key) if dialogs else None

    if existing and existing['chat_id'] == message.chat_id and existing['message_id'] == message.message_id:
        return

    await clear_admin_dialog(context, key)

    dialogs = context.chat_data.setdefault('admin_dialogs', {})
    dialogs[key] = {'chat_id': message.chat_id, 'message_id': message.message_id}


# ==================== –ö–û–ú–ê–ù–î–ò ====================

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, edit_message: bool = False):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if update.callback_query:
        query = update.callback_query
        await answer_callback_query(query)
        source_message = query.message
        chat_id = source_message.chat_id

        if edit_message:
            try:
                await source_message.edit_text(
                    "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                    reply_markup=get_admin_keyboard()
                )
                await register_admin_dialog(context, 'admin_menu', source_message)
                dialogs = context.chat_data.get('admin_dialogs')
                if dialogs:
                    dialogs.pop('admin_dialog', None)
                return
            except Exception as err:
                logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω—é: {err}")

        await clear_admin_dialog(context, 'admin_dialog')
        menu_message = await send_admin_message(
            context,
            chat_id,
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=get_admin_keyboard(),
            auto_delete=False
        )
        await register_admin_dialog(context, 'admin_menu', menu_message)
        return

    message = update.message
    await clear_admin_dialog(context, 'admin_menu')
    await clear_admin_dialog(context, 'admin_dialog')
    menu_message = await send_admin_message(
        context,
        message.chat_id,
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=get_admin_keyboard(),
        reply_to_message_id=message.message_id,
        auto_delete=False
    )
    await register_admin_dialog(context, 'admin_menu', menu_message)

    if update.message and is_admin(update.effective_user.id):
        await delete_admin_message(update.message)


async def show_admin_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —è–∫ –¥–ª—è callback_query, —Ç–∞–∫ —ñ –¥–ª—è text
    if update.callback_query:
        query = update.callback_query
        await answer_callback_query(query)
        source_message = query.message
        is_callback = True
    else:
        source_message = update.message
        is_callback = False

    if not is_admin(update.effective_user.id):
        await send_admin_message(context, source_message.chat_id, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", reply_to_message_id=source_message.message_id)
        return

    keyboard = [
        [InlineKeyboardButton("üíâ –¢–∏–ø–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä", callback_data="admin_procedure_types")],
        [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="admin_block_user")],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –ë–î", callback_data="admin_clear_db")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_message")]
    ]

    text = "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:"

    if is_callback:
        await clear_admin_dialog(context, 'admin_dialog')
        await source_message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        await register_admin_dialog(context, 'admin_dialog', source_message)
    else:
        await clear_admin_dialog(context, 'admin_dialog')
        dialog_message = await send_admin_message(
            context,
            source_message.chat_id,
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            reply_to_message_id=source_message.message_id,
            auto_delete=False
        )
        await register_admin_dialog(context, 'admin_dialog', dialog_message)
        await delete_admin_message(source_message)


async def handle_admin_menu_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥ –∑ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    text = update.message.text
    user_id = update.effective_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω–æ–º
    if not is_admin(user_id):
        return

    if text == "üìã –ó–∞—Ö–æ–¥–∏":
        await clear_admin_dialog(context, 'admin_dialog')
        events = db.get_active_events()

        if not events:
            dialog_message = await send_admin_message_from_update(
                update,
                context,
                "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤",
                reply_markup=get_admin_keyboard(),
                auto_delete=False
            )
            await register_admin_dialog(context, 'admin_dialog', dialog_message)
            await delete_admin_message(update.message)
            return

        keyboard = []

        for event in events:
            keyboard.append([
                InlineKeyboardButton(
                    f"üìÖ {event['procedure_type']} - {format_date(event['date'])} –æ {event['time']}",
                    callback_data="noop"
                )
            ])

            keyboard.append([
                InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏", callback_data=f"view_apps_{event['id']}"),
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_event_{event['id']}")
            ])

        keyboard.append([InlineKeyboardButton("üìö –ú–∏–Ω—É–ª—ñ –∑–∞—Ö–æ–¥–∏", callback_data="past_events")])
        dialog_message = await send_admin_message_from_update(
            update,
            context,
            "–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞—Ö–æ–¥–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            auto_delete=False
        )
        await register_admin_dialog(context, 'admin_dialog', dialog_message)
        await delete_admin_message(update.message)

    elif text == "‚öôÔ∏è":
        await show_admin_settings(update, context)
        await delete_admin_message(update.message)


def get_user_keyboard():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    keyboard = [
        [
            KeyboardButton("üìã –ú–æ—ó –∑–∞—è–≤–∫–∏"),
            KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
        ]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_admin_keyboard():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = [
        [
            KeyboardButton("üÜï –ù–æ–≤–∏–π –∑–∞—Ö—ñ–¥"),
            KeyboardButton("üìã –ó–∞—Ö–æ–¥–∏"),
            KeyboardButton("‚öôÔ∏è")
        ]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def show_user_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, edit_message: bool = False):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    text = (
        "–í—ñ—Ç–∞—î–º–æ!\n\n"
        "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—á–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏.\n\n"
        "–©–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç—å, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞—Ö—ñ–¥ –≤ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ."
    )

    await send_admin_message_from_update(
        update,
        context,
        text,
        reply_markup=get_user_keyboard()
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user_id = update.effective_user.id
    db.create_user(user_id)
    admin_message = update.message if (update.message and is_admin(user_id)) else None

    logger.info(f"start() –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è user_id={user_id}, args={context.args}")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
    user = db.get_user(user_id)
    if user and user.get('is_blocked'):
        await send_admin_message_from_update(update, context, "–í–∏–±–∞—á—Ç–µ, –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        if admin_message:
            await delete_admin_message(admin_message)
        return ConversationHandler.END

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ deep link –¥–ª—è –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏
    if context.args and len(context.args) > 0:
        payload = context.args[0]

        if payload.startswith('event_'):
            logger.info(f"Deep link –Ω–∞ –æ–∫—Ä–µ–º—É –ø—Ä–æ—Ü–µ–¥—É—Ä—É: {payload}")
            try:
                parts = payload.split('_')
                event_id = int(parts[1])
                logger.info(f"Event ID: {event_id}")

                event = db.get_event(event_id)
                if not event:
                    logger.warning(f"–ó–∞—Ö—ñ–¥ {event_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                    await send_admin_message_from_update(update, context, "–ó–∞—Ö—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                    if admin_message:
                        await delete_admin_message(admin_message)
                    return ConversationHandler.END
                if event['status'] != 'published':
                    logger.warning(f"–ó–∞—Ö—ñ–¥ {event_id} –Ω–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π, —Å—Ç–∞—Ç—É—Å: {event['status']}")
                    await send_admin_message_from_update(update, context, "–¶–µ–π –∑–∞—Ö—ñ–¥ –±—ñ–ª—å—à–µ –Ω–µ –ø—Ä–∏–π–º–∞—î –∑–∞—è–≤–∫–∏.")
                    if admin_message:
                        await delete_admin_message(admin_message)
                    return ConversationHandler.END

                context.user_data.pop('application', None)
                context.user_data.pop('selected_event_ids', None)
                context.user_data.pop('available_events', None)
                context.user_data['apply_event_ids'] = [event_id]
                logger.info(f"–í–∏–∫–ª–∏–∫–∞—é apply_event_start –¥–ª—è event_id={event_id}")
                if admin_message:
                    await delete_admin_message(admin_message)
                return await apply_event_start(update, context)
            except (ValueError, IndexError) as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É event_id: {e}")
                await send_admin_message_from_update(update, context, "–ù–µ–≤—ñ—Ä–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞—Ö—ñ–¥.")
                if admin_message:
                    await delete_admin_message(admin_message)
                return ConversationHandler.END

        if payload.startswith('day_'):
            logger.info(f"Deep link –Ω–∞ —Ä–æ–∑–∫–ª–∞–¥ –¥–Ω—è: {payload}")
            raw = payload[4:]
            if ',' in raw:
                raw = raw.replace(',', '_')
            parts = [part for part in raw.split('_') if part]
            if len(parts) < 2:
                await send_admin_message_from_update(update, context, "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–æ–∑–∫–ª–∞–¥ –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ.")
                if admin_message:
                    await delete_admin_message(admin_message)
                return ConversationHandler.END

            # –ü–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç ‚Äî timestamp (—ñ–≥–Ω–æ—Ä—É—î–º–æ), —Ä–µ—à—Ç–∞ ‚Äî ID –∑–∞—Ö–æ–¥—ñ–≤
            event_ids = []
            for part in parts[1:]:
                if part.isdigit():
                    event_ids.append(int(part))

            if not event_ids:
                await send_admin_message_from_update(update, context, "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–æ–∑–∫–ª–∞–¥ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä.")
                if admin_message:
                    await delete_admin_message(admin_message)
                return ConversationHandler.END

            events = db.get_events_by_ids(event_ids)
            events = [event for event in events if event['status'] == 'published']

            if not events:
                await send_admin_message_from_update(update, context, "–ù–∞ –∂–∞–ª—å, —Ü—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –≤–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")
                if admin_message:
                    await delete_admin_message(admin_message)
                return ConversationHandler.END

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è –≤–∏–±–æ—Ä—É
            events.sort(key=lambda item: (item['date'], item['time'], item['id']))
            context.user_data.pop('apply_event_ids', None)
            context.user_data.pop('application', None)
            context.user_data.pop('selection_message_id', None)
            context.user_data.pop('selection_chat_id', None)
            context.user_data['available_events'] = events
            context.user_data['selected_event_ids'] = set()
            if admin_message:
                await delete_admin_message(admin_message)
            return await show_multi_event_selection(update.message, context)

    if is_admin(user_id):
        await clear_admin_dialog(context, 'admin_dialog')
        await show_admin_menu(update, context)
    else:
        await show_user_menu(update, context)
    if admin_message:
        await delete_admin_message(admin_message)


async def admin_create_event_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—Ö—ñ–¥'"""
    query = update.callback_query

    if not is_admin(query.from_user.id):
        await answer_callback_query(query)
        await send_admin_message_from_query(query, context, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END

    await answer_callback_query(query)

    # –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ–∑–∞–∫—ñ–Ω—á–µ–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—É, —è–∫—â–æ –≤–æ–Ω–æ —î
    if 'last_event_form_message' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=context.user_data['last_event_form_message']
            )
        except Exception as e:
            logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–æ—Ä–º—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—É: {e}")

    # –í–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–µ–Ω—é –æ–¥—Ä–∞–∑—É (–∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–æ–∫)
    try:
        await query.edit_message_text("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞—Ö–æ–¥—É...")
    except:
        pass

    # –ó–±–µ—Ä–µ–≥—Ç–∏ ID –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é –ø–µ—Ä–µ–¥ –æ—á–∏—â–µ–Ω–Ω—è–º
    prev_menu_id = context.user_data.get('last_admin_menu_id')

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –ª–æ–≥—ñ–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—É
    await clear_admin_dialog(context)
    context.user_data.clear()
    context.user_data['schedule'] = {'date': None, 'events': []}
    context.user_data['event'] = {}
    context.user_data['menu_to_delete'] = prev_menu_id  # –ó–±–µ—Ä–µ–≥—Ç–∏ ID –º–µ–Ω—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è

    date_options = generate_date_options()
    # –ì—Ä—É–ø—É—î–º–æ –¥–∞—Ç–∏ –ø–æ 4 –≤ —Ä—è–¥–æ–∫ (4 —Å—Ç–æ–≤–ø—á–∏–∫–∏)
    date_buttons = [InlineKeyboardButton(opt['display'], callback_data=f"date_{opt['date']}")
                    for opt in date_options]
    keyboard = list(chunk_list(date_buttons, 4))
    keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_admin_dialog")])

    sent_msg = await send_admin_message_from_query(query, context, 
        "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑–∞—Ö–æ–¥—É:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        auto_delete=False
    )
    await register_admin_dialog(context, 'admin_dialog', sent_msg)
    context.user_data['last_event_form_message'] = sent_msg.message_id

    return CREATE_EVENT_DATE


async def admin_manage_events_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞—Ö–æ–¥–∏'"""
    query = update.callback_query

    if not is_admin(query.from_user.id):
        await send_admin_message_from_query(query, context, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    events = db.get_active_events()

    if not events:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        await query.edit_message_text(
            "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    keyboard = []

    for event in events:
        # –®–∏—Ä–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ –∑ –Ω–∞–∑–≤–æ—é –∑–∞—Ö–æ–¥—É (–±–µ–∑ –¥—ñ—ó)
        keyboard.append([
            InlineKeyboardButton(
                f"üìÖ {event['procedure_type']} - {format_date(event['date'])} –æ {event['time']}",
                callback_data="noop"
            )
        ])

        # –î–≤—ñ –∫–Ω–æ–ø–∫–∏ –ø–æ 50% —à–∏—Ä–∏–Ω–∏
        keyboard.append([
            InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏", callback_data=f"view_apps_{event['id']}"),
            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_event_{event['id']}")
        ])

    keyboard.append([InlineKeyboardButton("üìö –ú–∏–Ω—É–ª—ñ –∑–∞—Ö–æ–¥–∏", callback_data="past_events")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
    await query.edit_message_text("–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞—Ö–æ–¥–∏:", reply_markup=InlineKeyboardMarkup(keyboard))


async def admin_past_events_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ú–∏–Ω—É–ª—ñ –∑–∞—Ö–æ–¥–∏'"""
    query = update.callback_query
    await answer_callback_query(query)

    if not is_admin(query.from_user.id):
        await send_admin_message_from_query(query, context, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    events = db.get_past_events()

    if not events:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_events")]]
        await query.edit_message_text(
            "–ù–µ–º–∞—î –º–∏–Ω—É–ª–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    keyboard = []

    for event in events:
        # –®–∏—Ä–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ –∑ –Ω–∞–∑–≤–æ—é –∑–∞—Ö–æ–¥—É (–±–µ–∑ –¥—ñ—ó)
        keyboard.append([
            InlineKeyboardButton(
                f"üìÖ {event['procedure_type']} - {format_date(event['date'])} –æ {event['time']}",
                callback_data="noop"
            )
        ])

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞—è–≤–æ–∫
        keyboard.append([
            InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏", callback_data=f"view_apps_{event['id']}")
        ])

    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_events")])
    await query.edit_message_text("–ú–∏–Ω—É–ª—ñ –∑–∞—Ö–æ–¥–∏:", reply_markup=InlineKeyboardMarkup(keyboard))


async def admin_block_user_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'"""
    query = update.callback_query
    await answer_callback_query(query)

    if not is_admin(query.from_user.id):
        await send_admin_message_from_query(query, context, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_block")]]
    await query.edit_message_text(
        "–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return BLOCK_USER_ID


async def block_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è"""
    try:
        user_id_to_block = int(update.message.text)
        db.block_user(user_id_to_block)

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        dialog_message = await send_admin_message_from_update(
            update,
            context,
            f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_block} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ",
            reply_markup=InlineKeyboardMarkup(keyboard),
            auto_delete=False
        )
        await register_admin_dialog(context, 'admin_dialog', dialog_message)
    except ValueError:
        keyboard = [[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_block")]]
        error_msg = await send_admin_message_from_update(update, context, 
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
        asyncio.create_task(auto_delete_message(context, update.effective_chat.id, error_msg.message_id))
        if update.message:
            await delete_admin_message(update.message)
        return BLOCK_USER_ID

    if update.message:
        await delete_admin_message(update.message)

    return ConversationHandler.END


async def cancel_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    query = update.callback_query
    await answer_callback_query(query)

    await show_admin_menu(update, context, edit_message=True)

    return ConversationHandler.END


# ==================== –û–ß–ò–°–¢–ö–ê –ë–î ====================

async def admin_clear_db_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –ë–î - –∑–∞–ø–∏—Ç –ø–∞—Ä–æ–ª—è"""
    query = update.callback_query
    await answer_callback_query(query)

    if not is_admin(query.from_user.id):
        await send_admin_message_from_query(query, context, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_clear_db")]]

    await query.edit_message_text(
        "‚ö†Ô∏è –£–í–ê–ì–ê! –û—á–∏—Å—Ç–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n\n"
        "–ë—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ:\n"
        "‚Ä¢ –í—Å—ñ –∑–∞—Ö–æ–¥–∏\n"
        "‚Ä¢ –í—Å—ñ –∑–∞—è–≤–∫–∏\n"
        "‚Ä¢ –í—Å—ñ —Ñ–æ—Ç–æ\n"
        "‚Ä¢ –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ\n"
        "‚Ä¢ –í—Å—ñ —Ç–∏–ø–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä (–æ–∫—Ä—ñ–º –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö)\n\n"
        "‚ùóÔ∏è –¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞!\n\n"
        "–î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    await register_admin_dialog(context, 'admin_dialog', query.message)

    return CLEAR_DB_PASSWORD


async def clear_db_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—á–∏—Å—Ç–∫–∏ –ë–î"""
    if not is_admin(update.effective_user.id):
        await send_admin_message_from_update(update, context, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END

    password = update.message.text.strip()

    # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–ø–µ–∫–∏
    try:
        await update.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∞—Ä–æ–ª–µ–º: {e}")

    if password == "medicalaser":
        try:
            dialog_message = await send_admin_message(
                context,
                update.effective_chat.id,
                "‚è≥ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö..."
            )
            db.clear_all_data()
            await asyncio.sleep(1)
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=dialog_message.message_id,
                text="‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!"
            )
            await asyncio.sleep(2)

            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é —á–µ—Ä–µ–∑ context.bot, –±–æ update.message –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ
            await clear_admin_dialog(context)
            menu_message = await send_admin_message(
                context,
                update.effective_chat.id,
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=get_admin_keyboard(),
                auto_delete=False
            )
            await register_admin_dialog(context, 'admin_dialog', menu_message)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç—Ü—ñ –ë–î: {e}", exc_info=True)
            await send_admin_message(
                context,
                update.effective_chat.id,
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.\n–î–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥."
            )
            await asyncio.sleep(2)

            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é —á–µ—Ä–µ–∑ context.bot
            await clear_admin_dialog(context)
            menu_message = await send_admin_message(
                context,
                update.effective_chat.id,
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=get_admin_keyboard(),
                auto_delete=False
            )
            await register_admin_dialog(context, 'admin_dialog', menu_message)
    else:
        keyboard = [[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_clear_db")]]
        await send_admin_message(
            context,
            update.effective_chat.id,
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å!\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–∫–∞—Å—É–≤–∞—Ç–∏':",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CLEAR_DB_PASSWORD

    return ConversationHandler.END


async def cancel_clear_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—á–∏—Å—Ç–∫–∏ –ë–î"""
    query = update.callback_query
    await answer_callback_query(query)

    await show_admin_menu(update, context, edit_message=True)

    return ConversationHandler.END


# ==================== –¢–ò–ü–ò –ü–†–û–¶–ï–î–£–† ====================

async def admin_procedure_types(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫—É —Ç–∏–ø—ñ–≤ –ø—Ä–æ—Ü–µ–¥—É—Ä"""
    query = update.callback_query

    # –ë–µ–∑–ø–µ—á–Ω–∏–π –≤–∏–∫–ª–∏–∫ answer() - –º–æ–∂–µ –≤–∂–µ –±—É—Ç–∏ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π
    try:
        await answer_callback_query(query)
    except Exception:
        pass

    if not is_admin(query.from_user.id):
        await send_admin_message_from_query(query, context, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    types = db.get_all_procedure_types()

    if not types:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        await query.edit_message_text(
            "–ù–µ–º–∞—î —Ç–∏–ø—ñ–≤ –ø—Ä–æ—Ü–µ–¥—É—Ä",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    keyboard = []

    for proc_type in types:
        status = "‚úÖ" if proc_type['is_active'] else "‚ùå"
        keyboard.append([
            InlineKeyboardButton(
                f"{status} {proc_type['name']}",
                callback_data=f"pt_view_{proc_type['id']}"
            )
        ])

    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–∏–ø", callback_data="pt_add")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])

    await query.edit_message_text(
        "üíâ –¢–∏–ø–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä:\n\n"
        "‚úÖ - –∞–∫—Ç–∏–≤–Ω–∏–π\n"
        "‚ùå - –≤–∏–º–∫–Ω–µ–Ω–∏–π\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —Ç–∏–ø –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def view_procedure_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–≥–ª—è–¥ —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏"""
    query = update.callback_query

    # –ë–µ–∑–ø–µ—á–Ω–∏–π –≤–∏–∫–ª–∏–∫ answer() - –º–æ–∂–µ –≤–∂–µ –±—É—Ç–∏ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π
    try:
        await answer_callback_query(query)
    except Exception:
        pass

    if not is_admin(query.from_user.id):
        await send_admin_message_from_query(query, context, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    type_id = int(query.data.split('_')[2])
    proc_type = db.get_procedure_type(type_id)

    if not proc_type:
        await query.edit_message_text("–¢–∏–ø –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    status_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if proc_type['is_active'] else "‚ùå –í–∏–º–∫–Ω–µ–Ω–∏–π"
    toggle_text = "‚ùå –í–∏–º–∫–Ω—É—Ç–∏" if proc_type['is_active'] else "‚úÖ –£–≤—ñ–º–∫–Ω—É—Ç–∏"

    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É", callback_data=f"pt_edit_{type_id}")],
        [InlineKeyboardButton(toggle_text, callback_data=f"pt_toggle_{type_id}")],
        [InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"pt_delete_{type_id}")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_procedure_types")]
    ]

    await query.edit_message_text(
        f"üíâ –¢–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏:\n\n"
        f"<b>–ù–∞–∑–≤–∞:</b> {proc_type['name']}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        f"<b>–°—Ç–≤–æ—Ä–µ–Ω–æ:</b> {proc_type['created_at']}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )


async def toggle_procedure_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∏–º–∫–Ω—É—Ç–∏/—É–≤—ñ–º–∫–Ω—É—Ç–∏ —Ç–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏"""
    query = update.callback_query
    await answer_callback_query(query)

    if not is_admin(query.from_user.id):
        await send_admin_message_from_query(query, context, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    type_id = int(query.data.split('_')[2])
    db.toggle_procedure_type(type_id)

    # –û–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    await view_procedure_type(update, context)


async def delete_procedure_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏"""
    query = update.callback_query
    await answer_callback_query(query)

    if not is_admin(query.from_user.id):
        await send_admin_message_from_query(query, context, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    type_id = int(query.data.split('_')[2])
    proc_type = db.get_procedure_type(type_id)

    if not proc_type:
        await query.edit_message_text("–¢–∏–ø –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"pt_delete_confirm_{type_id}"),
            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"pt_view_{type_id}")
        ]
    ]

    await query.edit_message_text(
        f"‚ö†Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ '{proc_type['name']}'?\n\n"
        f"–Ø–∫—â–æ —Ü–µ–π —Ç–∏–ø –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –∑–∞—Ö–æ–¥–∞—Ö, –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±—É–¥–µ –Ω–µ–º–æ–∂–ª–∏–≤–∏–º.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def delete_procedure_type_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–ø—É"""
    query = update.callback_query
    await answer_callback_query(query)

    if not is_admin(query.from_user.id):
        await send_admin_message_from_query(query, context, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    type_id = int(query.data.split('_')[3])
    proc_type = db.get_procedure_type(type_id)

    if not proc_type:
        await query.edit_message_text("‚ùå –¢–∏–ø –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    success = db.delete_procedure_type(type_id)

    if success:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data="admin_procedure_types")]]
        await query.edit_message_text(
            f"‚úÖ –¢–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ '{proc_type['name']}' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        status_icon = "‚úÖ" if proc_type['is_active'] else "‚ùå"
        keyboard = [
            [InlineKeyboardButton(f"{status_icon} –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏/–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏", callback_data=f"pt_toggle_{type_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data="admin_procedure_types")]
        ]

        await query.edit_message_text(
            f"‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ '{proc_type['name']}'.\n\n"
            f"–¶–µ–π —Ç–∏–ø –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –∑–∞—Ö–æ–¥–∞—Ö. "
            f"–í–∏ –º–æ–∂–µ—Ç–µ –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –π–æ–≥–æ –∑–∞–º—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–Ω—è.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


# ConversationHandler –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
async def add_procedure_type_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏"""
    query = update.callback_query
    await answer_callback_query(query)

    if not is_admin(query.from_user.id):
        await send_admin_message_from_query(query, context, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="pt_cancel")]]

    await query.edit_message_text(
        "‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return ADD_PROCEDURE_TYPE_NAME


async def add_procedure_type_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–∑–≤–∏ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø—É"""
    from constants import ADD_PROCEDURE_TYPE_NAME

    if not is_admin(update.effective_user.id):
        await send_admin_message_from_update(update, context, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END

    name = update.message.text.strip()

    if not name or len(name) > 100:
        error_msg = await send_admin_message_from_update(update, context, 
            "‚ùå –ù–∞–∑–≤–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤.\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        asyncio.create_task(auto_delete_message(context, update.effective_chat.id, error_msg.message_id))
        return ADD_PROCEDURE_TYPE_NAME

    try:
        type_id = db.create_procedure_type(name)
        success_msg = await send_admin_message_from_update(update, context, f"‚úÖ –¢–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ '{name}' –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")

        # –ü–æ–∫–∞–∑–∞—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é
        await show_admin_menu(update, context, edit_message=False)

        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
        asyncio.create_task(auto_delete_message(context, update.effective_chat.id, success_msg.message_id))

        return ConversationHandler.END
    except Exception as e:
        if "UNIQUE constraint failed" in str(e):
            error_msg = await send_admin_message_from_update(update, context, 
                "‚ùå –¢–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î.\n\n"
                "–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É:"
            )
            asyncio.create_task(auto_delete_message(context, update.effective_chat.id, error_msg.message_id))
            return ADD_PROCEDURE_TYPE_NAME
        else:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏: {e}", exc_info=True)
            error_msg = await send_admin_message_from_update(update, context, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–∏–ø—É")
            asyncio.create_task(auto_delete_message(context, update.effective_chat.id, error_msg.message_id))
            return ConversationHandler.END


async def cancel_procedure_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É"""
    query = update.callback_query
    await answer_callback_query(query)

    await show_admin_menu(update, context, edit_message=True)
    return ConversationHandler.END


# ConversationHandler –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
async def edit_procedure_type_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏"""
    query = update.callback_query
    await answer_callback_query(query)

    if not is_admin(query.from_user.id):
        await send_admin_message_from_query(query, context, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END

    type_id = int(query.data.split('_')[2])
    proc_type = db.get_procedure_type(type_id)

    if not proc_type:
        await query.edit_message_text("–¢–∏–ø –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return ConversationHandler.END

    context.user_data['edit_type_id'] = type_id

    keyboard = [[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="pt_cancel")]]

    await query.edit_message_text(
        f"‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏\n\n"
        f"–ü–æ—Ç–æ—á–Ω–∞ –Ω–∞–∑–≤–∞: {proc_type['name']}\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return EDIT_PROCEDURE_TYPE_NAME


async def edit_procedure_type_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ—ó –Ω–∞–∑–≤–∏ —Ç–∏–ø—É"""
    from constants import EDIT_PROCEDURE_TYPE_NAME

    if not is_admin(update.effective_user.id):
        await send_admin_message_from_update(update, context, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END

    name = update.message.text.strip()
    type_id = context.user_data.get('edit_type_id')

    if not type_id:
        error_msg = await send_admin_message_from_update(update, context, "‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–∏–ø –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        asyncio.create_task(auto_delete_message(context, update.effective_chat.id, error_msg.message_id))
        return ConversationHandler.END

    if not name or len(name) > 100:
        error_msg = await send_admin_message_from_update(update, context, 
            "‚ùå –ù–∞–∑–≤–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤.\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        asyncio.create_task(auto_delete_message(context, update.effective_chat.id, error_msg.message_id))
        return EDIT_PROCEDURE_TYPE_NAME

    try:
        db.update_procedure_type(type_id, name)
        success_msg = await send_admin_message_from_update(update, context, f"‚úÖ –ù–∞–∑–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{name}'")

        # –ü–æ–∫–∞–∑–∞—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é
        await show_admin_menu(update, context, edit_message=False)

        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
        asyncio.create_task(auto_delete_message(context, update.effective_chat.id, success_msg.message_id))

        return ConversationHandler.END
    except Exception as e:
        if "UNIQUE constraint failed" in str(e):
            error_msg = await send_admin_message_from_update(update, context, 
                "‚ùå –¢–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î.\n\n"
                "–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É:"
            )
            asyncio.create_task(auto_delete_message(context, update.effective_chat.id, error_msg.message_id))
            return EDIT_PROCEDURE_TYPE_NAME
        else:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏: {e}")
            error_msg = await send_admin_message_from_update(update, context, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ —Ç–∏–ø—É")
            asyncio.create_task(auto_delete_message(context, update.effective_chat.id, error_msg.message_id))
            return ConversationHandler.END


async def cancel_event_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞—Ö–æ–¥—É"""
    query = update.callback_query
    await answer_callback_query(query)

    if not is_admin(query.from_user.id):
        await send_admin_message_from_query(query, context, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    event_id = int(query.data.split('_')[2])
    event = db.get_event(event_id)

    if not event:
        await query.edit_message_text("–ó–∞—Ö—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"confirm_cancel_event_{event_id}"),
            InlineKeyboardButton("‚ùå –ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏", callback_data="admin_manage_events")
        ]
    ]

    await query.edit_message_text(
        f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—Ö—ñ–¥?\n\n"
        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']}\n"
        f"–î–∞—Ç–∞: {format_date(event['date'])} –æ {event['time']}\n\n"
        f"–í—Å—ñ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ü–µ–π –∑–∞—Ö—ñ–¥ –±—É–¥—É—Ç—å —Ç–∞–∫–æ–∂ —Å–∫–∞—Å–æ–≤–∞–Ω—ñ.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def confirm_cancel_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞—Ö–æ–¥—É –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"""
    query = update.callback_query
    await answer_callback_query(query)

    if not is_admin(query.from_user.id):
        await send_admin_message_from_query(query, context, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    event_id = int(query.data.split('_')[3])
    event = db.get_event(event_id)

    if not event:
        await query.edit_message_text("–ó–∞—Ö—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—Ö–æ–¥—É –Ω–∞ 'cancelled'
    db.update_event_status(event_id, 'cancelled')

    # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    applications = db.get_applications_by_event(event_id)
    for app in applications:
        try:
            await context.bot.send_message(
                chat_id=app['user_id'],
                text=f"–ó–∞—Ö—ñ–¥ '{event['procedure_type']}' {format_date(event['date'])} –æ {event['time']} —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n\n"
                     f"–í–∏–±–∞—á—Ç–µ –∑–∞ –Ω–µ–∑—Ä—É—á–Ω–æ—Å—Ç—ñ."
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {app['user_id']}: {e}")

    # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø–∏ –ø–æ–¥—ñ–π, —è–∫—â–æ —î message_id
    if event.get('message_id'):
        try:
            await context.bot.delete_message(
                chat_id=EVENTS_GROUP_ID,
                message_id=event['message_id']
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø–∏ –ø–æ–¥—ñ–π: {e}")

    await query.edit_message_text(
        f"–ó–∞—Ö—ñ–¥ '{event['procedure_type']}' {format_date(event['date'])} –æ {event['time']} —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n\n"
        f"–í—Å—ñ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
    )

    # –ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    await show_admin_menu(update, context, edit_message=False)
    await update_day_summary(context, event['date'])


async def user_my_applications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞—è–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    query = update.callback_query
    await answer_callback_query(query)

    user_id = query.from_user.id

    # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞—è–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    applications = db.get_user_applications(user_id)

    if not applications:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="user_back_to_menu")]]
        await query.edit_message_text(
            "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞—è–≤–æ–∫.\n\n"
            "–©–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞—Ö—ñ–¥ –≤ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    message = "–í–∞—à—ñ –∑–∞—è–≤–∫–∏:\n\n"
    keyboard = []

    for app in applications:
        status_emoji = {
            'pending': '‚è≥',
            'approved': '‚úÖ',
            'primary': 'üåü',
            'rejected': '‚ùå',
            'cancelled': 'üö´'
        }.get(app['status'], '‚ùì')

        status_text = {
            'pending': '–û—á—ñ–∫—É—î —Ä–æ–∑–≥–ª—è–¥—É',
            'approved': '–°—Ö–≤–∞–ª–µ–Ω–æ (—Ä–µ–∑–µ—Ä–≤)',
            'primary': '–í–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç',
            'rejected': '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ',
            'cancelled': '–°–∫–∞—Å–æ–≤–∞–Ω–æ'
        }.get(app['status'], '–ù–µ–≤—ñ–¥–æ–º–æ')

        event_status = " (–ó–∞—Ö—ñ–¥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ)" if app['event_status'] == 'cancelled' else ""

        message += f"{status_emoji} {app['procedure_type']}\n"
        message += f"üìÖ {format_date(app['date'])} –æ {app['time']}\n"
        message += f"–°—Ç–∞—Ç—É—Å: {status_text}{event_status}\n\n"

        # –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞—è–≤–æ–∫ (pending, approved, primary)
        if app['status'] in ['pending', 'approved', 'primary'] and app['event_status'] == 'published':
            keyboard.append([
                InlineKeyboardButton(
                    f"‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ {app['procedure_type'][:20]}",
                    callback_data=f"cancel_app_{app['id']}"
                )
            ])

    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="user_back_to_menu")])
    await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))


async def user_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞"""
    query = update.callback_query
    await answer_callback_query(query)

    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="user_back_to_menu")]]

    channel_text = f" {CHANNEL_LINK}" if CHANNEL_LINK else ""
    text = (
        "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞\n\n"
        "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—á–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏.\n\n"
        "–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:\n"
        f"1Ô∏è‚É£ –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª{channel_text}\n"
        "2Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É' –ø—ñ–¥ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º –ø—Ä–æ –∑–∞—Ö—ñ–¥\n"
        "3Ô∏è‚É£ –ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏\n"
        "4Ô∏è‚É£ –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


async def handle_user_menu_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥ –∑ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    text = update.message.text
    user_id = update.effective_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º
    if is_admin(user_id):
        return

    if text == "üìã –ú–æ—ó –∑–∞—è–≤–∫–∏":
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞—è–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        applications = db.get_user_applications(user_id)

        if not applications:
            await send_admin_message_from_update(update, context, 
                "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞—è–≤–æ–∫.\n\n"
                "–©–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞—Ö—ñ–¥ –≤ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ.",
                reply_markup=get_user_keyboard()
            )
            return

        message = "–í–∞—à—ñ –∑–∞—è–≤–∫–∏:\n\n"
        keyboard = []

        for app in applications:
            status_emoji = {
                'pending': '‚è≥',
                'approved': '‚úÖ',
                'primary': 'üåü',
                'rejected': '‚ùå',
                'cancelled': 'üö´'
            }.get(app['status'], '‚ùì')

            status_text = {
                'pending': '–û—á—ñ–∫—É—î —Ä–æ–∑–≥–ª—è–¥—É',
                'approved': '–°—Ö–≤–∞–ª–µ–Ω–æ (—Ä–µ–∑–µ—Ä–≤)',
                'primary': '–í–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç',
                'rejected': '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ',
                'cancelled': '–°–∫–∞—Å–æ–≤–∞–Ω–æ'
            }.get(app['status'], '–ù–µ–≤—ñ–¥–æ–º–æ')

            event_status = " (–ó–∞—Ö—ñ–¥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ)" if app['event_status'] == 'cancelled' else ""

            message += f"{status_emoji} {app['procedure_type']}\n"
            message += f"üìÖ {format_date(app['date'])} –æ {app['time']}\n"
            message += f"–°—Ç–∞—Ç—É—Å: {status_text}{event_status}\n\n"

            # –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞—è–≤–æ–∫ (pending, approved, primary)
            if app['status'] in ['pending', 'approved', 'primary'] and app['event_status'] == 'published':
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ {app['procedure_type'][:20]}",
                        callback_data=f"cancel_app_{app['id']}"
                    )
                ])

        await send_admin_message_from_update(update, context, 
            message,
            reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else get_user_keyboard()
        )

    elif text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è":
        channel_text = f" {CHANNEL_LINK}" if CHANNEL_LINK else ""
        info_text = (
            "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞\n\n"
            "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—á–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏.\n\n"
            "–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:\n"
            f"1Ô∏è‚É£ –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª{channel_text}\n"
            "2Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É' –ø—ñ–¥ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º –ø—Ä–æ –∑–∞—Ö—ñ–¥\n"
            "3Ô∏è‚É£ –ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏\n"
            "4Ô∏è‚É£ –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )

        await send_admin_message_from_update(update, context, info_text, reply_markup=get_user_keyboard())


async def cancel_user_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º"""
    query = update.callback_query

    user_id = query.from_user.id
    app_id = int(query.data.split('_')[2])

    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ –∑–∞—è–≤–∫–∞ –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    app = db.get_application(app_id)
    if not app or app['user_id'] != user_id:
        await answer_callback_query(query, "–ü–æ–º–∏–ª–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–¥—ñ—é
    event = db.get_event(app['event_id'])

    # –ó–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    was_primary = app['status'] == 'primary'

    # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    db.update_application_status(app_id, 'cancelled')
    db.recalculate_application_positions(app['event_id'])

    # –û–Ω–æ–≤–∏—Ç–∏ –¥–µ–Ω–Ω–µ –ø—ñ–¥—Å—É–º–æ–∫
    if event:
        await update_day_summary(context, event['date'])

    # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ –∑–∞—è–≤–æ–∫
    await refresh_group_application_message(context, app_id)

    # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if event:
        status_text = "–æ—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç" if was_primary else "–∫–∞–Ω–¥–∏–¥–∞—Ç"
        admin_message = (
            f"‚ö†Ô∏è –ö–∞–Ω–¥–∏–¥–∞—Ç —Å–∫–∞—Å—É–≤–∞–≤ —Å–≤–æ—é –∑–∞—è–≤–∫—É\n\n"
            f"üë§ {app['full_name']}\n"
            f"üìû {app['phone']}\n"
            f"–°—Ç–∞—Ç—É—Å –±—É–≤: {status_text}\n\n"
            f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']}\n"
            f"–î–∞—Ç–∞: {format_date(event['date'])}\n"
            f"–ß–∞—Å: {event['time']}"
        )
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=admin_message
            )
        except Exception as err:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {err}")

    await answer_callback_query(query, "–ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ", show_alert=True)

    # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
    await user_my_applications(update, context)


async def user_back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    query = update.callback_query
    await answer_callback_query(query)

    await show_user_menu(update, context, edit_message=True)


async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    await answer_callback_query(query)

    await show_admin_menu(update, context, edit_message=True)


async def noop_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –¥—ñ—ó (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è)"""
    query = update.callback_query
    await answer_callback_query(query)


async def close_message_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–∫—Ä–∏—Ç–∏ (–≤–∏–¥–∞–ª–∏—Ç–∏) –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    query = update.callback_query
    await answer_callback_query(query)

    try:
        await query.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")


async def close_admin_dialog_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–∫—Ä–∏–≤–∞—î –∞–∫—Ç–∏–≤–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –¥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await answer_callback_query(query)

    await clear_admin_dialog(context, 'admin_dialog')

    menu_message = await send_admin_message(
        context,
        query.message.chat_id,
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=get_admin_keyboard(),
        auto_delete=False
    )
    await register_admin_dialog(context, 'admin_menu', menu_message)
    context.user_data.clear()

    return ConversationHandler.END

# ==================== –°–¢–í–û–†–ï–ù–ù–Ø –ó–ê–•–û–î–£ (–ê–î–ú–Ü–ù) ====================

async def create_event_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—É"""
    if not is_admin(update.effective_user.id):
        await send_admin_message_from_update(update, context, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END

    await clear_admin_dialog(context, 'admin_dialog')
    context.user_data.clear()
    context.user_data['event'] = {}
    context.user_data['schedule'] = {'date': None, 'events': []}

    date_options = generate_date_options()
    # –ì—Ä—É–ø—É—î–º–æ –¥–∞—Ç–∏ –ø–æ 4 –≤ —Ä—è–¥–æ–∫ (4 —Å—Ç–æ–≤–ø—á–∏–∫–∏)
    date_buttons = [InlineKeyboardButton(opt['display'], callback_data=f"date_{opt['date']}")
                    for opt in date_options]
    keyboard = list(chunk_list(date_buttons, 4))
    keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_admin_dialog")])

    dialog_message = await send_admin_message_from_update(update, context, 
        "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑–∞—Ö–æ–¥—É:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        auto_delete=False
    )
    await register_admin_dialog(context, 'admin_dialog', dialog_message)
    if update.message:
        await delete_admin_message(update.message)

    return CREATE_EVENT_DATE


async def show_date_selection(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä –¥–∞—Ç–∏"""
    date_options = generate_date_options()
    # –ì—Ä—É–ø—É—î–º–æ –¥–∞—Ç–∏ –ø–æ 4 –≤ —Ä—è–¥–æ–∫ (4 —Å—Ç–æ–≤–ø—á–∏–∫–∏)
    date_buttons = [InlineKeyboardButton(opt['display'], callback_data=f"date_{opt['date']}")
                    for opt in date_options]
    keyboard = list(chunk_list(date_buttons, 4))
    keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_admin_dialog")])

    if query:
        await query.edit_message_text(
            "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑–∞—Ö–æ–¥—É:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    return CREATE_EVENT_DATE


async def create_event_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏"""
    query = update.callback_query
    await answer_callback_query(query)

    # –Ø–∫—â–æ —Ü–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—ñ—Ä –¥–∞—Ç–∏
    if query.data == "back_to_date":
        return await show_date_selection(query, context)

    date = query.data.split('_', 1)[1]
    schedule = context.user_data.setdefault('schedule', {'date': None, 'events': []})
    if schedule['date'] and schedule['date'] != date:
        schedule['events'].clear()
    schedule['date'] = date
    context.user_data['event']['date'] = date

    return await show_time_selection(query, context)


def get_available_time_slots(event_date: Optional[str]) -> List[str]:
    """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —á–∞—Å–æ–≤–∏—Ö —Å–ª–æ—Ç—ñ–≤ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Å—É"""
    if not event_date:
        return TIME_SLOTS

    try:
        selected_date = datetime.strptime(event_date, '%Y-%m-%d').date()
    except ValueError:
        return TIME_SLOTS

    today = datetime.now(UKRAINE_TZ).date()
    if selected_date > today or selected_date < today:
        return TIME_SLOTS

    current_time = datetime.now(UKRAINE_TZ).time()
    available = []
    for slot in TIME_SLOTS:
        try:
            slot_time = datetime.strptime(slot, '%H:%M').time()
        except ValueError:
            continue
        if slot_time > current_time:
            available.append(slot)
    return available


async def show_time_selection(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä —á–∞—Å—É"""
    event_date = (
        context.user_data.get('event', {}).get('date')
        or context.user_data.get('schedule', {}).get('date')
    )
    available_slots = get_available_time_slots(event_date)

    if not available_slots:
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_date")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_admin_dialog")]
        ]
        await query.edit_message_text(
            "–ù–∞ –≤–∏–±—Ä–∞–Ω—É –¥–∞—Ç—É –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—Ö—ñ–¥.\n"
            "–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CREATE_EVENT_TIME

    keyboard = list(chunk_list(
        [InlineKeyboardButton(time, callback_data=f"time_{time}") for time in available_slots],
        5
    ))
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_date")])
    keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_admin_dialog")])

    await query.edit_message_text(
        "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –∑–∞—Ö–æ–¥—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CREATE_EVENT_TIME


async def create_event_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —á–∞—Å—É"""
    query = update.callback_query
    await answer_callback_query(query)

    # –Ø–∫—â–æ —Ü–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –∑ –µ–∫—Ä–∞–Ω—É –ø—Ä–æ—Ü–µ–¥—É—Ä, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—ñ—Ä —á–∞—Å—É
    if query.data == "back_to_time":
        return await show_time_selection(query, context)

    time = query.data.split('_', 1)[1]
    context.user_data['event']['time'] = time

    # –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–∏–ø–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä –∑ –ë–î
    return await show_procedure_selection(query, context)


async def show_procedure_selection(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä–∏"""
    # –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–∏–ø–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä –∑ –ë–î
    procedure_types = db.get_active_procedure_types()

    if not procedure_types:
        await query.edit_message_text(
            "‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø—Ä–æ—Ü–µ–¥—É—Ä.\n\n"
            "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ–¥–∞—Ç–∏ —Ç–∏–ø–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_admin_dialog")]])
        )
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton(ptype['name'], callback_data=f"proc_{ptype['id']}")]
                for ptype in procedure_types]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_time")])
    keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_admin_dialog")])

    await query.edit_message_text(
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CREATE_EVENT_PROCEDURE


async def create_event_procedure(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏"""
    query = update.callback_query
    await answer_callback_query(query)

    # –Ø–∫—â–æ —Ü–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—ñ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
    if query.data == "back_to_procedure":
        return await show_procedure_selection(query, context)

    proc_type_id = int(query.data.split('_')[1])
    proc_type = db.get_procedure_type(proc_type_id)

    if not proc_type:
        await query.edit_message_text("‚ùå –¢–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return ConversationHandler.END

    context.user_data['event']['procedure'] = proc_type['name']

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="photo_yes"),
            InlineKeyboardButton("‚ùå –ù—ñ", callback_data="photo_no")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_procedure")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_admin_dialog")]
    ]

    await query.edit_message_text(
        "–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º –Ω–∞–¥–∞–≤–∞—Ç–∏ —Ñ–æ—Ç–æ –∑–æ–Ω–∏?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CREATE_EVENT_PHOTO_NEEDED


async def show_photo_needed_selection(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —Ñ–æ—Ç–æ"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="photo_yes"),
            InlineKeyboardButton("‚ùå –ù—ñ", callback_data="photo_no")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_procedure")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_admin_dialog")]
    ]

    await query.edit_message_text(
        "–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º –Ω–∞–¥–∞–≤–∞—Ç–∏ —Ñ–æ—Ç–æ –∑–æ–Ω–∏?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CREATE_EVENT_PHOTO_NEEDED


async def create_event_photo_needed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —Ñ–æ—Ç–æ"""
    query = update.callback_query
    await answer_callback_query(query)

    # –Ø–∫—â–æ —Ü–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—ñ—Ä —Ñ–æ—Ç–æ
    if query.data == "back_to_photo":
        return await show_photo_needed_selection(query, context)

    needs_photo = query.data == "photo_yes"
    context.user_data['event']['needs_photo'] = needs_photo
    return await show_comment_prompt(query, context)


async def show_comment_prompt(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞—Ö–æ–¥—É"""
    event = context.user_data.setdefault('event', {})
    comment = event.get('comment')

    hint_lines = [
        "–î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞—Ö–æ–¥—É (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ).",
        "\n–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü–µ–π –∫—Ä–æ–∫."
    ]
    if comment:
        hint_lines.append(f"\n–ü–æ—Ç–æ—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä:\n{comment}")

    keyboard = [
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_comment")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_photo")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_admin_dialog")]
    ]

    message = await query.edit_message_text(
        "\n".join(hint_lines),
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    context.user_data['last_bot_message_id'] = message.message_id
    context.user_data['last_bot_chat_id'] = message.chat_id

    return CREATE_EVENT_COMMENT


async def skip_event_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è"""
    query = update.callback_query
    await answer_callback_query(query)
    context.user_data['event']['comment'] = None
    return await show_event_summary(update, context)


async def create_event_comment_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∏—Ç–∏ –≤–≤–µ–¥–µ–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä"""
    text = (update.message.text or "").strip()
    if text:
        context.user_data['event']['comment'] = text
    else:
        context.user_data['event']['comment'] = None

    try:
        await update.message.delete()
    except Exception:
        pass

    return await show_event_summary(update, context)


async def show_event_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ –∑–∞—Ö–æ–¥—É"""
    event = context.user_data['event']

    photo_required = "–û–±–æ–≤'—è–∑–∫–æ–≤–µ" if event['needs_photo'] else "–ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ"
    date_display = format_date(event['date'])

    summary = (
        f"–ü—ñ–¥—Å—É–º–æ–∫ –∑–∞—Ö–æ–¥—É:\n\n"
        f"–î–∞—Ç–∞: {date_display}\n"
        f"–ß–∞—Å: {event['time']}\n"
        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure']}\n"
        f"–§–æ—Ç–æ –≤—ñ–¥ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤: {photo_required}"
    )

    comment = event.get('comment')
    if comment:
        summary += f"\n–ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}"

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ –ø–ª–∞–Ω—É –∑–∞—Ö–æ–¥—É", callback_data="add_event_to_day")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_admin_dialog")]
    ]

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π message_id –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    if update.callback_query:
        await update.callback_query.edit_message_text(
            summary,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        # –Ø–∫—â–æ —Ü–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∫–æ–º–µ–Ω—Ç–∞—Ä), —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
        if 'last_bot_message_id' in context.user_data and 'last_bot_chat_id' in context.user_data:
            await context.bot.edit_message_text(
                chat_id=context.user_data['last_bot_chat_id'],
                message_id=context.user_data['last_bot_message_id'],
                text=summary,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

    context.user_data.pop('last_bot_message_id', None)
    context.user_data.pop('last_bot_chat_id', None)

    return CREATE_EVENT_CONFIRM


def build_schedule_overview(schedule: dict) -> str:
    """–°—Ç–≤–æ—Ä—é—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä –Ω–∞ –¥–µ–Ω—å"""
    date_display = format_date(schedule['date']) if schedule.get('date') else "‚Äî"
    lines = [
        "–†–æ–∑–∫–ª–∞–¥ –¥–Ω—è:",
        "",
        f"–î–∞—Ç–∞: {date_display}",
        ""
    ]

    events = schedule.get('events', [])

    if events:
        lines.append("–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏:")
        for idx, item in enumerate(events, start=1):
            item_lines = [f"{idx}. {item['time']} ‚Äî {item['procedure']}"]
            if item.get('needs_photo'):
                item_lines.append("   –ü–æ—Ç—Ä—ñ–±–Ω–µ —Ñ–æ—Ç–æ –∑–æ–Ω–∏")
            if item.get('comment'):
                item_lines.append(f"   –ö–æ–º–µ–Ω—Ç–∞—Ä: {item['comment']}")
            lines.extend(item_lines)
            lines.append("")
    else:
        lines.append("–ü–æ–∫–∏ —â–æ –ø—Ä–æ—Ü–µ–¥—É—Ä –Ω–µ–º–∞—î.")
        lines.append("")

    lines.append("____________________________")
    lines.append("–û–±–µ—Ä—ñ—Ç—å –ø–æ–¥–∞–ª—å—à—É –¥—ñ—é:")

    # –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–π–≤–∏–π –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –Ω–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ (—è–∫—â–æ —î)
    if lines[-2] == "":
        lines.pop(-2)

    return "\n".join(lines)


async def show_schedule_overview(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –¥–Ω—è"""
    schedule = context.user_data.get('schedule', {'events': []})
    text = build_schedule_overview(schedule)

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data="add_more_procedure")]
    ]

    if schedule.get('events'):
        keyboard.append([InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∑–∞—Ö—ñ–¥", callback_data="publish_schedule")])
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é", callback_data="remove_last_procedure")])

    keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_admin_dialog")])

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def add_event_to_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–¥–∞—Ç–∏ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω—É –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–æ —Ä–æ–∑–∫–ª–∞–¥—É –¥–Ω—è"""
    query = update.callback_query
    await answer_callback_query(query)

    event = context.user_data.get('event')
    if not event:
        await query.edit_message_text("–î–∞–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return ConversationHandler.END

    schedule = context.user_data.setdefault('schedule', {'date': event['date'], 'events': []})

    if schedule.get('date') and schedule['date'] != event['date']:
        schedule['events'].clear()
        schedule['date'] = event['date']
    elif not schedule.get('date'):
        schedule['date'] = event['date']

    schedule['events'].append({
        'date': event['date'],
        'time': event['time'],
        'procedure': event['procedure'],
        'needs_photo': event['needs_photo'],
        'comment': event.get('comment')

    })

    # –ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∞—Ç—É –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø—Ä–æ—Ü–µ–¥—É—Ä–∏, –∞–ª–µ –æ—á–∏—Å—Ç–∏—Ç–∏ —ñ–Ω—à—ñ –ø–æ–ª—è
    context.user_data['event'] = {'date': event['date']}

    await show_schedule_overview(query, context)
    return CREATE_EVENT_REVIEW


async def remove_last_procedure(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–¥–∞–Ω—É –ø—Ä–æ—Ü–µ–¥—É—Ä—É"""
    query = update.callback_query
    schedule = context.user_data.get('schedule')

    if not schedule or not schedule.get('events'):
        await answer_callback_query(query, "–ù–µ–º–∞—î –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è", show_alert=True)
        return CREATE_EVENT_REVIEW

    schedule['events'].pop()
    await answer_callback_query(query, "–û—Å—Ç–∞–Ω–Ω—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤–∏–¥–∞–ª–µ–Ω–æ")

    if schedule['events']:
        await show_schedule_overview(query, context)
        return CREATE_EVENT_REVIEW

    # –Ø–∫—â–æ –≤—Å–µ –≤–∏–¥–∞–ª–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≤–∏–±–æ—Ä—É —á–∞—Å—É
    context.user_data['event'] = {'date': schedule['date']}
    return await show_time_selection(query, context)


async def add_more_procedure(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —â–µ –æ–¥–Ω—ñ—î—ó –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –Ω–∞ —Ç–æ–π —Å–∞–º–∏–π –¥–µ–Ω—å"""
    query = update.callback_query
    await answer_callback_query(query)

    schedule = context.user_data.get('schedule')
    if not schedule or not schedule.get('date'):
        await query.edit_message_text("–î–∞—Ç–∞ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞, —Ä–æ–∑–ø–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É.")
        return ConversationHandler.END

    context.user_data['event'] = {'date': schedule['date']}
    return await show_time_selection(query, context)


async def publish_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –¥–Ω—è –≤ –∫–∞–Ω–∞–ª"""
    query = update.callback_query
    await answer_callback_query(query)

    schedule = context.user_data.get('schedule')
    if not schedule or not schedule.get('events'):
        await answer_callback_query(query, "–ù–µ–º–∞—î –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó", show_alert=True)
        return CREATE_EVENT_REVIEW

    try:
        logger.info(
            "–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è —Ä–æ–∑–∫–ª–∞–¥—É: –¥–∞—Ç–∞=%s, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä=%s",
            schedule.get('date'),
            len(schedule.get('events', []))
        )
        created_events = []
        for item in schedule['events']:
            event_id = db.create_event(
                date=item['date'],
                time=item['time'],
                procedure_type=item['procedure'],
                needs_photo=item['needs_photo'],
                comment=item.get('comment')
            )
            created_events.append((event_id, item))
        logger.debug(
            "–°—Ç–≤–æ—Ä–µ–Ω—ñ –∑–∞—Ö–æ–¥–∏: %s",
            created_events
        )

        created_events.sort(key=lambda pair: pair[1]['time'])
        await publish_day_schedule_to_channel(context, schedule['date'], created_events)
        await update_day_summary(context, schedule['date'])
        logger.info(
            "–†–æ–∑–∫–ª–∞–¥ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: –¥–∞—Ç–∞=%s, events=%s",
            schedule['date'],
            [item['procedure'] for _, item in created_events]
        )

        await query.edit_message_text("‚úÖ –†–æ–∑–∫–ª–∞–¥ —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ.")

        keyboard = [[InlineKeyboardButton(
            "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ —â–µ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ü—é –¥–∞—Ç—É",
            callback_data=f"same_date_{schedule['date']}"
        )]]

        await clear_admin_dialog(context, 'admin_dialog')
        context.user_data.clear()
        await show_admin_menu(update, context)


    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ä–æ–∑–∫–ª–∞–¥—É: {e}", exc_info=True)
        await query.edit_message_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    return ConversationHandler.END


async def create_event_same_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —â–µ –æ–¥–Ω–æ–≥–æ –∑–∞—Ö–æ–¥—É –Ω–∞ —Ç—É —Å–∞–º—É –¥–∞—Ç—É"""
    query = update.callback_query
    await answer_callback_query(query)

    if not is_admin(query.from_user.id):
        await send_admin_message_from_query(query, context, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END

    # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞—Ç—É –∑ callback_data
    date_str = query.data.split('_', 2)[2]  # same_date_2024-01-15 -> 2024-01-15

    # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é
    await query.delete_message()

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–∞—Ö–æ–¥—É –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é –¥–∞—Ç–æ—é
    await clear_admin_dialog(context)
    context.user_data.clear()
    context.user_data['event'] = {'date': date_str}
    context.user_data['schedule'] = {'date': date_str, 'events': []}

    # –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä —á–∞—Å—É
    time_buttons = [InlineKeyboardButton(time, callback_data=f"time_{time}")
                    for time in TIME_SLOTS]
    keyboard = list(chunk_list(time_buttons, 6))
    keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])

    sent_msg = await send_admin_message_from_query(
        query,
        context,
        f"–î–∞—Ç–∞: {format_date(date_str)}\n\n–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –∑–∞—Ö–æ–¥—É:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        auto_delete=False
    )
    await register_admin_dialog(context, 'admin_dialog', sent_msg)
    context.user_data['last_event_form_message'] = sent_msg.message_id

    return CREATE_EVENT_TIME


async def publish_day_schedule_to_channel(
    context: ContextTypes.DEFAULT_TYPE,
    date: str,
    created_events: list
):
    """–ü—É–±–ª—ñ–∫—É—î —Ä–æ–∑–∫–ª–∞–¥ –¥–Ω—è –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –∑ –æ–∫—Ä–µ–º–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä"""
    import time

    bot_username = (await context.bot.get_me()).username

    logger.debug(
        "–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –¥–Ω—è –¥–æ –≥—Ä—É–ø–∏: date=%s, events=%s",
        date,
        [(event_id, item['time'], item['procedure']) for event_id, item in created_events]
    )

    formatted_date = format_date(date)
    weekday_acc = get_weekday_accusative(date)
    header = [
        "–ë–ï–ó–ö–û–®–¢–û–í–ù–û!",
        f"–ù–∞ {weekday_acc} ({formatted_date}) –ø–æ—Ç—Ä—ñ–±–Ω—ñ –º–æ–¥–µ–ª—ñ",
        ""
    ]

    event_lines = []
    base_timestamp = int(time.time())

    sorted_events = sorted(created_events, key=lambda pair: pair[1]['time'])
    for idx, (event_id, item) in enumerate(sorted_events, start=1):
        procedure_name = html.escape(item['procedure'])
        line = f"{item['time']} ‚Äî <b>{procedure_name}</b>"
        comment = item.get('comment')
        if comment:
            line += f" ({html.escape(comment)})"
        line += "."
        if item.get('needs_photo'):
            line += " –§–æ—Ç–æ –û–ë–û–í'–Ø–ó–ö–û–í–û!"
        event_lines.append(line)
        event_lines.append("")

    # –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ —è–∫—â–æ –≤—ñ–Ω –∑–∞–ª–∏—à–∏–≤—Å—è
    if event_lines and event_lines[-1] == "":
        event_lines.pop()

    if len(sorted_events) == 1:
        event_id, item = sorted_events[0]
        deep_link = f"https://t.me/{bot_username}?start=event_{event_id}_{base_timestamp}"
        button_rows = [[InlineKeyboardButton("–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É", url=deep_link)]]
    else:
        payload = "_".join([str(base_timestamp)] + [str(event_id) for event_id, _ in sorted_events])
        deep_link = f"https://t.me/{bot_username}?start=day_{payload}"
        button_rows = [[InlineKeyboardButton("–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É", url=deep_link)]]

    message_text = "\n".join(header + event_lines)

    message = await context.bot.send_message(
        chat_id=EVENTS_GROUP_ID,
        text=message_text,
        reply_markup=InlineKeyboardMarkup(button_rows),
        parse_mode=ParseMode.HTML
    )

    logger.info(
        "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: group=%s, message_id=%s",
        EVENTS_GROUP_ID,
        getattr(message, "message_id", None)
    )

    for event_id, _ in created_events:
        db.update_event_message_id(event_id, message.message_id)
        db.update_event_status(event_id, 'published')
        logger.debug("–û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞–Ω –∑–∞—Ö–æ–¥—É: event_id=%s, message_id=%s", event_id, message.message_id)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É"""
    query = update.callback_query
    user_id = update.effective_user.id

    if query:
        await answer_callback_query(query)
        await query.edit_message_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ")
    else:
        await send_admin_message_from_update(update, context, "–°–∫–∞—Å–æ–≤–∞–Ω–æ")

    context.user_data.clear()

    # –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    if is_admin(user_id):
        if query:
            await show_admin_menu(update, context, edit_message=False)
        else:
            await send_admin_message_from_update(update, context, "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é")
    else:
        # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if query:
            await show_user_menu(update, context, edit_message=False)
        else:
            await send_admin_message_from_update(update, context, "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é")

    return ConversationHandler.END


# ==================== –ü–û–î–ê–ß–ê –ó–ê–Ø–í–ö–ò (–ú–û–î–ï–õ–¨) ====================

def build_multi_event_selection_text(events, selected_ids) -> str:
    """–°—Ç–≤–æ—Ä—é—î —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–±–æ—Ä—É –∫—ñ–ª—å–∫–æ—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä"""
    if not events:
        return "–ü—Ä–æ—Ü–µ–¥—É—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."

    selected_ids = set(selected_ids or [])
    lines = ["–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∞–±–æ –∫—ñ–ª—å–∫–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä:", ""]

    for event in events:
        marker = "‚úÖ" if event['id'] in selected_ids else "‚ñ´Ô∏è"
        photo_note = " (—Ñ–æ—Ç–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ)" if event.get('needs_photo') else ""
        line = (
            f"{marker} {format_date(event['date'])} {event['time']} ‚Äî "
            f"{event['procedure_type']}{photo_note}"
        )
        lines.append(line)


    lines.append("")
    lines.append("–ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏¬ª.")
    return "\n".join(lines)


def build_multi_event_selection_keyboard(events, selected_ids):
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –∫—ñ–ª—å–∫–æ—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä"""
    selected_ids = set(selected_ids or [])
    keyboard = []

    for event in events:
        is_selected = event['id'] in selected_ids
        prefix = "‚úÖ" if is_selected else "‚¨úÔ∏è"
        label = f"{prefix} {event['time']} ¬∑ {event['procedure_type']}"
        keyboard.append([
            InlineKeyboardButton(label, callback_data=f"toggle_event_{event['id']}")
        ])

    actions_row = [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data="event_selection_continue")]
    if selected_ids:
        actions_row.insert(0, InlineKeyboardButton("üîÑ –°–∫–∏–Ω—É—Ç–∏", callback_data="event_selection_reset"))

    keyboard.append(actions_row)
    keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])
    return keyboard


async def show_multi_event_selection(target, context: ContextTypes.DEFAULT_TYPE, replace: bool = False):
    """–ü–æ–∫–∞–∑—É—î (–∞–±–æ –æ–Ω–æ–≤–ª—é—î) –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º –ø—Ä–æ—Ü–µ–¥—É—Ä"""
    events = context.user_data.get('available_events', [])
    selected_ids = context.user_data.get('selected_event_ids', set())

    if not events:
        if replace:
            await target.edit_message_text("–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        else:
            await target.reply_text("–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return ConversationHandler.END

    text = build_multi_event_selection_text(events, selected_ids)
    keyboard = InlineKeyboardMarkup(build_multi_event_selection_keyboard(events, selected_ids))

    if replace:
        await target.edit_message_text(text, reply_markup=keyboard)
    else:
        sent = await target.reply_text(text, reply_markup=keyboard)
        context.user_data['selection_message_id'] = sent.message_id
        context.user_data['selection_chat_id'] = sent.chat_id

    return APPLY_SELECT_EVENTS


async def toggle_event_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–º–∏–∫–∞—î –≤–∏–±—ñ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø—Ä–æ—Ü–µ–¥—É—Ä–∏"""
    query = update.callback_query
    await answer_callback_query(query)

    event_id = int(query.data.split('_')[2])

    selected = context.user_data.get('selected_event_ids', set())
    if not isinstance(selected, set):
        selected = set(selected)

    if event_id in selected:
        selected.remove(event_id)
    else:
        selected.add(event_id)

    context.user_data['selected_event_ids'] = selected
    return await show_multi_event_selection(query, context, replace=True)


async def event_selection_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∏–¥–∞—î –≤–∏–±—ñ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä"""
    query = update.callback_query
    await answer_callback_query(query)

    context.user_data['selected_event_ids'] = set()
    return await show_multi_event_selection(query, context, replace=True)


async def event_selection_continue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –ø—Ä–æ—Ü–µ–¥—É—Ä"""
    query = update.callback_query
    selected = context.user_data.get('selected_event_ids', set())

    if not isinstance(selected, set):
        selected = set(selected)

    if not selected:
        await answer_callback_query(query, "–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –ø—Ä–æ—Ü–µ–¥—É—Ä—É.", show_alert=True)
        return APPLY_SELECT_EVENTS

    events = context.user_data.get('available_events', [])
    selected_events = [event for event in events if event['id'] in selected]

    if not selected_events:
        await answer_callback_query(query, "–û–±—Ä–∞–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ —Å—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", show_alert=True)
        return await show_multi_event_selection(query, context, replace=True)

    selected_events.sort(key=lambda item: (item['date'], item['time'], item['id']))
    context.user_data['apply_event_ids'] = [event['id'] for event in selected_events]

    # –û—á–∏—Å—Ç–∏—Ç–∏ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ –¥–∞–Ω—ñ
    context.user_data.pop('available_events', None)
    context.user_data.pop('selected_event_ids', None)
    context.user_data.pop('selection_message_id', None)
    context.user_data.pop('selection_chat_id', None)

    await answer_callback_query(query)
    await query.edit_message_text("–ì–æ—Ç—É—î–º–æ —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏‚Ä¶")

    return await apply_event_start(update, context)


# ---------------------- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ñ–æ—Ç–æ ----------------------

PHOTO_INSTRUCTIONS_BASE = (
    "üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∑–æ–Ω–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏\n\n"
    "–Ø–∫ –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–æ—Ç–æ:\n"
    "1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É üìé (—Å–∫—Ä—ñ–ø–∫–∞) –∑–Ω–∏–∑—É\n"
    "2. –û–±–µ—Ä—ñ—Ç—å \"–ì–∞–ª–µ—Ä–µ—è\" –∞–±–æ \"–ö–∞–º–µ—Ä–∞\"\n"
    "3. –í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ç–æ –∑–æ–Ω–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏\n"
    f"4. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ (–¥–æ {MAX_APPLICATION_PHOTOS} —à—Ç.)\n\n"
    "–ü—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–æ—Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"‚úÖ –ì–æ—Ç–æ–≤–æ\""
)


def build_application_summary_text(app: dict) -> str:
    """–§–æ—Ä–º—É—î —Ç–µ–∫—Å—Ç –ø—ñ–¥—Å—É–º–∫—É –∑–∞—è–≤–∫–∏"""
    events = app.get('events', [])
    event_lines = []

    for event in events:
        photo_note = " (—Ñ–æ—Ç–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ)" if event.get('needs_photo') else ""
        event_lines.append(
            f"- {event['procedure_type']} ‚Äî {format_date(event['date'])} {event['time']}{photo_note}"
        )

    events_block = "\n".join(event_lines) if event_lines else "‚Äî"
    full_name = app.get('full_name') or "‚Äî"
    phone = app.get('phone') or "‚Äî"
    photos_count = len(app.get('photos', []))

    return (
        "–ü—ñ–¥—Å—É–º–æ–∫ –∑–∞—è–≤–∫–∏:\n\n"
        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∏:\n{events_block}\n\n"
        f"–ü–Ü–ë: {full_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ: {photos_count}\n\n"
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é, —â–æ –º–µ–Ω—ñ –≤–∏–ø–æ–≤–Ω–∏–ª–æ—Å—å 18 —Ä–æ–∫—ñ–≤"
    )


def build_application_summary_keyboard(can_go_back: bool) -> InlineKeyboardMarkup:
    """–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏"""
    rows = [[InlineKeyboardButton("üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞—è–≤–∫—É", callback_data="submit_application")]]
    if can_go_back:
        rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_photos")])
    rows.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])
    return InlineKeyboardMarkup(rows)


def build_photo_prompt_text(application: dict, count: int, mode: str) -> str:
    """–§–æ—Ä–º—É—î —Ç–µ–∫—Å—Ç –ø—ñ–¥–∫–∞–∑–∫–∏ –∞–±–æ –ø—ñ–¥—Å—É–º–∫—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∂–∏–º—É"""
    if mode == 'summary':
        return build_application_summary_text(application)

    text = PHOTO_INSTRUCTIONS_BASE

    if application.get('multi_event'):
        text += "\n\n–§–æ—Ç–æ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–µ –¥–ª—è –≤—Å—ñ—Ö –æ–±—Ä–∞–Ω–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä."

    text += f"\n\n–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ñ–æ—Ç–æ: {count}/{MAX_APPLICATION_PHOTOS}"
    return text


def build_photo_prompt_keyboard(count: int, mode: str) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –µ—Ç–∞–ø—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ"""
    if mode == 'summary':
        return build_application_summary_keyboard(can_go_back=True)

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="photos_done")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]
    return InlineKeyboardMarkup(keyboard)


async def update_photo_prompt_message(
    context: ContextTypes.DEFAULT_TYPE,
    application: dict,
    *,
    chat_id: int,
    mode: Optional[str] = None,
    reply_to_message_id: Optional[int] = None
) -> None:
    """–û–Ω–æ–≤–ª—é—î —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é —â–æ–¥–æ —Ñ–æ—Ç–æ"""
    prompt_info = context.user_data.get('photos_prompt')
    mode = mode or (prompt_info.get('mode') if prompt_info else 'instructions')

    if prompt_info:
        try:
            await context.bot.delete_message(
                chat_id=prompt_info['chat_id'],
                message_id=prompt_info['message_id']
            )
        except Exception as err:
            logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î —Ñ–æ—Ç–æ-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {err}")

    actual_chat_id = prompt_info['chat_id'] if prompt_info else chat_id
    if not actual_chat_id:
        logger.debug("chat_id –¥–ª—è —Ñ–æ—Ç–æ-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –ø—Ä–æ–ø—É—Å–∫–∞—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
        return

    count = len(application.get('photos', []))
    logger.debug(
        "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ñ–æ—Ç–æ: chat_id=%s, mode=%s, count=%s, reply_to=%s",
        actual_chat_id,
        mode,
        count,
        reply_to_message_id
    )
    send_kwargs = {
        "chat_id": actual_chat_id,
        "text": build_photo_prompt_text(application, count, mode),
        "reply_markup": build_photo_prompt_keyboard(count, mode)
    }

    if reply_to_message_id:
        send_kwargs["reply_to_message_id"] = reply_to_message_id

    try:
        new_message = await context.bot.send_message(**send_kwargs)
        context.user_data['photos_prompt'] = {
            'chat_id': new_message.chat_id,
            'message_id': new_message.message_id,
            'mode': mode
        }
        logger.debug(
            "–§–æ—Ç–æ-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ: chat_id=%s, message_id=%s, mode=%s",
            new_message.chat_id,
            new_message.message_id,
            mode
        )
    except Exception as err:
        logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {err}")

async def apply_event_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏"""
    logger.info(f"apply_event_start() –≤–∏–∫–ª–∏–∫–∞–Ω–æ, user_data: {context.user_data}")
    event_ids = context.user_data.get('apply_event_ids')

    if not event_ids:
        logger.error("–°–ø–∏—Å–æ–∫ –∑–∞—Ö–æ–¥—ñ–≤ –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ user_data")
        await update.effective_message.reply_text("–û–±—Ä–∞–Ω—ñ –∑–∞—Ö–æ–¥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –∞–±–æ –≤–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")
        return ConversationHandler.END

    user_id = update.effective_user.id
    logger.info(f"–ü–æ—á–∏–Ω–∞—é –æ–±—Ä–æ–±–∫—É –∑–∞—è–≤–∫–∏ –¥–ª—è user_id={user_id}, events={event_ids}")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
    if db.is_user_blocked(user_id):
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π")
        await update.effective_message.reply_text("–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç–∏ –∑–∞—è–≤–∫–∏.")
        return ConversationHandler.END

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞—Ö–æ–¥–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ó—Ö –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å
    events = db.get_events_by_ids(event_ids)
    events_by_id = {event['id']: event for event in events if event['status'] == 'published'}
    ordered_events = [events_by_id[event_id] for event_id in event_ids if event_id in events_by_id]

    if not ordered_events:
        logger.warning(f"–ñ–æ–¥–µ–Ω —ñ–∑ –∑–∞—Ö–æ–¥—ñ–≤ {event_ids} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        await update.effective_message.reply_text("–ù–∞ –∂–∞–ª—å, –≤–∏–±—Ä–∞–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –≤–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")
        return ConversationHandler.END

    missing_count = len(event_ids) - len(ordered_events)
    if missing_count > 0:
        logger.info(f"{missing_count} –∑ –æ–±—Ä–∞–Ω–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä —Å—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –ø—ñ–¥ —á–∞—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è")
        await update.effective_message.reply_text(
            "–î–µ—è–∫—ñ –∑ –æ–±—Ä–∞–Ω–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä –≤–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ, —Ç–æ–º—É –≤–æ–Ω–∏ –±—É–ª–∏ –≤–∏–ª—É—á–µ–Ω—ñ —ñ–∑ –∑–∞—è–≤–∫–∏."
        )

    context.user_data['apply_event_ids'] = [event['id'] for event in ordered_events]
    context.user_data['application'] = {
        'event_ids': [event['id'] for event in ordered_events],
        'events': ordered_events,
        'photos': [],
        'needs_photo': any(event.get('needs_photo') for event in ordered_events),
        'multi_event': len(ordered_events) > 1
    }

    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø—ñ–¥—Å—É–º–∫—É –≤–∏–±—Ä–∞–Ω–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä
    summary_lines = ["–í–∏ –æ–±—Ä–∞–ª–∏:"]
    for event in ordered_events:
        photo_note = " (—Ñ–æ—Ç–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ)" if event.get('needs_photo') else ""
        summary_lines.append(
            f"‚Ä¢ {format_date(event['date'])} {event['time']} ‚Äî {event['procedure_type']}{photo_note}"
        )


    summary_text = "\n".join(summary_lines)
    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(summary_text)
        except Exception as edit_error:
            logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–∑ –≤–∏–±–æ—Ä–æ–º –ø—Ä–æ—Ü–µ–¥—É—Ä: {edit_error}")
            await update.effective_message.reply_text(summary_text)
    else:
        await update.effective_message.reply_text(summary_text)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user = db.get_user(user_id)

    if user and user['full_name'] and user['phone']:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ")
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="use_saved_data"),
                InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ñ", callback_data="enter_new_data")
            ],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
        ]

        await update.effective_message.reply_text(
            f"–£ –Ω–∞—Å —î –≤–∞—à—ñ –¥–∞–Ω—ñ:\n\n"
            f"–ü–Ü–ë: {user['full_name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n\n"
            f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ü—ñ –¥–∞–Ω—ñ?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö")
        return APPLY_FULL_NAME

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö")
    await update.effective_message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è (–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ):"
    )
    logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –ü–Ü–ë")
    return APPLY_FULL_NAME


async def apply_use_saved_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
    query = update.callback_query
    await answer_callback_query(query)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö –∑–∞—è–≤–∫–∏
    if 'application' not in context.user_data:
        await send_admin_message_from_query(query, context, 
            "‚ö†Ô∏è –î–∞–Ω—ñ –∑–∞—è–≤–∫–∏ –≤—Ç—Ä–∞—á–µ–Ω–æ (–º–æ–∂–ª–∏–≤–æ, –±–æ—Ç –±—É–ª–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ).\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –ø—Ä–æ—Ü–µ—Å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ—é /start"
        )
        return ConversationHandler.END

    user = db.get_user(update.effective_user.id)
    context.user_data['application']['full_name'] = user['full_name']
    context.user_data['application']['phone'] = user['phone']

    await query.delete_message()

    application = context.user_data['application']
    needs_photo = application.get('needs_photo', False)

    if needs_photo:
        count = len(application.get('photos', []))
        prompt_text = build_photo_prompt_text(application, count, mode='instructions')
        prompt_keyboard = build_photo_prompt_keyboard(count, mode='instructions')
        message = await send_admin_message_from_query(query, context, prompt_text, reply_markup=prompt_keyboard)
        context.user_data['photos_prompt'] = {
            'chat_id': message.chat_id,
            'message_id': message.message_id,
            'mode': 'instructions'
        }
        return APPLY_PHOTOS

    return await show_application_summary(query.message, context)


async def apply_enter_new_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ñ –¥–∞–Ω—ñ"""
    query = update.callback_query
    await answer_callback_query(query)

    await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è (–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ):")
    return APPLY_FULL_NAME


async def apply_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ü–Ü–ë"""
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö –∑–∞—è–≤–∫–∏ (–º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—Ç—Ä–∞—á–µ–Ω—ñ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞)
    if 'application' not in context.user_data:
        await send_admin_message_from_update(update, context, 
            "‚ö†Ô∏è –î–∞–Ω—ñ –∑–∞—è–≤–∫–∏ –≤—Ç—Ä–∞—á–µ–Ω–æ (–º–æ–∂–ª–∏–≤–æ, –±–æ—Ç –±—É–ª–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ).\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –ø—Ä–æ—Ü–µ—Å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ—é /start"
        )
        return ConversationHandler.END

    context.user_data['application']['full_name'] = update.message.text
    await send_admin_message_from_update(update, context, "–ü–Ü–ë –∑–±–µ—Ä–µ–∂–µ–Ω–æ")

    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
    keyboard = [
        [KeyboardButton("üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ–π –Ω–æ–º–µ—Ä", request_contact=True)],
        [KeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    await send_admin_message_from_update(update, context, 
        "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
        reply_markup=reply_markup
    )
    return APPLY_PHONE


def validate_ukrainian_phone(phone: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    # –û—á–∏—Å—Ç–∏—Ç–∏ –Ω–æ–º–µ—Ä –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
    cleaned = re.sub(r'[\s\-\(\)]', '', phone)

    # –ü–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤
    patterns = [
        r'^(\+380|380|0)(39|50|63|66|67|68|73|91|92|93|94|95|96|97|98|99)\d{7}$',
    ]

    for pattern in patterns:
        if re.match(pattern, cleaned):
            return True

    return False


async def apply_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö –∑–∞—è–≤–∫–∏ (–º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—Ç—Ä–∞—á–µ–Ω—ñ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞)
    if 'application' not in context.user_data:
        await send_admin_message_from_update(update, context, 
            "‚ö†Ô∏è –î–∞–Ω—ñ –∑–∞—è–≤–∫–∏ –≤—Ç—Ä–∞—á–µ–Ω–æ (–º–æ–∂–ª–∏–≤–æ, –±–æ—Ç –±—É–ª–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ).\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –ø—Ä–æ—Ü–µ—Å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ—é /start",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    # –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—É (—è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ–π –Ω–æ–º–µ—Ä")
    if update.message.contact:
        phone = update.message.contact.phone_number
        # –Ø–∫—â–æ –Ω–æ–º–µ—Ä –Ω–µ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ +, –¥–æ–¥–∞—î–º–æ +
        if not phone.startswith('+'):
            phone = '+' + phone
    # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É" - –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é
    elif update.message.text == "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É":
        await send_admin_message_from_update(update, context, 
            "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:\n"
            "+380501234567\n"
            "0501234567\n"
            "050 123 45 67",
            reply_markup=ReplyKeyboardRemove()
        )
        return APPLY_PHONE
    # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    else:
        phone = update.message.text

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        if not validate_ukrainian_phone(phone):
            await send_admin_message_from_update(update, context, 
                "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n\n"
                "–ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:\n"
                "+380501234567\n"
                "0501234567\n"
                "050 123 45 67\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:",
                reply_markup=ReplyKeyboardRemove()
            )
            return APPLY_PHONE

    context.user_data['application']['phone'] = phone
    await send_admin_message_from_update(update, context, "–¢–µ–ª–µ—Ñ–æ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())

    # –ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.update_user(
        update.effective_user.id,
        context.user_data['application']['full_name'],
        phone
    )

    application = context.user_data['application']
    needs_photo = application.get('needs_photo', False)

    if needs_photo:
        count = len(application.get('photos', []))
        prompt_text = build_photo_prompt_text(application, count, mode='instructions')
        prompt_keyboard = build_photo_prompt_keyboard(count, mode='instructions')
        message = await send_admin_message_from_update(update, context, prompt_text, reply_markup=prompt_keyboard)
        context.user_data['photos_prompt'] = {
            'chat_id': message.chat_id,
            'message_id': message.message_id,
            'mode': 'instructions'
        }
        return APPLY_PHOTOS

    return await show_application_summary(update.message, context)


async def apply_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ –≤—ñ–¥ –º–æ–¥–µ–ª—ñ"""
    if 'application' not in context.user_data:
        await send_admin_message_from_update(update, context, "–°–µ—Å—ñ—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ.")
        return ConversationHandler.END

    application = context.user_data['application']
    photos = application.get('photos', [])

    if len(photos) >= MAX_APPLICATION_PHOTOS:
        if not application.get('photo_warning_sent'):
            await update.message.reply_text(
                f"–ú–æ–∂–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ {MAX_APPLICATION_PHOTOS} —Ñ–æ—Ç–æ. "
                f"–ü–µ—Ä—à—ñ {MAX_APPLICATION_PHOTOS} –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ, —Ä–µ—à—Ç—É —ñ–≥–Ω–æ—Ä—É—î–º–æ. "
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞—è–≤–∫—É¬ª –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
            )
            application['photo_warning_sent'] = True
            application['extra_photos_ignored'] = True
            logger.debug(
                "–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç —Ñ–æ—Ç–æ: user=%s, total=%s",
                update.effective_user.id if update.effective_user else None,
                len(photos)
            )
        return APPLY_PHOTOS

    file_id = update.message.photo[-1].file_id
    photos.append(file_id)
    application['photos'] = photos
    logger.debug(
        "–û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–æ—Ç–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: user=%s, total=%s",
        update.effective_user.id if update.effective_user else None,
        len(photos)
    )

    await update_photo_prompt_message(
        context,
        application,
        chat_id=update.effective_chat.id,
        mode='summary',
        reply_to_message_id=update.message.message_id
    )

    application.pop('photo_warning_sent', None)
    application.pop('extra_photos_ignored', None)

    return APPLY_PHOTOS


async def apply_photos_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ"""
    query = update.callback_query

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö –∑–∞—è–≤–∫–∏
    if 'application' not in context.user_data:
        await answer_callback_query(query, "–î–∞–Ω—ñ –∑–∞—è–≤–∫–∏ –≤—Ç—Ä–∞—á–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        await send_admin_message_from_query(query, context, 
            "‚ö†Ô∏è –î–∞–Ω—ñ –∑–∞—è–≤–∫–∏ –≤—Ç—Ä–∞—á–µ–Ω–æ (–º–æ–∂–ª–∏–≤–æ, –±–æ—Ç –±—É–ª–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ).\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –ø—Ä–æ—Ü–µ—Å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ—é /start"
        )
        return ConversationHandler.END

    application = context.user_data['application']
    photos = application.get('photos', [])

    extra_removed = False
    if len(photos) > MAX_APPLICATION_PHOTOS:
        application['photos'] = photos[:MAX_APPLICATION_PHOTOS]
        photos = application['photos']
        extra_removed = True

    if application.get('needs_photo') and len(photos) == 0:
        await answer_callback_query(query, "–§–æ—Ç–æ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º. –î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω–µ —Ñ–æ—Ç–æ.", show_alert=True)
        return APPLY_PHOTOS

    if application.get('extra_photos_ignored') or extra_removed:
        await answer_callback_query(query, f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ. –ó–∞–π–≤—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ.", show_alert=True)
    else:
        await answer_callback_query(query)

    application.pop('photo_warning_sent', None)
    application.pop('extra_photos_ignored', None)

    logger.debug(
        "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ: user=%s, total=%s, extra_removed=%s",
        query.from_user.id if query and query.from_user else None,
        len(photos),
        extra_removed
    )

    await update_photo_prompt_message(
        context,
        application,
        chat_id=query.message.chat_id,
        mode='summary'
    )

    return APPLY_CONFIRM


async def back_to_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –µ—Ç–∞–ø—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ"""
    query = update.callback_query
    await answer_callback_query(query)

    application = context.user_data.get('application')
    if not application:
        await send_admin_message_from_query(query, context, 
            "‚ö†Ô∏è –î–∞–Ω—ñ –∑–∞—è–≤–∫–∏ –≤—Ç—Ä–∞—á–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –ø—Ä–æ—Ü–µ—Å –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

    await update_photo_prompt_message(
        context,
        application,
        chat_id=query.message.chat_id,
        mode='instructions'
    )

    return APPLY_PHOTOS


async def show_application_summary(message, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ –∑–∞—è–≤–∫–∏ –∑—ñ –∑–≥–æ–¥–æ—é"""
    app = context.user_data['application']

    events = app.get('events', [])
    chat_id = message.chat_id

    if not events:
        await context.bot.send_message(chat_id=chat_id, text="–û–±—Ä–∞–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–∞—è–≤–∫—É –∑–∞–Ω–æ–≤–æ.")
        context.user_data.clear()
        return ConversationHandler.END

    summary_text = build_application_summary_text(app)
    keyboard = build_application_summary_keyboard(can_go_back=app.get('needs_photo', False))

    await context.bot.send_message(chat_id=chat_id, text=summary_text, reply_markup=keyboard)

    return APPLY_CONFIRM


async def submit_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É"""
    query = update.callback_query
    await answer_callback_query(query)

    app = context.user_data.get('application')

    if not app:
        await send_admin_message_from_query(query, context, "–î–∞–Ω—ñ –∑–∞—è–≤–∫–∏ –≤—Ç—Ä–∞—á–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –ø—Ä–æ—Ü–µ—Å –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

    try:
        selected_event_ids = app.get('event_ids', [])
        if not selected_event_ids:
            await send_admin_message_from_query(query, context, "–û–±—Ä–∞–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.")
            return ConversationHandler.END

        stored_events = {event['id']: event for event in app.get('events', [])}
        valid_events = []
        unavailable_events = []

        for event_id in selected_event_ids:
            event = db.get_event(event_id)
            if not event or event['status'] != 'published':
                unavailable_events.append(stored_events.get(event_id, {'id': event_id}))
                continue
            valid_events.append(event)

        if not valid_events:
            await query.edit_message_text(
                "–ù–∞ –∂–∞–ª—å, –∂–æ–¥–Ω–∞ –∑ –æ–±—Ä–∞–Ω–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä –≤–∂–µ –Ω–µ –ø—Ä–∏–π–º–∞—î –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à—ñ –¥–∞—Ç–∏."
            )
            context.user_data.clear()
            return ConversationHandler.END

        application_results = []
        events_for_update: Dict[int, str] = {}
        for event in valid_events:
            application_id = db.create_application(
                event_id=event['id'],
                user_id=update.effective_user.id,
                full_name=app['full_name'],
                phone=app['phone']
            )

            for file_id in app.get('photos', []):
                db.add_application_photo(application_id, file_id)

            application_results.append((application_id, event))
            events_for_update[event['id']] = event['date']

        for event_id in events_for_update.keys():
            db.recalculate_application_positions(event_id)

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        lines = ["‚úÖ –í–∞—à—É –∑–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–Ω–æ!", ""]

        if len(valid_events) == 1:
            event = valid_events[0]
            lines.extend([
                f"üìã –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']}",
                f"üìÖ –î–∞—Ç–∞: {format_date(event['date'])}",
                f"üïê –ß–∞—Å: {event['time']}"
            ])
        else:
            lines.append("–ü—Ä–æ—Ü–µ–¥—É—Ä–∏:")
            for event in valid_events:
                lines.append(f"- {event['procedure_type']} ‚Äî {format_date(event['date'])} {event['time']}")

        if unavailable_events:
            lines.append("")
            lines.append("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Ç–∞–∫—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏:")
            for event in unavailable_events:
                if event:
                    date_part = format_date(event['date']) if event.get('date') else "‚Äî"
                    time_part = event.get('time', "‚Äî")
                    procedure = event.get('procedure_type', f"ID {event.get('id')}")
                    lines.append(f"- {procedure} ‚Äî {date_part} {time_part}")

        lines.append("")
        lines.append("–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

        await query.edit_message_text("\n".join(lines))

        # –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É/–∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø—É
        if application_results:
            if len(application_results) == 1:
                await publish_application_to_channel(context, application_results[0][0])
            else:
                candidate_info = {
                    'full_name': app['full_name'],
                    'phone': app['phone'],
                    'user_id': update.effective_user.id
                }
                await publish_group_application_to_channel(
                    context,
                    application_results,
                    candidate_info,
                    app.get('photos', [])
                )

        for event_id, event_date in events_for_update.items():
            await update_day_summary(context, event_date)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏: {e}", exc_info=True)
        await send_admin_message_from_query(query, context, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏")

    context.user_data.clear()
    return ConversationHandler.END


async def publish_application_to_channel(context: ContextTypes.DEFAULT_TYPE, application_id: int):
    """–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –∑–∞—è–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª —ñ–∑ –∑–∞—è–≤–∫–∞–º–∏"""
    global APPLICATIONS_CHANNEL_ID
    app = db.get_application(application_id)
    event = db.get_event(app['event_id'])
    photos = db.get_application_photos(application_id)
    channel_id = context.bot_data.get('applications_channel_id', APPLICATIONS_CHANNEL_ID)
    if isinstance(channel_id, str):
        try:
            channel_id = int(channel_id)
        except ValueError:
            channel_id = int(APPLICATIONS_CHANNEL_ID)

    message_text = (
        f"–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{application_id}\n\n"
        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']}\n"
        f"–î–∞—Ç–∞: {format_date(event['date'])} {event['time']}\n\n"
        f"–ü–Ü–ë: {app['full_name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {app['phone']}"
    )

    keyboard = build_single_application_keyboard(app, event)

    if photos:
        if len(photos) == 1:
            try:
                message = await context.bot.send_photo(
                    chat_id=channel_id,
                    photo=photos[0],
                    caption=message_text,
                    reply_markup=keyboard
                )
            except ChatMigrated as e:
                new_id = e.new_chat_id
                context.bot_data['applications_channel_id'] = new_id
                APPLICATIONS_CHANNEL_ID = new_id
                return await publish_application_to_channel(context, application_id)
        else:
            media = [InputMediaPhoto(media=photo_id, caption=message_text if i == 0 else '')
                     for i, photo_id in enumerate(photos)]
            try:
                messages = await context.bot.send_media_group(chat_id=channel_id, media=media)
                message = await context.bot.send_message(
                    chat_id=channel_id,
                    text=f"–ó–∞—è–≤–∫–∞ ‚Ññ{application_id}",
                    reply_markup=keyboard
                )
            except ChatMigrated as e:
                new_id = e.new_chat_id
                context.bot_data['applications_channel_id'] = new_id
                APPLICATIONS_CHANNEL_ID = new_id
                return await publish_application_to_channel(context, application_id)
    else:
        try:
            message = await context.bot.send_message(
                chat_id=channel_id,
                text=message_text,
                reply_markup=keyboard
            )
        except ChatMigrated as e:
            new_id = e.new_chat_id
            context.bot_data['applications_channel_id'] = new_id
            APPLICATIONS_CHANNEL_ID = new_id
            return await publish_application_to_channel(context, application_id)
        except Exception as err:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª: {err}")
            return

    db.update_application_group_message_id(application_id, message.message_id)
    await update_day_summary(context, event['date'])


def format_application_status(status: str, is_primary: bool = False) -> str:
    """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∑ –ø—ñ–∫—Ç–æ–≥—Ä–∞–º–æ—é"""
    if is_primary or status == 'primary':
        return APPLICATION_STATUS_LABELS['primary']
    return APPLICATION_STATUS_LABELS.get(status, APPLICATION_STATUS_LABELS['pending'])


def build_group_application_text(applications: list, candidate: dict) -> str:
    """–ü–æ–±—É–¥—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –≥—Ä—É–ø–æ–≤–æ—ó –∑–∞—è–≤–∫–∏"""
    lines = [
        f"–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ {candidate['full_name']}",
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {candidate['phone']}",
        f"ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {candidate['user_id']}",
        "",
        "–û–±—Ä–∞–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏:"
    ]

    for idx, item in enumerate(applications, start=1):
        event = item['event']
        status_icon = format_application_status(item['status'], item.get('is_primary', False))
        photo_note = " (—Ñ–æ—Ç–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ)" if event.get('needs_photo') else ""
        lines.append(
            f"{idx}. {format_date(event['date'])} {event['time']} ‚Äî {event['procedure_type']}{photo_note} {status_icon}"
        )

    return "\n".join(lines)


def build_group_application_keyboard(applications: list, candidate: dict) -> InlineKeyboardMarkup:
    """–ó—ñ–±—Ä–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≥—Ä—É–ø–æ–≤–æ—ó –∑–∞—è–≤–∫–∏"""
    rows = []

    for item in applications:
        application_id = item['id']
        event = item['event']
        label = f"{event['time']} ¬∑ {event['procedure_type']}"
        status = item['status']

        row = [
            InlineKeyboardButton(
                label,
                callback_data="noop",
                switch_inline_query_current_chat=f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']} ({event['time']})"
            )
        ]

        if status == 'pending':
            row.append(InlineKeyboardButton("–í —Ä–µ–∑–µ—Ä–≤", callback_data=f"approve_{application_id}"))
            row.append(InlineKeyboardButton("‚ùå", callback_data=f"reject_{application_id}"))
        elif status == 'approved':
            row.append(InlineKeyboardButton("–û–±—Ä–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–º", callback_data=f"primary_{application_id}"))
            row.append(InlineKeyboardButton("‚ùå", callback_data=f"reject_{application_id}"))
        elif status == 'primary':
            row.append(InlineKeyboardButton("‚≠ê", callback_data="noop"))
            row.append(InlineKeyboardButton("‚ùå", callback_data=f"reject_{application_id}"))
        elif status in ('rejected', 'cancelled'):
            row.append(InlineKeyboardButton("–í —Ä–µ–∑–µ—Ä–≤", callback_data=f"approve_{application_id}"))
            row.append(InlineKeyboardButton("‚ùå", callback_data=f"reject_{application_id}"))

        rows.append(row)

    rows.append([InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ—ñ–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", url=f"tg://user?id={candidate['user_id']}")])

    return InlineKeyboardMarkup(rows)


def build_single_application_keyboard(application: dict, event: dict) -> InlineKeyboardMarkup:
    """–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∑–∞—è–≤–∫–∏ –∑ –æ–¥–Ω—ñ—î—é –ø—Ä–æ—Ü–µ–¥—É—Ä–æ—é"""
    label = f"{event['time']} ¬∑ {event['procedure_type']}"
    row = [
        InlineKeyboardButton(
            label,
            callback_data="noop",
            switch_inline_query_current_chat=f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']} ({event['time']})"
        )
    ]

    status = application.get('status', 'pending')
    if status == 'pending':
        row.append(InlineKeyboardButton("–í —Ä–µ–∑–µ—Ä–≤", callback_data=f"approve_{application['id']}"))
        row.append(InlineKeyboardButton("‚ùå", callback_data=f"reject_{application['id']}"))
    elif status == 'approved':
        row.append(InlineKeyboardButton("–û–±—Ä–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–º", callback_data=f"primary_{application['id']}"))
        row.append(InlineKeyboardButton("‚ùå", callback_data=f"reject_{application['id']}"))
    elif status == 'primary':
        row.append(InlineKeyboardButton("‚≠ê", callback_data="noop"))
        row.append(InlineKeyboardButton("‚ùå", callback_data=f"reject_{application['id']}"))
    elif status in ('rejected', 'cancelled'):
        row.append(InlineKeyboardButton("–í —Ä–µ–∑–µ—Ä–≤", callback_data=f"approve_{application['id']}"))
        row.append(InlineKeyboardButton("‚ùå", callback_data=f"reject_{application['id']}"))

    keyboard = [
        row,
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ—ñ–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", url=f"tg://user?id={application['user_id']}")]
    ]
    return InlineKeyboardMarkup(keyboard)


def format_day_count_text(count: int) -> str:
    """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ç–µ–∫—Å—Ç –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–∞—è–≤–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∑–∞ –¥–µ–Ω—å"""
    if count <= 0:
        return ""
    if count == 1:
        return " (1 –∑–∞—è–≤–∫–∞ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å)"
    if 2 <= count <= 4:
        return f" ({count} –∑–∞—è–≤–∫–∏ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å)"
    return f" ({count} –∑–∞—è–≤–æ–∫ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å)"


def build_message_link(chat_identifier, message_id: Optional[int]) -> Optional[str]:
    """–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è Telegram"""
    if not message_id or not chat_identifier:
        return None

    chat_id = chat_identifier
    if isinstance(chat_id, str):
        if chat_id.startswith('@'):
            return f"https://t.me/{chat_id.lstrip('@')}/{message_id}"
        try:
            chat_id = int(chat_id)
        except ValueError:
            return None

    if chat_id > 0:
        return f"https://t.me/c/{chat_id}/{message_id}"

    chat_id_str = str(chat_id)
    if chat_id_str.startswith('-100'):
        return f"https://t.me/c/{chat_id_str[4:]}/{message_id}"

    return None

def format_status_counts(counter: Counter) -> str:
    """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –∫–æ–º–ø–∞–∫—Ç–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞—è–≤–æ–∫ –∑–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
    parts = []
    for status in STATUS_DISPLAY_ORDER:
        count = counter.get(status, 0)
        if count:
            parts.append(f"{APPLICATION_STATUS_EMOJI.get(status, '')}{count}")
    return " ".join(parts) if parts else "–∑–∞—è–≤–æ–∫ –ø–æ–∫–∏ –Ω–µ–º–∞—î"


def build_day_summary_text(context: ContextTypes.DEFAULT_TYPE, date: str) -> Optional[str]:
    """–°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –ø—ñ–¥—Å—É–º–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ –≤—Å—ñ—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö –¥–Ω—è"""
    events = db.get_events_by_date(date)
    if not events:
        return None

    lines = [f"üìÖ {format_date(date)}", "", "–ü—Ä–æ—Ü–µ–¥—É—Ä–∏ –¥–Ω—è:"]
    user_day_counts: Dict[int, int] = {}
    channel_id = context.bot_data.get('applications_channel_id', APPLICATIONS_CHANNEL_ID)

    for idx, event in enumerate(events, start=1):
        applications = db.get_applications_by_event(event['id'])
        photo_note = " (—Ñ–æ—Ç–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ)" if event.get('needs_photo') else ""
        header = f"{idx}. {event['time']} ‚Äî {event['procedure_type']}{photo_note}"
        lines.append(header)

        if event.get('comment'):
            lines.append(f"   –ö–æ–º–µ–Ω—Ç–∞—Ä: {html.escape(event['comment'])}")

        if applications:
            status_counter = Counter(app['status'] for app in applications)
            lines.append(f"   –°—Ç–∞—Ç—É—Å–∏: {format_status_counts(status_counter)}")

            for app_record in applications:
                status = app_record['status']
                emoji = APPLICATION_STATUS_EMOJI.get(status, '‚Ä¢')

                user_id = app_record['user_id']
                if user_id not in user_day_counts:
                    user_day_counts[user_id] = len(db.get_user_applications_for_date(user_id, date))
                day_count = user_day_counts[user_id]

                name = html.escape(app_record['full_name'])
                phone = html.escape(app_record['phone'] or "‚Äî")
                count_text = format_day_count_text(day_count)

                extras = []
                if status == 'primary':
                    extras.append("–æ—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç")
                elif status == 'approved':
                    extras.append("—Ä–µ–∑–µ—Ä–≤")

                extras_text = " ".join(html.escape(part) for part in extras) if extras else ""

                link = build_message_link(channel_id, app_record.get('group_message_id'))
                emoji_markup = f'<a href="{link}">{html.escape(emoji)}</a>' if link else html.escape(emoji)

                parts = [f"   ‚Ä¢ {name} ‚Äî {phone}{count_text}".strip()]
                if extras_text:
                    parts.append(extras_text)
                parts.append(emoji_markup)
                line = " ".join(part for part in parts if part)
                lines.append(line)
        else:
            lines.append("   –ó–∞—è–≤–æ–∫ –ø–æ–∫–∏ –Ω–µ–º–∞—î.")

        lines.append("")

    while lines and lines[-1] == "":
        lines.pop()

    return "\n".join(lines)


async def update_day_summary(context: ContextTypes.DEFAULT_TYPE, date: str) -> None:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ –ø—ñ–¥—Å—É–º–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ –¥–Ω—é –≤ –∞–¥–º—ñ–Ω—Å—å–∫—ñ–π –≥—Ä—É–ø—ñ"""
    global GROUP_ID
    summary_text = build_day_summary_text(context, date)
    if not summary_text:
        return

    day_summary_cache: Dict[str, Optional[int]] = context.bot_data.setdefault('day_summary_messages', {})
    updating_dates: set = context.bot_data.setdefault('day_summary_updating', set())
    if date in updating_dates:
        return

    message_id = day_summary_cache.get(date)
    if message_id is None:
        message_id = db.get_day_message_id(date)
        if message_id is not None:
            day_summary_cache[date] = message_id

    logger.debug(
        "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–µ–Ω–Ω–æ–≥–æ –ø—ñ–¥—Å—É–º–∫—É: –¥–∞—Ç–∞=%s, cached_message_id=%s",
        date,
        message_id
    )

    while True:
        group_id = context.bot_data.get('group_id', GROUP_ID)
        if isinstance(group_id, str):
            if group_id.startswith('@'):
                resolved_group_id = group_id
            else:
                try:
                    resolved_group_id = int(group_id)
                except ValueError:
                    base_group_id = GROUP_ID
                    if isinstance(base_group_id, str) and base_group_id.startswith('@'):
                        resolved_group_id = base_group_id
                    else:
                        try:
                            resolved_group_id = int(base_group_id)
                        except ValueError:
                            logger.error(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π GROUP_ID: {base_group_id}")
                            return
        else:
            resolved_group_id = group_id

        logger.debug(
            "–°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫—É: date=%s, resolved_group_id=%s, message_id=%s",
            date,
            resolved_group_id,
            message_id
        )

        updating_dates.add(date)
        try:
            if message_id:
                try:
                    await context.bot.edit_message_text(
                        chat_id=resolved_group_id,
                        message_id=message_id,
                        text=summary_text,
                        parse_mode=ParseMode.HTML,
                        disable_web_page_preview=True
                    )
                    dialogs = context.chat_data.setdefault('admin_dialogs', {})
                    dialogs[f'day_summary_{date}'] = {'chat_id': resolved_group_id, 'message_id': message_id}
                    return
                except BadRequest as err:
                    if "message is not modified" in str(err).lower():
                        return
                    logger.debug(f"–ü—ñ–¥—Å—É–º–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î –∞–±–æ –Ω–µ —Ä–µ–¥–∞–≥—É—î—Ç—å—Å—è, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ: {err}")
                    message_id = None
                    db.delete_day_message(date)
                    day_summary_cache.pop(date, None)
                    continue

            try:
                message = await context.bot.send_message(
                    chat_id=resolved_group_id,
                    text=summary_text,
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True
                )
                logger.info(
                    "–ü—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: date=%s, chat_id=%s, message_id=%s",
                    date,
                    resolved_group_id,
                    getattr(message, "message_id", None)
                )
                db.update_day_message_id(date, message.message_id)
                day_summary_cache[date] = message.message_id
                dialogs = context.chat_data.setdefault('admin_dialogs', {})
                dialogs[f'day_summary_{date}'] = {'chat_id': resolved_group_id, 'message_id': message.message_id}
                return
            except ChatMigrated as err:
                new_id = err.new_chat_id
                context.bot_data['group_id'] = new_id
                day_summary_cache.pop(date, None)
                db.delete_day_message(date)
                GROUP_ID = new_id
                message_id = None
                logger.info(f"–ì—Ä—É–ø—É –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –¥–æ –Ω–æ–≤–æ–≥–æ chat_id={new_id}. –û–Ω–æ–≤–ª—é—é –ø—ñ–¥—Å—É–º–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
                continue
        except ChatMigrated as err:
            new_id = err.new_chat_id
            context.bot_data['group_id'] = new_id
            day_summary_cache.pop(date, None)
            db.delete_day_message(date)
            GROUP_ID = new_id
            message_id = None
            logger.info(f"–ì—Ä—É–ø—É –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –¥–æ –Ω–æ–≤–æ–≥–æ chat_id={new_id}. –û–Ω–æ–≤–ª—é—é –ø—ñ–¥—Å—É–º–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
            continue
        except Exception as err:
            day_summary_cache.pop(date, None)
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø—ñ–¥—Å—É–º–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–Ω—è {date}: {err}")
            return
        finally:
            updating_dates.discard(date)


async def send_primary_instruction(context: ContextTypes.DEFAULT_TYPE, app: dict, event: dict) -> bool:
    """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞"""
    instruction = (
        f"–í—ñ—Ç–∞—î–º–æ! –í–∞—à—É –∑–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ!\n\n"
        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']}\n"
        f"–î–∞—Ç–∞: {format_date(event['date'])}\n"
        f"–ß–∞—Å: {event['time']}\n\n"
        f"–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:\n"
        f"‚Ä¢ –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–∏–π–¥—ñ—Ç—å –∑–∞ 10 —Ö–≤–∏–ª–∏–Ω –¥–æ –ø–æ—á–∞—Ç–∫—É\n"
        f"‚Ä¢ –ú–∞–π—Ç–µ –ø—Ä–∏ —Å–æ–±—ñ –¥–æ–∫—É–º–µ–Ω—Ç, —â–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –æ—Å–æ–±—É\n"
        f"‚Ä¢ –£ —Ä–∞–∑—ñ –Ω–µ–º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø—Ä–∏–π—Ç–∏, –ø–æ–≤—ñ–¥–æ–º—Ç–µ –Ω–∞—Å –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å\n\n"
        f"–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!"
    )

    try:
        await context.bot.send_message(
            chat_id=app['user_id'],
            text=instruction,
            reply_markup=get_user_keyboard()
        )
        return True
    except Exception as err:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É: {err}")
        return False


async def promote_candidate_to_primary(
    context: ContextTypes.DEFAULT_TYPE,
    application_id: int,
    *,
    notify_user: bool = True
) -> Optional[dict]:
    """–ü–æ–∑–Ω–∞—á–∏—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ—Å–Ω–æ–≤–Ω–∏–º, –æ–Ω–æ–≤–∏–≤—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —Å–ø–æ–≤—ñ—Å—Ç–∏–≤—à–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    app = db.get_application(application_id)
    if not app:
        return None

    event = db.get_event(app['event_id'])
    if not event:
        return None

    db.set_primary_application(application_id)
    db.recalculate_application_positions(event['id'])

    instruction_sent = True
    if notify_user:
        instruction_sent = await send_primary_instruction(context, app, event)

    app = db.get_application(application_id)
    await update_day_summary(context, event['date'])
    group_updated = await refresh_group_application_message(context, application_id)
    return {
        'app': app,
        'event': event,
        'instruction_sent': instruction_sent,
        'group_updated': group_updated
    }


async def promote_next_candidate(context: ContextTypes.DEFAULT_TYPE, event_id: int) -> Optional[int]:
    """–ó—Ä–æ–±–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ—Å–Ω–æ–≤–Ω–∏–º, —è–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–∫–∞—Å–æ–≤–∞–Ω–∏–π"""
    applications = db.get_applications_by_event(event_id)

    # –Ø–∫—â–æ –≤–∂–µ —î –æ—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç ‚Äì –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
    for app in applications:
        if app['status'] == 'primary':
            return app['id']

    for app in applications:
        if app['status'] == 'approved':
            result = await promote_candidate_to_primary(context, app['id'])
            if result:
                return app['id']
    return None


async def publish_group_application_to_channel(
    context: ContextTypes.DEFAULT_TYPE,
    application_results: list,
    candidate: dict,
    photos: list
) -> None:
    """–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–æ—ó –∑–∞—è–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª"""
    global APPLICATIONS_CHANNEL_ID

    channel_id = context.bot_data.get('applications_channel_id', APPLICATIONS_CHANNEL_ID)
    if isinstance(channel_id, str):
        try:
            channel_id = int(channel_id)
        except ValueError:
            channel_id = int(APPLICATIONS_CHANNEL_ID)

    applications_data = [
        {
            'id': app_id,
            'event': event,
            'status': 'pending',
            'is_primary': False
        }
        for app_id, event in application_results
    ]

    if photos:
        try:
            if len(photos) == 1:
                await context.bot.send_photo(
                    chat_id=channel_id,
                    photo=photos[0],
                    caption=f"–§–æ—Ç–æ –¥–æ –∑–∞—è–≤–∫–∏ –≤—ñ–¥ {candidate['full_name']}"
                )
            else:
                media = [
                    InputMediaPhoto(
                        media=photo_id,
                        caption=f"–§–æ—Ç–æ –¥–æ –∑–∞—è–≤–∫–∏ –≤—ñ–¥ {candidate['full_name']}" if idx == 0 else ''
                    )
                    for idx, photo_id in enumerate(photos)
                ]
                await context.bot.send_media_group(chat_id=channel_id, media=media)
        except ChatMigrated as e:
            new_id = e.new_chat_id
            context.bot_data['applications_channel_id'] = new_id
            APPLICATIONS_CHANNEL_ID = new_id
            return await publish_group_application_to_channel(context, application_results, candidate, photos)
        except Exception as err:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –∑–∞—è–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {err}")

    message_text = build_group_application_text(applications_data, candidate)
    keyboard = build_group_application_keyboard(applications_data, candidate)

    try:
        message = await context.bot.send_message(
            chat_id=channel_id,
            text=message_text,
            reply_markup=keyboard
        )
    except ChatMigrated as e:
        new_id = e.new_chat_id
        context.bot_data['applications_channel_id'] = new_id
        APPLICATIONS_CHANNEL_ID = new_id
        return await publish_group_application_to_channel(context, application_results, candidate, photos)
    except Exception as err:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª: {err}")
        return

    for application_id, _ in application_results:
        db.update_application_group_message_id(application_id, message.message_id)

    updated_dates = {event['date'] for _, event in application_results}
    for event_date in updated_dates:
        await update_day_summary(context, event_date)


async def refresh_group_application_message(
    context: ContextTypes.DEFAULT_TYPE,
    application_id: int
) -> bool:
    """–û–Ω–æ–≤–∏—Ç–∏ –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –∑–∞—è–≤–∫–∞ —î —á–∞—Å—Ç–∏–Ω–æ—é –≥—Ä—É–ø–∏"""
    app = db.get_application_with_event(application_id)
    if not app or not app.get('group_message_id'):
        return False

    group_message_id = app['group_message_id']
    channel_id = context.bot_data.get('applications_channel_id', APPLICATIONS_CHANNEL_ID)
    if isinstance(channel_id, str):
        try:
            channel_id = int(channel_id)
        except ValueError:
            channel_id = int(APPLICATIONS_CHANNEL_ID)

    applications = db.get_applications_by_group_message(group_message_id)
    if not applications:
        return False

    candidate = {
        'full_name': applications[0]['full_name'],
        'phone': applications[0]['phone'],
        'user_id': applications[0]['user_id']
    }

    applications_data = [
        {
            'id': item['id'],
            'event': {
                'id': item['event_id'],
                'procedure_type': item['procedure_type'],
                'date': item['date'],
                'time': item['time'],
                'needs_photo': bool(item.get('needs_photo'))
            },
            'status': item['status'],
            'is_primary': bool(item.get('is_primary'))
        }
        for item in applications
    ]

    text = build_group_application_text(applications_data, candidate)
    keyboard = build_group_application_keyboard(applications_data, candidate)

    try:
        await context.bot.edit_message_text(
            chat_id=channel_id,
            message_id=group_message_id,
            text=text,
            reply_markup=keyboard
        )
    except Exception as err:
        logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏: {err}")
        return False

    return True


# ==================== –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ó–ê–Ø–í–ö–ê–ú–ò ====================

async def approve_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞—è–≤–∫—É"""
    query = update.callback_query

    if not is_admin(query.from_user.id):
        await answer_callback_query(query, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    await answer_callback_query(query)

    application_id = int(query.data.split('_')[1])
    app = db.get_application(application_id)

    db.update_application_status(application_id, 'approved')
    db.recalculate_application_positions(app['event_id'])
    event = db.get_event(app['event_id'])
    if event:
        await update_day_summary(context, event['date'])

    app = db.get_application(application_id)

    if await refresh_group_application_message(context, application_id):
        return

    if event:
        await query.edit_message_reply_markup(
            reply_markup=build_single_application_keyboard(app, event)
        )
    else:
        await query.edit_message_reply_markup(reply_markup=None)


async def reject_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É"""
    query = update.callback_query

    if not is_admin(query.from_user.id):
        await answer_callback_query(query, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    await answer_callback_query(query)

    application_id = int(query.data.split('_')[1])
    application = db.get_application(application_id)
    if not application:
        await send_admin_message_from_query(query, context, "–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞.")
        return

    # –Ø–∫—â–æ —Ü–µ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    if application['status'] == 'primary':
        event = db.get_event(application['event_id'])
        if event:
            warning_text = (
                "‚ö†Ô∏è <b>–£–í–ê–ì–ê!</b>\n\n"
                f"–í–∏ –Ω–∞–º–∞–≥–∞—î—Ç–µ—Å—å –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ <b>–æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</b>.\n\n"
                f"üë§ {html.escape(application['full_name'])}\n"
                f"üìû {html.escape(application['phone'])}\n"
                f"üìÖ {format_date(event['date'])}\n"
                f"üïê {event['time']} - {event['procedure_type']}\n\n"
                f"–ö–∞–Ω–¥–∏–¥–∞—Ç—É –≤–∂–µ –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó.\n\n"
                f"–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?"
            )
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_reject_primary_{application_id}"),
                    InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_reject_primary_{application_id}")
                ]
            ]
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ñ–æ—Ç–æ —á–∏ —Ç–µ–∫—Å—Ç)
            try:
                if query.message.photo:
                    # –Ø–∫—â–æ —Ü–µ —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–≥—É—î–º–æ caption
                    await query.edit_message_caption(
                        caption=warning_text,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode=ParseMode.HTML
                    )
                else:
                    # –Ø–∫—â–æ —Ü–µ —Ç–µ–∫—Å—Ç, —Ä–µ–¥–∞–≥—É—î–º–æ —Ç–µ–∫—Å—Ç
                    await query.edit_message_text(
                        text=warning_text,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode=ParseMode.HTML
                    )
            except Exception as err:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è primary: {err}")
                await send_admin_message_from_query(query, context, warning_text)
        return

    # –Ø–∫—â–æ –Ω–µ primary - –≤—ñ–¥—Ö–∏–ª—è—î–º–æ —è–∫ –∑–∞–∑–≤–∏—á–∞–π
    db.update_application_status(application_id, 'rejected')
    db.recalculate_application_positions(application['event_id'])
    event = db.get_event(application['event_id'])
    if event:
        await update_day_summary(context, event['date'])

    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ
    if await refresh_group_application_message(context, application_id):
        return

    refreshed = db.get_application(application_id)
    if event:
        await query.edit_message_reply_markup(
            reply_markup=build_single_application_keyboard(refreshed, event)
        )
    else:
        await query.edit_message_reply_markup(reply_markup=None)


async def set_primary_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É —è–∫ –æ—Å–Ω–æ–≤–Ω—É"""
    query = update.callback_query

    if not is_admin(query.from_user.id):
        await answer_callback_query(query, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    await answer_callback_query(query, "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–∏–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º")

    application_id = int(query.data.split('_')[1])
    result = await promote_candidate_to_primary(context, application_id)

    if not result:
        await send_admin_message_from_query(query, context, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É")
        return

    if result['instruction_sent']:
        await send_admin_message_from_query(query, context, "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—É")
    else:
        await send_admin_message_from_query(query, context, "–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É")

    if not result['group_updated']:
        try:
            await query.edit_message_reply_markup(
                reply_markup=build_single_application_keyboard(result['app'], result['event'])
            )
        except Exception as err:
            logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {err}")


async def confirm_reject_primary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    query = update.callback_query

    if not is_admin(query.from_user.id):
        await answer_callback_query(query, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    await answer_callback_query(query, "–û—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")

    application_id = int(query.data.split('_')[-1])
    application = db.get_application(application_id)
    if not application:
        await send_admin_message_from_query(query, context, "–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞.")
        return

    # –í—ñ–¥—Ö–∏–ª—è—î–º–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    db.update_application_status(application_id, 'rejected')
    db.recalculate_application_positions(application['event_id'])

    event = db.get_event(application['event_id'])
    if event:
        await update_day_summary(context, event['date'])

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–∞–Ω–¥–∏–¥–∞—Ç—É –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
    if event:
        rejection_text = (
            "–í–∏–±–∞—á—Ç–µ, –∞–ª–µ –≤–∞—à—É —Ä–∞–Ω—ñ—à–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—É –∑–∞—è–≤–∫—É –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. "
            "–ü—Ä–æ—Å–∏–º–æ –≤–∏–±–∞—á–µ–Ω–Ω—è –∑–∞ –Ω–µ–∑—Ä—É—á–Ω–æ—Å—Ç—ñ.\n\n"
            f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']}\n"
            f"–î–∞—Ç–∞: {format_date(event['date'])}\n"
            f"–ß–∞—Å: {event['time']}"
        )
        try:
            await context.bot.send_message(
                chat_id=application['user_id'],
                text=rejection_text,
                reply_markup=get_user_keyboard()
            )
        except Exception as err:
            logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {err}")

    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
    await send_admin_message_from_query(
        query,
        context,
        "‚úÖ –û—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ."
    )

    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ
    if await refresh_group_application_message(context, application_id):
        return

    # –Ø–∫—â–æ –≥—Ä—É–ø–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ, –æ–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    refreshed = db.get_application(application_id)
    if event:
        await query.edit_message_reply_markup(
            reply_markup=build_single_application_keyboard(refreshed, event)
        )
    else:
        await query.edit_message_reply_markup(reply_markup=None)


async def cancel_reject_primary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞—Ç–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    query = update.callback_query

    if not is_admin(query.from_user.id):
        await answer_callback_query(query, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    await answer_callback_query(query, "–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")

    application_id = int(query.data.split('_')[-1])
    application = db.get_application(application_id)
    if not application:
        await send_admin_message_from_query(query, context, "–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return

    event = db.get_event(application['event_id'])
    if not event:
        await send_admin_message_from_query(query, context, "–ó–∞—Ö—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        return

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
    text = (
        f"–ó–∞—è–≤–∫–∞ ‚Ññ{application_id}\n\n"
        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']}\n"
        f"–î–∞—Ç–∞: {format_date(event['date'])} {event['time']}\n\n"
        f"–ü–Ü–ë: {application['full_name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {application['phone']}"
    )
    keyboard = build_single_application_keyboard(application, event)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ñ–æ—Ç–æ —á–∏ —Ç–µ–∫—Å—Ç)
    try:
        if query.message.photo:
            # –Ø–∫—â–æ —Ü–µ —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–≥—É—î–º–æ caption
            await query.edit_message_caption(
                caption=text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
        else:
            # –Ø–∫—â–æ —Ü–µ —Ç–µ–∫—Å—Ç, —Ä–µ–¥–∞–≥—É—î–º–æ —Ç–µ–∫—Å—Ç
            await query.edit_message_text(
                text=text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
    except Exception as err:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏: {err}")
        # Fallback - –æ–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        await query.edit_message_reply_markup(reply_markup=keyboard)


async def _finalize_application_cancellation(
    query,
    context: ContextTypes.DEFAULT_TYPE,
    app: dict,
    *,
    apology: bool = False
) -> None:
    """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏"""
    application_id = app['id']
    event = db.get_event(app['event_id'])

    db.update_application_status(application_id, 'cancelled')
    db.recalculate_application_positions(app['event_id'])

    if event:
        await update_day_summary(context, event['date'])

    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
    if apology and event:
        message_text = (
            "–í–∏–±–∞—á—Ç–µ, –∞–ª–µ –≤–∞—à—É —Ä–∞–Ω—ñ—à–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—É –∑–∞—è–≤–∫—É –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. "
            "–ü—Ä–æ—Å–∏–º–æ –≤–∏–±–∞—á–µ–Ω–Ω—è –∑–∞ –Ω–µ–∑—Ä—É—á–Ω–æ—Å—Ç—ñ.\n\n"
            f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']}\n"
            f"–î–∞—Ç–∞: {format_date(event['date'])}\n"
            f"–ß–∞—Å: {event['time']}"
        )
    elif event:
        message_text = (
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–∞ —è–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.\n\n"
            f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']}\n"
            f"–î–∞—Ç–∞: {format_date(event['date'])}\n"
            f"–ß–∞—Å: {event['time']}"
        )
    else:
        message_text = (
            "–í–∏–±–∞—á—Ç–µ, –∞–ª–µ –≤–∞—à—É –∑–∞—è–≤–∫—É –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü—Ä–æ—Å–∏–º–æ –≤–∏–±–∞—á–µ–Ω–Ω—è –∑–∞ –Ω–µ–∑—Ä—É—á–Ω–æ—Å—Ç—ñ."
            if apology else
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–∞ —è–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–∞."
        )

    try:
        await context.bot.send_message(
            chat_id=app['user_id'],
            text=message_text,
            reply_markup=get_user_keyboard()
        )
    except Exception as err:
        logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏: {err}")

    group_updated = await refresh_group_application_message(context, application_id)
    promoted_id = await promote_next_candidate(context, app['event_id'])
    promoted_app = db.get_application(promoted_id) if promoted_id else None
    promoted_event = db.get_event(app['event_id']) if promoted_id else None

    if promoted_id:
        await send_admin_message_from_query(query, context, "–ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ù–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–∏–º.")
        if promoted_app and promoted_event:
            try:
                await context.bot.send_message(
                    chat_id=promoted_app['user_id'],
                    text=(
                        "–í—ñ—Ç–∞—î–º–æ! –í–∞—Å –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–∏–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º.\n\n"
                        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {promoted_event['procedure_type']}\n"
                        f"–î–∞—Ç–∞: {format_date(promoted_event['date'])}\n"
                        f"–ß–∞—Å: {promoted_event['time']}"
                    ),
                    reply_markup=get_user_keyboard()
                )
            except Exception as err:
                logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {err}")
    else:
        await send_admin_message_from_query(query, context, "–ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –†–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –Ω–µ–º–∞—î.")

    if not group_updated:
        refreshed_app = db.get_application(application_id)
        refreshed_event = db.get_event(app['event_id'])
        if refreshed_app and refreshed_event:
            try:
                await query.edit_message_reply_markup(
                    reply_markup=build_single_application_keyboard(refreshed_app, refreshed_event)
                )
            except Exception as err:
                logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏: {err}")


async def cancel_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∑–Ω–∞—á–∏—Ç–∏ –∑–∞—è–≤–∫—É —è–∫ —Å–∫–∞—Å–æ–≤–∞–Ω—É —Ç–∞ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ"""
    query = update.callback_query

    if not is_admin(query.from_user.id):
        await answer_callback_query(query, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    application_id = int(query.data.split('_')[1])
    app = db.get_application(application_id)

    if not app:
        await answer_callback_query(query, "–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await send_admin_message_from_query(query, context, "–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–∞.")
        return

    logger.debug(
        "cancel_application: application_id=%s status=%s",
        application_id,
        app.get('status')
    )

    if app.get('status') == 'primary':
        confirm_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –¢–∞–∫, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"confirm_cancel_primary_{application_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –±–µ–∑ –∑–º—ñ–Ω", callback_data=f"cancel_primary_back_{application_id}")]
        ])
        try:
            await query.edit_message_reply_markup(reply_markup=confirm_keyboard)
        except Exception as err:
            logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: {err}")
        await answer_callback_query(
            query,
            "–¶—å–æ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏?",
            show_alert=True
        )
        return

    await answer_callback_query(query, "–ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
    await _finalize_application_cancellation(query, context, app, apology=False)


async def confirm_cancel_primary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    query = update.callback_query
    if not is_admin(query.from_user.id):
        await answer_callback_query(query, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    application_id = int(query.data.split('_')[3])
    app = db.get_application(application_id)
    if not app:
        await answer_callback_query(query, "–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    await answer_callback_query(query, "–ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
    await _finalize_application_cancellation(query, context, app, apology=True)


async def cancel_primary_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –±–µ–∑ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    query = update.callback_query
    if not is_admin(query.from_user.id):
        await answer_callback_query(query, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    application_id = int(query.data.split('_')[3])
    app = db.get_application(application_id)
    if not app:
        await answer_callback_query(query, "–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    refreshed = await refresh_group_application_message(context, application_id)
    if not refreshed:
        refreshed_event = db.get_event(app['event_id'])
        if refreshed_event:
            try:
                await query.edit_message_reply_markup(
                    reply_markup=build_single_application_keyboard(app, refreshed_event)
                )
            except Exception as err:
                logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {err}")

    await answer_callback_query(query, "–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ")


async def view_event_applications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞—Ö—ñ–¥"""
    query = update.callback_query

    if not is_admin(query.from_user.id):
        await answer_callback_query(query, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    event_id = int(query.data.split('_')[2])
    all_applications = db.get_applications_by_event(event_id)

    if not all_applications:
        await answer_callback_query(query, "–ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ –Ω–∞ —Ü–µ–π –∑–∞—Ö—ñ–¥", show_alert=True)
        return

    await answer_callback_query(query)

    # –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞—Ö—ñ–¥
    event = db.get_event(event_id)

    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞—è–≤–∫–∏: —Å–ø–æ—á–∞—Ç–∫—É –æ—Å–Ω–æ–≤–Ω–∏–π, –ø–æ—Ç—ñ–º —Å—Ö–≤–∞–ª–µ–Ω—ñ, –ø–æ—Ç—ñ–º —Ä–µ—à—Ç–∞
    primary = [app for app in all_applications if app['is_primary'] == 1]
    approved = [app for app in all_applications if app['status'] == 'approved' and app['is_primary'] == 0]
    other = [app for app in all_applications if app['status'] != 'approved']

    message = f"üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞—Ö—ñ–¥:\n"
    message += f"üìÖ {event['procedure_type']}\n"
    message += f"üïê {format_date(event['date'])} –æ {event['time']}\n\n"

    # –û—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç (—á–µ—Ä–≤–æ–Ω–∏–º —á–µ—Ä–µ–∑ HTML)
    if primary:
        app = primary[0]
        message += f"üî¥ <b>–û–°–ù–û–í–ù–ò–ô –ö–ê–ù–î–ò–î–ê–¢:</b>\n"
        message += f"   üë§ {app['full_name']}\n"
        message += f"   üì± {app['phone']}\n\n"

    # –°—Ö–≤–∞–ª–µ–Ω—ñ –∑–∞—è–≤–∫–∏ (–∂–∏—Ä–Ω–∏–º)
    if approved:
        message += "<b>‚úÖ –°–•–í–ê–õ–ï–ù–Ü –ó–ê–Ø–í–ö–ò:</b>\n"
        for i, app in enumerate(approved, 1):
            message += f"<b>{i}. {app['full_name']}</b>\n"
            message += f"   üì± {app['phone']}\n"
        message += "\n"

    # –Ü–Ω—à—ñ –∑–∞—è–≤–∫–∏ (pending, rejected, cancelled)
    if other:
        message += "üì• –Ü–ù–®–Ü –ó–ê–Ø–í–ö–ò:\n"
        for app in other:
            status_map = {
                'pending': ('‚è≥', '–æ—á—ñ–∫—É—î'),
                'rejected': ('‚ùå', '–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ'),
                'cancelled': ('üö´', '—Å–∫–∞—Å–æ–≤–∞–Ω–æ')
            }
            status_emoji, status_text = status_map.get(app['status'], ('‚ùì', '–Ω–µ–≤—ñ–¥–æ–º–æ'))

            message += f"{status_emoji} {app['full_name']}\n"
            message += f"   üì± {app['phone']}\n"
            message += f"   –°—Ç–∞—Ç—É—Å: {status_text}\n"

    keyboard = [[InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="close_message")]]

    # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, –±–æ –≤–∏—Ö—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ
    try:
        await send_admin_message_from_query(query, context, 
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞—è–≤–æ–∫: {e}")
        await answer_callback_query(query, "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞—è–≤–æ–∫", show_alert=True)


# ==================== –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –ö–ê–ù–î–ò–î–ê–¢–£ ====================

async def forward_candidate_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –≤ –≥—Ä—É–ø—É"""
    user_id = update.effective_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —Ü–µ –Ω–µ –∞–¥–º—ñ–Ω
    if is_admin(user_id):
        return

    # –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –∑ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∞–¥–º—ñ–Ω–∞
    menu_commands = ["üìã –ú–æ—ó –∑–∞—è–≤–∫–∏", "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "üÜï –ù–æ–≤–∏–π –∑–∞—Ö—ñ–¥", "üìã –ó–∞—Ö–æ–¥–∏", "‚öôÔ∏è"]
    if update.message.text in menu_commands:
        return

    # –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ —è–∫—â–æ —Ü–µ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç (conversation –∞–∫—Ç–∏–≤–Ω–∏–π)
    # –¢—ñ–ª—å–∫–∏ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—ñ –ù–ï –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ conversation
    if 'application' in context.user_data or 'event' in context.user_data:
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤ –±–∞–∑—ñ (–ø–æ–¥–∞–≤–∞–≤ –∑–∞—è–≤–∫—É)
    user = db.get_user(user_id)
    if not user or not user['full_name']:
        return

    # –ü–µ—Ä–µ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É
    try:
        message_text = (
            f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:\n\n"
            f"üë§ {user['full_name']}\n"
            f"üì± {user['phone']}\n"
            f"üÜî User ID: {user_id}\n\n"
            f"–¢–µ–∫—Å—Ç: {update.message.text}"
        )

        keyboard = [[InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ—ñ–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", url=f"tg://user?id={user_id}")]]

        await context.bot.send_message(
            chat_id=GROUP_ID,
            text=message_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")


# ==================== MAIN ====================

async def on_bot_added_to_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó –¥–æ–¥–∞–≤–∞–Ω–Ω—è –±–æ—Ç–∞ –¥–æ —á–∞—Ç—É (–≥—Ä—É–ø–∏/–∫–∞–Ω–∞–ª—É)"""
    my_chat_member = update.my_chat_member
    if not my_chat_member:
        return

    old_status = my_chat_member.old_chat_member.status
    new_status = my_chat_member.new_chat_member.status
    chat = my_chat_member.chat

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –±–æ—Ç –±—É–≤ –¥–æ–¥–∞–Ω–∏–π –¥–æ —á–∞—Ç—É
    if old_status in ['left', 'kicked'] and new_status in ['member', 'administrator']:
        logger.info(f"–ë–æ—Ç –¥–æ–¥–∞–Ω–æ –¥–æ —á–∞—Ç—É: {chat.title} (ID: {chat.id}, —Ç–∏–ø: {chat.type})")

        # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É
        try:
            welcome_text = (
                "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—á–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏.\n\n"
                "–¢–µ–ø–µ—Ä —è –≥–æ—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–ª—è—Ç–∏ –∑–∞—è–≤–∫–∏ –≤ —Ü—ñ–π –≥—Ä—É–ø—ñ."
            )
            await context.bot.send_message(
                chat_id=chat.id,
                text=welcome_text
            )
            logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç {chat.id}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    token = os.getenv('BOT_TOKEN')
    if not token:
        logger.error("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ!")
        return

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è HTTP –∑–∞–ø–∏—Ç—ñ–≤ –∑ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    request = HTTPXRequest(
        connection_pool_size=8,
        connect_timeout=10.0,
        read_timeout=10.0,
        write_timeout=10.0
    )

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è persistence –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    persistence = PicklePersistence(filepath="bot_data.pickle")

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É –∑ —É—Å—ñ–º–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    application = (
        Application.builder()
        .token(token)
        .request(request)
        .persistence(persistence)
        .build()
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—É
    create_event_handler = ConversationHandler(
        entry_points=[
            CommandHandler('create_event', create_event_start),
            CommandHandler('new_event', create_event_start),
            CallbackQueryHandler(admin_create_event_button, pattern='^admin_create_event$'),
            MessageHandler(filters.TEXT & filters.Regex('^üÜï –ù–æ–≤–∏–π –∑–∞—Ö—ñ–¥$'), create_event_start),
            CallbackQueryHandler(create_event_same_date, pattern='^same_date_')
        ],
        states={
            CREATE_EVENT_DATE: [
                CallbackQueryHandler(create_event_date, pattern='^date_'),
                CallbackQueryHandler(create_event_date, pattern='^back_to_date$'),
                CallbackQueryHandler(close_admin_dialog_button, pattern='^close_admin_dialog$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            CREATE_EVENT_TIME: [
                CallbackQueryHandler(create_event_time, pattern='^time_'),
                CallbackQueryHandler(create_event_date, pattern='^back_to_date$'),
                CallbackQueryHandler(close_admin_dialog_button, pattern='^close_admin_dialog$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            CREATE_EVENT_PROCEDURE: [
                CallbackQueryHandler(create_event_procedure, pattern='^proc_'),
                CallbackQueryHandler(create_event_time, pattern='^back_to_time$'),
                CallbackQueryHandler(close_admin_dialog_button, pattern='^close_admin_dialog$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            CREATE_EVENT_PHOTO_NEEDED: [
                CallbackQueryHandler(create_event_photo_needed, pattern='^photo_'),
                CallbackQueryHandler(create_event_procedure, pattern='^back_to_procedure$'),
                CallbackQueryHandler(close_admin_dialog_button, pattern='^close_admin_dialog$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            CREATE_EVENT_COMMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, create_event_comment_text),
                CallbackQueryHandler(skip_event_comment, pattern='^skip_comment$'),
                CallbackQueryHandler(create_event_photo_needed, pattern='^back_to_photo$'),
                CallbackQueryHandler(close_admin_dialog_button, pattern='^close_admin_dialog$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            CREATE_EVENT_CONFIRM: [
                CallbackQueryHandler(add_event_to_day, pattern='^add_event_to_day$'),
                CallbackQueryHandler(close_admin_dialog_button, pattern='^close_admin_dialog$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            CREATE_EVENT_REVIEW: [
                CallbackQueryHandler(add_more_procedure, pattern='^add_more_procedure$'),
                CallbackQueryHandler(publish_schedule, pattern='^publish_schedule$'),
                CallbackQueryHandler(remove_last_procedure, pattern='^remove_last_procedure$'),
                CallbackQueryHandler(close_admin_dialog_button, pattern='^close_admin_dialog$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ]
        },
        fallbacks=[CallbackQueryHandler(cancel, pattern='^cancel$')],
        name="create_event_conversation",
        persistent=True,
        allow_reentry=True
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏
    apply_event_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            APPLY_SELECT_EVENTS: [
                CallbackQueryHandler(toggle_event_selection, pattern='^toggle_event_\\d+$'),
                CallbackQueryHandler(event_selection_reset, pattern='^event_selection_reset$'),
                CallbackQueryHandler(event_selection_continue, pattern='^event_selection_continue$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            APPLY_FULL_NAME: [
                CallbackQueryHandler(apply_use_saved_data, pattern='^use_saved_data$'),
                CallbackQueryHandler(apply_enter_new_data, pattern='^enter_new_data$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, apply_full_name),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            APPLY_PHONE: [
                MessageHandler(filters.CONTACT, apply_phone),
                MessageHandler(filters.TEXT & ~filters.COMMAND, apply_phone),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            APPLY_PHOTOS: [
                MessageHandler(filters.PHOTO, apply_photo),
                CallbackQueryHandler(apply_photos_done, pattern='^photos_done$'),
                CallbackQueryHandler(submit_application, pattern='^submit_application$'),
                CallbackQueryHandler(back_to_photos, pattern='^back_to_photos$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            APPLY_CONFIRM: [
                MessageHandler(filters.PHOTO, apply_photo),
                CallbackQueryHandler(submit_application, pattern='^submit_application$'),
                CallbackQueryHandler(back_to_photos, pattern='^back_to_photos$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ]
        },
        fallbacks=[CallbackQueryHandler(cancel, pattern='^cancel$')],
        name="apply_event_conversation",
        persistent=True,
        allow_reentry=True
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    block_user_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_block_user_button, pattern='^admin_block_user$')],
        states={
            BLOCK_USER_ID: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, block_user_id),
                CallbackQueryHandler(cancel_block, pattern='^cancel_block$')
            ]
        },
        fallbacks=[CallbackQueryHandler(cancel_block, pattern='^cancel_block$')],
        name="block_user_conversation",
        persistent=True,
        allow_reentry=True
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
    add_procedure_type_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_procedure_type_start, pattern='^pt_add$')],
        states={
            ADD_PROCEDURE_TYPE_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_procedure_type_name),
                CallbackQueryHandler(cancel_procedure_type, pattern='^pt_cancel$')
            ]
        },
        fallbacks=[CallbackQueryHandler(cancel_procedure_type, pattern='^pt_cancel$')],
        name="add_procedure_type_conversation",
        persistent=True,
        allow_reentry=True
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
    edit_procedure_type_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(edit_procedure_type_start, pattern='^pt_edit_')],
        states={
            EDIT_PROCEDURE_TYPE_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_procedure_type_name),
                CallbackQueryHandler(cancel_procedure_type, pattern='^pt_cancel$')
            ]
        },
        fallbacks=[CallbackQueryHandler(cancel_procedure_type, pattern='^pt_cancel$')],
        name="edit_procedure_type_conversation",
        persistent=True,
        allow_reentry=True
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –ë–î –∑ –ø–∞—Ä–æ–ª–µ–º
    clear_db_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_clear_db_button, pattern='^admin_clear_db$')],
        states={
            CLEAR_DB_PASSWORD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, clear_db_password),
                CallbackQueryHandler(cancel_clear_db, pattern='^cancel_clear_db$')
            ]
        },
        fallbacks=[CallbackQueryHandler(cancel_clear_db, pattern='^cancel_clear_db$')],
        name="clear_db_conversation",
        persistent=True,
        allow_reentry=True
    )

    # –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ (ConversationHandlers –º–∞—é—Ç—å –≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç - group 0)
    application.add_handler(TypeHandler(Update, log_update), group=-1)

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –±–æ—Ç–∞ –¥–æ —á–∞—Ç—É
    application.add_handler(ChatMemberHandler(on_bot_added_to_chat, ChatMemberHandler.MY_CHAT_MEMBER))

    application.add_handler(create_event_handler, group=0)
    application.add_handler(apply_event_handler, group=0)
    application.add_handler(block_user_handler, group=0)
    application.add_handler(add_procedure_type_handler, group=0)
    application.add_handler(edit_procedure_type_handler, group=0)
    application.add_handler(clear_db_handler, group=0)

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    application.add_handler(CallbackQueryHandler(back_to_menu, pattern='^back_to_menu$'))
    application.add_handler(CallbackQueryHandler(noop_callback, pattern='^noop$'))
    application.add_handler(CallbackQueryHandler(close_message_callback, pattern='^close_message$'))
    application.add_handler(CallbackQueryHandler(show_admin_settings, pattern='^admin_settings$'))
    application.add_handler(CallbackQueryHandler(admin_manage_events_button, pattern='^admin_manage_events$'))
    application.add_handler(CallbackQueryHandler(admin_past_events_button, pattern='^past_events$'))
    application.add_handler(CallbackQueryHandler(cancel_event_confirm, pattern='^cancel_event_'))
    application.add_handler(CallbackQueryHandler(confirm_cancel_event, pattern='^confirm_cancel_event_'))
    application.add_handler(CallbackQueryHandler(admin_procedure_types, pattern='^admin_procedure_types$'))
    application.add_handler(CallbackQueryHandler(view_procedure_type, pattern='^pt_view_'))
    application.add_handler(CallbackQueryHandler(toggle_procedure_type_handler, pattern='^pt_toggle_'))
    application.add_handler(CallbackQueryHandler(delete_procedure_type_confirm, pattern='^pt_delete_confirm_'))
    application.add_handler(CallbackQueryHandler(delete_procedure_type_handler, pattern='^pt_delete_'))
    application.add_handler(CallbackQueryHandler(close_admin_dialog_button, pattern='^close_admin_dialog$'))

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    application.add_handler(CallbackQueryHandler(user_my_applications, pattern='^user_my_applications$'))
    application.add_handler(CallbackQueryHandler(user_info, pattern='^user_info$'))
    application.add_handler(CallbackQueryHandler(user_back_to_menu, pattern='^user_back_to_menu$'))
    application.add_handler(CallbackQueryHandler(cancel_user_application, pattern='^cancel_app_'))

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ callback –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞—è–≤–∫–∞–º–∏
    application.add_handler(CallbackQueryHandler(approve_application, pattern='^approve_'))
    application.add_handler(CallbackQueryHandler(reject_application, pattern='^reject_'))
    application.add_handler(CallbackQueryHandler(confirm_reject_primary, pattern='^confirm_reject_primary_'))
    application.add_handler(CallbackQueryHandler(cancel_reject_primary, pattern='^cancel_reject_primary_'))
    application.add_handler(CallbackQueryHandler(set_primary_application, pattern='^primary_'))
    application.add_handler(CallbackQueryHandler(confirm_cancel_primary, pattern='^confirm_cancel_primary_\\d+$'))
    application.add_handler(CallbackQueryHandler(cancel_primary_back, pattern='^cancel_primary_back_\\d+$'))
    application.add_handler(CallbackQueryHandler(cancel_application, pattern='^cancel_'))
    application.add_handler(CallbackQueryHandler(view_event_applications, pattern='^view_apps_'))

    # –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex('^(üìã –ó–∞—Ö–æ–¥–∏|‚öôÔ∏è)$') & ~filters.COMMAND,
        handle_admin_menu_text
    ))

    # –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex('^(üìã –ú–æ—ó –∑–∞—è–≤–∫–∏|‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è)$') & ~filters.COMMAND,
        handle_user_menu_text
    ))

    # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ (–ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤ –≥—Ä—É–ø—É) - –Ω–∏–∂—á–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, forward_candidate_message), group=1)

    # –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(error_handler)

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ (—Ç—ñ–ª—å–∫–∏ /start)
    async def post_init(app: Application) -> None:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó"""
        await app.bot.set_my_commands([
            BotCommand("start", "–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º")
        ])

    application.post_init = post_init

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è graceful shutdown
    def signal_handler(sig, frame):
        logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏. –ó—É–ø–∏–Ω—è—é –±–æ—Ç–∞...")
        application.stop_running()
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    try:
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True  # –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ —Å—Ç–∞—Ä—ñ updates –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
        )
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞")


if __name__ == '__main__':
    main()
