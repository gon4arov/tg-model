import os
import logging
from datetime import datetime
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

from database import Database
from constants import (
    PROCEDURE_TYPES,
    TIME_SLOTS,
    generate_date_options,
    CREATE_EVENT_DATE,
    CREATE_EVENT_TIME,
    CREATE_EVENT_PROCEDURE,
    CREATE_EVENT_PHOTO_NEEDED,
    CREATE_EVENT_COMMENT,
    CREATE_EVENT_CONFIRM,
    APPLY_FULL_NAME,
    APPLY_PHONE,
    APPLY_PHOTOS,
    APPLY_CONSENT,
    APPLY_CONFIRM
)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = Database()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ .env
ADMIN_ID = int(os.getenv('ADMIN_ID', 0))
CHANNEL_ID = os.getenv('CHANNEL_ID', '')
GROUP_ID = os.getenv('GROUP_ID', '')


def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == ADMIN_ID


def format_date(date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    date = datetime.strptime(date_str, '%Y-%m-%d')
    return date.strftime('%d.%m.%Y')


def chunk_list(lst, n):
    """–†–æ–∑–±–∏—Ç—Ç—è —Å–ø–∏—Å–∫—É –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –ø–æ n –µ–ª–µ–º–µ–Ω—Ç—ñ–≤"""
    for i in range(0, len(lst), n):
        yield lst[i:i + n]


# ==================== –ö–û–ú–ê–ù–î–ò ====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user_id = update.effective_user.id
    db.create_user(user_id)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ deep link –¥–ª—è –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏
    if context.args and context.args[0].startswith('event_'):
        event_id = int(context.args[0].split('_')[1])
        context.user_data['apply_event_id'] = event_id
        return await apply_event_start(update, context)

    if is_admin(user_id):
        await update.message.reply_text(
            "üëã –í—ñ—Ç–∞—é, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–µ!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "/create_event - –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑–∞—Ö—ñ–¥\n"
            "/manage_events - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞—Ö–æ–¥–∏\n"
            "/block_user - –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n\n"
            "–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞—è–≤–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–µ –≤ –≥—Ä—É–ø—ñ."
        )
    else:
        await update.message.reply_text(
            "üëã –í—ñ—Ç–∞—î–º–æ!\n\n"
            "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—á–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏.\n\n"
            "–©–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç—å, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞—Ö—ñ–¥ –≤ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ."
        )


async def manage_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–≥–ª—è–¥ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    events = db.get_active_events()

    if not events:
        await update.message.reply_text("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤")
        return

    message = "üìã –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞—Ö–æ–¥–∏:\n\n"
    for event in events:
        message += f"üÜî {event['id']} | {event['procedure_type']}\n"
        message += f"üìÖ {format_date(event['date'])} {event['time']}\n\n"

    await update.message.reply_text(message)


async def block_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    if not context.args:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /block_user <user_id>")
        return

    try:
        user_id_to_block = int(context.args[0])
        db.block_user(user_id_to_block)
        await update.message.reply_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_block} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")


# ==================== –°–¢–í–û–†–ï–ù–ù–Ø –ó–ê–•–û–î–£ (–ê–î–ú–Ü–ù) ====================

async def create_event_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—É"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END

    context.user_data.clear()
    context.user_data['event'] = {}

    date_options = generate_date_options()
    keyboard = [[InlineKeyboardButton(opt['display'], callback_data=f"date_{opt['date']}")]
                for opt in date_options]
    keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])

    await update.message.reply_text(
        "üìÖ –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑–∞—Ö–æ–¥—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CREATE_EVENT_DATE


async def create_event_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏"""
    query = update.callback_query
    await query.answer()

    date = query.data.split('_', 1)[1]
    context.user_data['event']['date'] = date

    await query.edit_message_text("‚úÖ –î–∞—Ç—É –æ–±—Ä–∞–Ω–æ")

    # –ü–æ–∫–∞–∑–∞—Ç–∏ —á–∞—Å–æ–≤—ñ —Å–ª–æ—Ç–∏ –ø–æ 4 –≤ —Ä—è–¥
    keyboard = list(chunk_list(
        [InlineKeyboardButton(time, callback_data=f"time_{time}") for time in TIME_SLOTS],
        4
    ))
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_date")])
    keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])

    await query.message.reply_text(
        "üïê –û–±–µ—Ä—ñ—Ç—å —á–∞—Å –∑–∞—Ö–æ–¥—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CREATE_EVENT_TIME


async def create_event_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —á–∞—Å—É"""
    query = update.callback_query
    await query.answer()

    time = query.data.split('_', 1)[1]
    context.user_data['event']['time'] = time

    await query.edit_message_text("‚úÖ –ß–∞—Å –æ–±—Ä–∞–Ω–æ")

    # –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–∏–ø–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä
    keyboard = [[InlineKeyboardButton(ptype, callback_data=f"proc_{i}")]
                for i, ptype in enumerate(PROCEDURE_TYPES)]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_time")])
    keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])

    await query.message.reply_text(
        "üíâ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CREATE_EVENT_PROCEDURE


async def create_event_procedure(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏"""
    query = update.callback_query
    await query.answer()

    proc_index = int(query.data.split('_')[1])
    context.user_data['event']['procedure'] = PROCEDURE_TYPES[proc_index]

    await query.edit_message_text("‚úÖ –¢–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –æ–±—Ä–∞–Ω–æ")

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="photo_yes"),
            InlineKeyboardButton("‚ùå –ù—ñ", callback_data="photo_no")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_procedure")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]

    await query.message.reply_text(
        "üì∏ –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º –Ω–∞–¥–∞–≤–∞—Ç–∏ —Ñ–æ—Ç–æ –∑–æ–Ω–∏?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CREATE_EVENT_PHOTO_NEEDED


async def create_event_photo_needed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —Ñ–æ—Ç–æ"""
    query = update.callback_query
    await query.answer()

    needs_photo = query.data == "photo_yes"
    context.user_data['event']['needs_photo'] = needs_photo

    photo_text = "–±—É–¥–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤" if needs_photo else "–Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ"
    await query.edit_message_text(f"‚úÖ –§–æ—Ç–æ {photo_text}")

    keyboard = [
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_comment")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_photo")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]

    await query.message.reply_text(
        "üí¨ –î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞—Ö–æ–¥—É (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ).\n\n"
        "–Ø–∫—â–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CREATE_EVENT_COMMENT


async def create_event_comment_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è"""
    context.user_data['event']['comment'] = update.message.text
    await update.message.reply_text("‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ")
    return await show_event_summary(update, context)


async def show_event_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ –∑–∞—Ö–æ–¥—É"""
    event = context.user_data['event']

    photo_required = "–û–±–æ–≤'—è–∑–∫–æ–≤–µ" if event['needs_photo'] else "–ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ"

    summary = (
        f"üìã –ü—ñ–¥—Å—É–º–æ–∫ –∑–∞—Ö–æ–¥—É:\n\n"
        f"üìÖ –î–∞—Ç–∞: {event['date']}\n"
        f"üïê –ß–∞—Å: {event['time']}\n"
        f"üíâ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure']}\n"
        f"üì∏ –§–æ—Ç–æ –≤—ñ–¥ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤: {photo_required}\n"
        f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {event.get('comment', '–í—ñ–¥—Å—É—Ç–Ω—ñ–π')}"
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —ñ –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data="confirm_event")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]

    if update.callback_query:
        await update.callback_query.message.reply_text(
            summary,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            summary,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    return CREATE_EVENT_CONFIRM


async def confirm_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—É"""
    query = update.callback_query
    await query.answer()

    event = context.user_data['event']

    try:
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–∞—Ö—ñ–¥
        event_id = db.create_event(
            date=event['date'],
            time=event['time'],
            procedure_type=event['procedure'],
            needs_photo=event['needs_photo'],
            comment=event.get('comment')
        )

        await query.edit_message_text("‚úÖ –ó–∞—Ö—ñ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")

        # –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤ –∫–∞–Ω–∞–ª
        await publish_event_to_channel(context, event_id)

        await query.message.reply_text("‚úÖ –ó–∞—Ö—ñ–¥ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ!")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—É: {e}")
        await query.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞—Ö–æ–¥—É")

    return ConversationHandler.END


async def publish_event_to_channel(context: ContextTypes.DEFAULT_TYPE, event_id: int):
    """–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –∑–∞—Ö–æ–¥—É –≤ –∫–∞–Ω–∞–ª"""
    event = db.get_event(event_id)

    bot_username = (await context.bot.get_me()).username

    message_text = (
        f"üéØ –ù–æ–≤–∏–π –∑–∞—Ö—ñ–¥!\n\n"
        f"üíâ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']}\n"
        f"üìÖ –î–∞—Ç–∞: {format_date(event['date'])}\n"
        f"üïê –ß–∞—Å: {event['time']}\n"
    )

    if event['comment']:
        message_text += f"\nüí¨ {event['comment']}\n"

    if event['needs_photo']:
        message_text += f"\nüì∏ –ü–æ—Ç—Ä—ñ–±–Ω–µ —Ñ–æ—Ç–æ –∑–æ–Ω–∏!\n"

    message_text += "\nüìù –î–ª—è –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:"

    keyboard = [[InlineKeyboardButton(
        "üìù –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É",
        url=f"https://t.me/{bot_username}?start=event_{event_id}"
    )]]

    message = await context.bot.send_message(
        chat_id=CHANNEL_ID,
        text=message_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    db.update_event_message_id(event_id, message.message_id)
    db.update_event_status(event_id, 'published')


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É"""
    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
    else:
        await update.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")

    context.user_data.clear()
    return ConversationHandler.END


# ==================== –ü–û–î–ê–ß–ê –ó–ê–Ø–í–ö–ò (–ú–û–î–ï–õ–¨) ====================

async def apply_event_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏"""
    event_id = context.user_data.get('apply_event_id')

    if not event_id:
        await update.message.reply_text("‚ùå –ó–∞—Ö—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return ConversationHandler.END

    user_id = update.effective_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
    if db.is_user_blocked(user_id):
        await update.message.reply_text("‚ùå –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç–∏ –∑–∞—è–≤–∫–∏.")
        return ConversationHandler.END

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∑–∞—Ö–æ–¥—É
    event = db.get_event(event_id)
    if not event or event['status'] != 'published':
        await update.message.reply_text("‚ùå –ó–∞—Ö—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –≤–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π")
        return ConversationHandler.END

    context.user_data['application'] = {'event_id': event_id, 'photos': []}

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user = db.get_user(user_id)

    if user and user['full_name'] and user['phone']:
        keyboard = [
            [InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="use_saved_data")],
            [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ñ", callback_data="enter_new_data")],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
        ]

        await update.message.reply_text(
            f"üìã –£ –Ω–∞—Å —î –≤–∞—à—ñ –¥–∞–Ω—ñ:\n\n"
            f"üë§ –ü–Ü–ë: {user['full_name']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n\n"
            f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ü—ñ –¥–∞–Ω—ñ?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return APPLY_FULL_NAME
    else:
        await update.message.reply_text(
            "üë§ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è (–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ):"
        )
        return APPLY_FULL_NAME


async def apply_use_saved_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
    query = update.callback_query
    await query.answer()

    user = db.get_user(update.effective_user.id)
    context.user_data['application']['full_name'] = user['full_name']
    context.user_data['application']['phone'] = user['phone']

    await query.edit_message_text("‚úÖ –î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")

    event = db.get_event(context.user_data['application']['event_id'])

    if event['needs_photo']:
        keyboard = [[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]]
        await query.message.reply_text(
            "üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∑–æ–Ω–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ (–¥–æ 3 —Ñ–æ—Ç–æ).\n\n"
            "–ü—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–æ—Ç–æ –≤–≤–µ–¥—ñ—Ç—å /done",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return APPLY_PHOTOS
    else:
        return await show_consent(query.message, context)


async def apply_enter_new_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ñ –¥–∞–Ω—ñ"""
    query = update.callback_query
    await query.answer()

    await query.edit_message_text("üìù –í–≤–µ–¥–µ–º–æ –Ω–æ–≤—ñ –¥–∞–Ω—ñ")
    await query.message.reply_text("üë§ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è (–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ):")
    return APPLY_FULL_NAME


async def apply_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ü–Ü–ë"""
    context.user_data['application']['full_name'] = update.message.text
    await update.message.reply_text("‚úÖ –ü–Ü–ë –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
    await update.message.reply_text("üì± –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return APPLY_PHONE


async def apply_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    phone = update.message.text

    # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É
    if len(phone.replace('+', '').replace(' ', '').replace('-', '').replace('(', '').replace(')', '')) < 10:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        return APPLY_PHONE

    context.user_data['application']['phone'] = phone
    await update.message.reply_text("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ")

    # –ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.update_user(
        update.effective_user.id,
        context.user_data['application']['full_name'],
        phone
    )

    event = db.get_event(context.user_data['application']['event_id'])

    if event['needs_photo']:
        await update.message.reply_text(
            "üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∑–æ–Ω–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ (–¥–æ 3 —Ñ–æ—Ç–æ).\n\n"
            "–ü—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–æ—Ç–æ –≤–≤–µ–¥—ñ—Ç—å /done"
        )
        return APPLY_PHOTOS
    else:
        return await show_consent(update.message, context)


async def apply_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ –≤—ñ–¥ –º–æ–¥–µ–ª—ñ"""
    photos = context.user_data['application'].get('photos', [])

    if len(photos) >= 3:
        await update.message.reply_text("‚ö†Ô∏è –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ 3 —Ñ–æ—Ç–æ")
        return APPLY_PHOTOS

    file_id = update.message.photo[-1].file_id
    photos.append(file_id)
    context.user_data['application']['photos'] = photos

    await update.message.reply_text(
        f"‚úÖ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ ({len(photos)}/3)\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ —Ñ–æ—Ç–æ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è"
    )

    return APPLY_PHOTOS


async def apply_photos_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ"""
    event = db.get_event(context.user_data['application']['event_id'])
    photos = context.user_data['application'].get('photos', [])

    if event['needs_photo'] and len(photos) == 0:
        await update.message.reply_text("‚ùå –î–ª—è —Ü—å–æ–≥–æ –∑–∞—Ö–æ–¥—É —Ñ–æ—Ç–æ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º. –î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω–µ —Ñ–æ—Ç–æ.")
        return APPLY_PHOTOS

    return await show_consent(update.message, context)


async def show_consent(message, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–≥–æ–¥—É"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é", callback_data="consent_yes")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]

    await message.reply_text(
        "‚ö†Ô∏è –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:\n\n"
        "–Ø –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é, —â–æ:\n"
        "‚úì –ú–µ–Ω—ñ –≤–∏–ø–æ–≤–Ω–∏–ª–æ—Å—è 18 —Ä–æ–∫—ñ–≤\n"
        "‚úì –Ø —É—Å–≤—ñ–¥–æ–º–ª—é—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä–∏\n"
        "‚úì –Ø —É—Å–≤—ñ–¥–æ–º–ª—é—é –º–æ–∂–ª–∏–≤—ñ –Ω–∞—Å–ª—ñ–¥–∫–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return APPLY_CONSENT


async def apply_consent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∑–≥–æ–¥–∏"""
    query = update.callback_query
    await query.answer()

    await query.edit_message_text("‚úÖ –ó–≥–æ–¥—É –Ω–∞–¥–∞–Ω–æ")

    return await show_application_summary(query.message, context)


async def show_application_summary(message, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ –∑–∞—è–≤–∫–∏"""
    app = context.user_data['application']
    event = db.get_event(app['event_id'])

    summary = (
        f"üìã –ü—ñ–¥—Å—É–º–æ–∫ –∑–∞—è–≤–∫–∏:\n\n"
        f"üíâ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']}\n"
        f"üìÖ –î–∞—Ç–∞: {format_date(event['date'])}\n"
        f"üïê –ß–∞—Å: {event['time']}\n\n"
        f"üë§ –ü–Ü–ë: {app['full_name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {app['phone']}\n"
        f"üì∏ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ: {len(app.get('photos', []))}\n"
        f"‚úÖ –ó–≥–æ–¥—É –Ω–∞–¥–∞–Ω–æ: –¢–∞–∫"
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É", callback_data="submit_application")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]

    await message.reply_text(
        summary,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return APPLY_CONFIRM


async def submit_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É"""
    query = update.callback_query
    await query.answer()

    app = context.user_data['application']

    try:
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–∞—è–≤–∫—É
        application_id = db.create_application(
            event_id=app['event_id'],
            user_id=update.effective_user.id,
            full_name=app['full_name'],
            phone=app['phone']
        )

        # –ó–±–µ—Ä–µ–≥—Ç–∏ —Ñ–æ—Ç–æ
        for file_id in app.get('photos', []):
            db.add_application_photo(application_id, file_id)

        await query.edit_message_text(
            "‚úÖ –í–∞—à—É –∑–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–Ω–æ!\n\n"
            "–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )

        # –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤ –≥—Ä—É–ø—É
        await publish_application_to_group(context, application_id)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏: {e}")
        await query.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏")

    context.user_data.clear()
    return ConversationHandler.END


async def publish_application_to_group(context: ContextTypes.DEFAULT_TYPE, application_id: int):
    """–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø—É"""
    app = db.get_application(application_id)
    event = db.get_event(app['event_id'])
    photos = db.get_application_photos(application_id)

    message_text = (
        f"üì® –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{application_id}\n\n"
        f"#–∑–∞—Ö—ñ–¥_{event['id']} #–∫–∞–Ω–¥–∏–¥–∞—Ç_{app['user_id']}\n\n"
        f"üíâ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']}\n"
        f"üìÖ –î–∞—Ç–∞: {format_date(event['date'])} {event['time']}\n\n"
        f"üë§ –ü–Ü–ë: {app['full_name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {app['phone']}"
    )

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"approve_{application_id}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{application_id}")
        ]
    ]

    if photos:
        if len(photos) == 1:
            message = await context.bot.send_photo(
                chat_id=GROUP_ID,
                photo=photos[0],
                caption=message_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            media = [InputMediaPhoto(media=photo_id, caption=message_text if i == 0 else '')
                    for i, photo_id in enumerate(photos)]
            messages = await context.bot.send_media_group(chat_id=GROUP_ID, media=media)
            message = messages[0]
            await context.bot.send_message(
                chat_id=GROUP_ID,
                text=f"üì® –ó–∞—è–≤–∫–∞ ‚Ññ{application_id}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    else:
        message = await context.bot.send_message(
            chat_id=GROUP_ID,
            text=message_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    db.update_application_group_message_id(application_id, message.message_id)


# ==================== –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ó–ê–Ø–í–ö–ê–ú–ò ====================

async def approve_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞—è–≤–∫—É"""
    query = update.callback_query

    if not is_admin(query.from_user.id):
        await query.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    await query.answer()

    application_id = int(query.data.split('_')[1])
    app = db.get_application(application_id)

    db.update_application_status(application_id, 'approved')

    keyboard = [
        [
            InlineKeyboardButton("‚≠ê –û–±—Ä–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–º", callback_data=f"primary_{application_id}"),
            InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞—Ö—ñ–¥", callback_data=f"view_apps_{app['event_id']}")
        ]
    ]

    await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))

    # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        await context.bot.send_message(
            chat_id=app['user_id'],
            text="‚úÖ –í–∞—à—É –∑–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ!\n\n–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é."
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}")


async def reject_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É"""
    query = update.callback_query

    if not is_admin(query.from_user.id):
        await query.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    await query.answer()

    application_id = int(query.data.split('_')[1])
    app = db.get_application(application_id)

    db.update_application_status(application_id, 'rejected')

    await query.edit_message_reply_markup(reply_markup=None)

    # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        await context.bot.send_message(
            chat_id=app['user_id'],
            text="‚ùå –ù–∞ –∂–∞–ª—å, –≤–∞—à—É –∑–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ."
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}")


async def set_primary_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É —è–∫ –æ—Å–Ω–æ–≤–Ω—É"""
    query = update.callback_query

    if not is_admin(query.from_user.id):
        await query.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    await query.answer("‚≠ê –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–∏–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º")

    application_id = int(query.data.split('_')[1])
    app = db.get_application(application_id)
    event = db.get_event(app['event_id'])

    db.set_primary_application(application_id)

    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é
    instruction = (
        f"‚≠ê –í—ñ—Ç–∞—î–º–æ! –í–∏ –æ–±—Ä–∞–Ω—ñ –æ—Å–Ω–æ–≤–Ω–∏–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º!\n\n"
        f"üíâ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']}\n"
        f"üìÖ –î–∞—Ç–∞: {format_date(event['date'])}\n"
        f"üïê –ß–∞—Å: {event['time']}\n\n"
        f"üìç –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:\n"
        f"‚Ä¢ –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–∏–π–¥—ñ—Ç—å –∑–∞ 10 —Ö–≤–∏–ª–∏–Ω –¥–æ –ø–æ—á–∞—Ç–∫—É\n"
        f"‚Ä¢ –ú–∞–π—Ç–µ –ø—Ä–∏ —Å–æ–±—ñ –¥–æ–∫—É–º–µ–Ω—Ç, —â–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –æ—Å–æ–±—É\n"
        f"‚Ä¢ –£ —Ä–∞–∑—ñ –Ω–µ–º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø—Ä–∏–π—Ç–∏, –ø–æ–≤—ñ–¥–æ–º—Ç–µ –Ω–∞—Å –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å\n\n"
        f"–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ! üòä"
    )

    try:
        await context.bot.send_message(chat_id=app['user_id'], text=instruction)
        await query.message.reply_text("‚úÖ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—É")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó: {e}")
        await query.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é")


async def view_event_applications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞—Ö—ñ–¥"""
    query = update.callback_query

    if not is_admin(query.from_user.id):
        await query.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    event_id = int(query.data.split('_')[2])
    applications = db.get_approved_applications(event_id)

    if not applications:
        await query.answer("–ù–µ–º–∞—î –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫", show_alert=True)
        return

    await query.answer()

    message = "üìã –ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞—Ö—ñ–¥:\n\n"

    for i, app in enumerate(applications):
        status = "‚≠ê –û—Å–Ω–æ–≤–Ω–∏–π" if app['is_primary'] else f"{i + 1}."
        message += f"{status} {app['full_name']} - {app['phone']}\n"

    await query.message.reply_text(message)


# ==================== MAIN ====================

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    token = os.getenv('BOT_TOKEN')
    if not token:
        logger.error("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ!")
        return

    application = Application.builder().token(token).build()

    # –û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—É
    create_event_handler = ConversationHandler(
        entry_points=[CommandHandler('create_event', create_event_start)],
        states={
            CREATE_EVENT_DATE: [
                CallbackQueryHandler(create_event_date, pattern='^date_'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            CREATE_EVENT_TIME: [
                CallbackQueryHandler(create_event_time, pattern='^time_'),
                CallbackQueryHandler(create_event_start, pattern='^back_to_date$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            CREATE_EVENT_PROCEDURE: [
                CallbackQueryHandler(create_event_procedure, pattern='^proc_'),
                CallbackQueryHandler(create_event_date, pattern='^back_to_time$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            CREATE_EVENT_PHOTO_NEEDED: [
                CallbackQueryHandler(create_event_photo_needed, pattern='^photo_'),
                CallbackQueryHandler(create_event_procedure, pattern='^back_to_procedure$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            CREATE_EVENT_COMMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, create_event_comment_text),
                CallbackQueryHandler(show_event_summary, pattern='^skip_comment$'),
                CallbackQueryHandler(create_event_photo_needed, pattern='^back_to_photo$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            CREATE_EVENT_CONFIRM: [
                CallbackQueryHandler(confirm_event, pattern='^confirm_event$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ]
        },
        fallbacks=[CallbackQueryHandler(cancel, pattern='^cancel$')]
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏
    apply_event_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            APPLY_FULL_NAME: [
                CallbackQueryHandler(apply_use_saved_data, pattern='^use_saved_data$'),
                CallbackQueryHandler(apply_enter_new_data, pattern='^enter_new_data$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, apply_full_name),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            APPLY_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, apply_phone),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            APPLY_PHOTOS: [
                MessageHandler(filters.PHOTO, apply_photo),
                CommandHandler('done', apply_photos_done),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            APPLY_CONSENT: [
                CallbackQueryHandler(apply_consent, pattern='^consent_yes$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            APPLY_CONFIRM: [
                CallbackQueryHandler(submit_application, pattern='^submit_application$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ]
        },
        fallbacks=[CallbackQueryHandler(cancel, pattern='^cancel$')]
    )

    # –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(create_event_handler)
    application.add_handler(apply_event_handler)
    application.add_handler(CommandHandler('manage_events', manage_events))
    application.add_handler(CommandHandler('block_user', block_user_command))

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ callback –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞—è–≤–∫–∞–º–∏
    application.add_handler(CallbackQueryHandler(approve_application, pattern='^approve_'))
    application.add_handler(CallbackQueryHandler(reject_application, pattern='^reject_'))
    application.add_handler(CallbackQueryHandler(set_primary_application, pattern='^primary_'))
    application.add_handler(CallbackQueryHandler(view_event_applications, pattern='^view_apps_'))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
