import os
import re
import logging
import signal
import sys
import asyncio
from datetime import datetime
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
    PicklePersistence
)
from telegram.request import HTTPXRequest
from telegram.error import Forbidden, BadRequest, TimedOut, NetworkError

from database import Database
from constants import (
    TIME_SLOTS,
    generate_date_options,
    CREATE_EVENT_DATE,
    CREATE_EVENT_TIME,
    CREATE_EVENT_PROCEDURE,
    CREATE_EVENT_PHOTO_NEEDED,
    CREATE_EVENT_COMMENT,
    CREATE_EVENT_CONFIRM,
    APPLY_FULL_NAME,
    APPLY_PHONE,
    APPLY_PHOTOS,
    APPLY_CONFIRM,
    BLOCK_USER_ID,
    ADD_PROCEDURE_TYPE_NAME,
    EDIT_PROCEDURE_TYPE_NAME
)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = Database()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ .env
ADMIN_ID = int(os.getenv('ADMIN_ID', 0))
CHANNEL_ID = os.getenv('CHANNEL_ID', '')
GROUP_ID = os.getenv('GROUP_ID', '')
CHANNEL_LINK = os.getenv('CHANNEL_LINK', '')


def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == ADMIN_ID


def format_date(date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    date = datetime.strptime(date_str, '%Y-%m-%d')
    return date.strftime('%d.%m.%Y')


def chunk_list(lst, n):
    """–†–æ–∑–±–∏—Ç—Ç—è —Å–ø–∏—Å–∫—É –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –ø–æ n –µ–ª–µ–º–µ–Ω—Ç—ñ–≤"""
    for i in range(0, len(lst), n):
        yield lst[i:i + n]


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    logger.error(f"Exception while handling an update:", exc_info=context.error)

    # –û–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
    if isinstance(context.error, Forbidden):
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞
        if update and hasattr(update, 'effective_user') and update.effective_user:
            user_id = update.effective_user.id
            db.block_user(user_id)
            logger.info(f"User {user_id} blocked the bot - marked as blocked in DB")

    elif isinstance(context.error, BadRequest):
        logger.warning(f"Bad request: {context.error}")

    elif isinstance(context.error, TimedOut):
        logger.warning(f"Request timed out: {context.error}")

    elif isinstance(context.error, NetworkError):
        logger.warning(f"Network error: {context.error}")

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
    try:
        if update and hasattr(update, 'effective_message') and update.effective_message:
            await update.effective_message.reply_text(
                "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
    except Exception as e:
        logger.error(f"Could not send error message to user: {e}")


# ==================== –ö–û–ú–ê–ù–î–ò ====================

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, edit_message: bool = False):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = [
        [InlineKeyboardButton("üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑–∞—Ö—ñ–¥", callback_data="admin_create_event")],
        [InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞—Ö–æ–¥–∏", callback_data="admin_manage_events")],
        [InlineKeyboardButton("üíâ –¢–∏–ø–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä", callback_data="admin_procedure_types")],
        [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="admin_block_user")],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –ë–î", callback_data="admin_clear_db")]
    ]

    if edit_message and update.callback_query:
        # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await update.callback_query.edit_message_text(
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –º–µ–Ω—é, —è–∫—â–æ –≤–æ–Ω–æ —î
        if 'last_admin_menu_id' in context.user_data:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data['last_admin_menu_id']
                )
            except Exception as e:
                logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –º–µ–Ω—é: {e}")

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message = update.callback_query.message if update.callback_query else update.message
        sent_message = await message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        # –ó–±–µ—Ä–µ–≥—Ç–∏ ID –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
        context.user_data['last_admin_menu_id'] = sent_message.message_id


async def show_user_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, edit_message: bool = False):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    keyboard = [
        [
            InlineKeyboardButton("üìã –ú–æ—ó –∑–∞—è–≤–∫–∏", callback_data="user_my_applications"),
            InlineKeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data="user_info")
        ]
    ]

    text = (
        "–í—ñ—Ç–∞—î–º–æ!\n\n"
        "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—á–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏.\n\n"
        "–©–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç—å, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞—Ö—ñ–¥ –≤ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ."
    )

    if edit_message and update.callback_query:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        message = update.callback_query.message if update.callback_query else update.message
        await message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user_id = update.effective_user.id
    db.create_user(user_id)

    logger.info(f"start() –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è user_id={user_id}, args={context.args}")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
    user = db.get_user(user_id)
    if user and user.get('is_blocked'):
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return ConversationHandler.END

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ deep link –¥–ª—è –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏
    if context.args and len(context.args) > 0 and context.args[0].startswith('event_'):
        logger.info(f"Deep link –≤–∏—è–≤–ª–µ–Ω–æ: {context.args[0]}")
        try:
            # –ü–∞—Ä—Å–∏–º–æ event_id (—Ñ–æ—Ä–º–∞—Ç: event_123 –∞–±–æ event_123_timestamp)
            parts = context.args[0].split('_')
            event_id = int(parts[1])
            logger.info(f"Event ID: {event_id}")
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —ñ—Å–Ω—É—î –∑–∞—Ö—ñ–¥
            event = db.get_event(event_id)
            if not event:
                logger.warning(f"–ó–∞—Ö—ñ–¥ {event_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                await update.message.reply_text("–ó–∞—Ö—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                return
            if event['status'] != 'published':
                logger.warning(f"–ó–∞—Ö—ñ–¥ {event_id} –Ω–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π, —Å—Ç–∞—Ç—É—Å: {event['status']}")
                await update.message.reply_text("–¶–µ–π –∑–∞—Ö—ñ–¥ –±—ñ–ª—å—à–µ –Ω–µ –ø—Ä–∏–π–º–∞—î –∑–∞—è–≤–∫–∏.")
                return
            context.user_data['apply_event_id'] = event_id
            logger.info(f"–í–∏–∫–ª–∏–∫–∞—é apply_event_start –¥–ª—è event_id={event_id}")
            return await apply_event_start(update, context)
        except (ValueError, IndexError) as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É event_id: {e}")
            await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞—Ö—ñ–¥.")
            return

    if is_admin(user_id):
        await show_admin_menu(update, context)
    else:
        await show_user_menu(update, context)


async def admin_create_event_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—Ö—ñ–¥'"""
    query = update.callback_query

    if not is_admin(query.from_user.id):
        await query.answer()
        await query.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END

    await query.answer()

    # –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ–∑–∞–∫—ñ–Ω—á–µ–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—É, —è–∫—â–æ –≤–æ–Ω–æ —î
    if 'last_event_form_message' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=context.user_data['last_event_form_message']
            )
        except Exception as e:
            logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–æ—Ä–º—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—É: {e}")

    # –í–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–µ–Ω—é –æ–¥—Ä–∞–∑—É (–∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–æ–∫)
    try:
        await query.edit_message_text("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞—Ö–æ–¥—É...")
    except:
        pass

    # –ó–±–µ—Ä–µ–≥—Ç–∏ ID –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é –ø–µ—Ä–µ–¥ –æ—á–∏—â–µ–Ω–Ω—è–º
    prev_menu_id = context.user_data.get('last_admin_menu_id')

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –ª–æ–≥—ñ–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—É
    context.user_data.clear()
    context.user_data['event'] = {}
    context.user_data['menu_to_delete'] = prev_menu_id  # –ó–±–µ—Ä–µ–≥—Ç–∏ ID –º–µ–Ω—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è

    date_options = generate_date_options()
    # –ì—Ä—É–ø—É—î–º–æ –¥–∞—Ç–∏ –ø–æ 4 –≤ —Ä—è–¥–æ–∫ (4 —Å—Ç–æ–≤–ø—á–∏–∫–∏)
    date_buttons = [InlineKeyboardButton(opt['display'], callback_data=f"date_{opt['date']}")
                    for opt in date_options]
    keyboard = list(chunk_list(date_buttons, 4))
    keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])

    sent_msg = await query.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑–∞—Ö–æ–¥—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data['last_event_form_message'] = sent_msg.message_id

    return CREATE_EVENT_DATE


async def admin_manage_events_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞—Ö–æ–¥–∏'"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    events = db.get_active_events()

    if not events:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        await query.edit_message_text(
            "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    keyboard = []

    for event in events:
        # –®–∏—Ä–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ –∑ –Ω–∞–∑–≤–æ—é –∑–∞—Ö–æ–¥—É (–±–µ–∑ –¥—ñ—ó)
        keyboard.append([
            InlineKeyboardButton(
                f"üìÖ {event['procedure_type']} - {format_date(event['date'])} –æ {event['time']}",
                callback_data="noop"
            )
        ])

        # –î–≤—ñ –∫–Ω–æ–ø–∫–∏ –ø–æ 50% —à–∏—Ä–∏–Ω–∏
        keyboard.append([
            InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏", callback_data=f"view_apps_{event['id']}"),
            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_event_{event['id']}")
        ])

    keyboard.append([InlineKeyboardButton("üìö –ú–∏–Ω—É–ª—ñ –∑–∞—Ö–æ–¥–∏", callback_data="past_events")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
    await query.edit_message_text("–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞—Ö–æ–¥–∏:", reply_markup=InlineKeyboardMarkup(keyboard))


async def admin_past_events_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ú–∏–Ω—É–ª—ñ –∑–∞—Ö–æ–¥–∏'"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    events = db.get_past_events()

    if not events:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_events")]]
        await query.edit_message_text(
            "–ù–µ–º–∞—î –º–∏–Ω—É–ª–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    keyboard = []

    for event in events:
        # –®–∏—Ä–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ –∑ –Ω–∞–∑–≤–æ—é –∑–∞—Ö–æ–¥—É (–±–µ–∑ –¥—ñ—ó)
        keyboard.append([
            InlineKeyboardButton(
                f"üìÖ {event['procedure_type']} - {format_date(event['date'])} –æ {event['time']}",
                callback_data="noop"
            )
        ])

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞—è–≤–æ–∫
        keyboard.append([
            InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏", callback_data=f"view_apps_{event['id']}")
        ])

    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_events")])
    await query.edit_message_text("–ú–∏–Ω—É–ª—ñ –∑–∞—Ö–æ–¥–∏:", reply_markup=InlineKeyboardMarkup(keyboard))


async def admin_block_user_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_block")]]
    await query.edit_message_text(
        "–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return BLOCK_USER_ID


async def block_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è"""
    try:
        user_id_to_block = int(update.message.text)
        db.block_user(user_id_to_block)

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        await update.message.reply_text(
            f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_block} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except ValueError:
        keyboard = [[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_block")]]
        await update.message.reply_text(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return BLOCK_USER_ID

    return ConversationHandler.END


async def cancel_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    query = update.callback_query
    await query.answer()

    await show_admin_menu(update, context, edit_message=True)

    return ConversationHandler.END


# ==================== –û–ß–ò–°–¢–ö–ê –ë–î ====================

async def admin_clear_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—á–∏—Å—Ç–∫–∏ –ë–î"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫, –æ—á–∏—Å—Ç–∏—Ç–∏", callback_data="clear_db_confirm"),
            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="back_to_menu")
        ]
    ]

    await query.edit_message_text(
        "‚ö†Ô∏è –£–í–ê–ì–ê!\n\n"
        "–í–∏ –∑–±–∏—Ä–∞—î—Ç–µ—Å—è –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—Å—Ç–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö.\n\n"
        "–ë—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ:\n"
        "‚Ä¢ –í—Å—ñ –∑–∞—Ö–æ–¥–∏\n"
        "‚Ä¢ –í—Å—ñ –∑–∞—è–≤–∫–∏\n"
        "‚Ä¢ –í—Å—ñ —Ñ–æ—Ç–æ\n"
        "‚Ä¢ –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ\n"
        "‚Ä¢ –í—Å—ñ —Ç–∏–ø–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä (–æ–∫—Ä—ñ–º –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö)\n\n"
        "‚ùóÔ∏è –¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞!\n\n"
        "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def clear_db_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—á–∏—Å—Ç–∫–∏ –ë–î"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    try:
        await query.edit_message_text("‚è≥ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        db.clear_all_data()
        await asyncio.sleep(1)
        await query.edit_message_text("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")
        await asyncio.sleep(2)
        await show_admin_menu(update, context, edit_message=True)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç—Ü—ñ –ë–î: {e}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.\n"
            "–î–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥."
        )
        await asyncio.sleep(2)
        await show_admin_menu(update, context, edit_message=True)


# ==================== –¢–ò–ü–ò –ü–†–û–¶–ï–î–£–† ====================

async def admin_procedure_types(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫—É —Ç–∏–ø—ñ–≤ –ø—Ä–æ—Ü–µ–¥—É—Ä"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    types = db.get_all_procedure_types()

    if not types:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        await query.edit_message_text(
            "–ù–µ–º–∞—î —Ç–∏–ø—ñ–≤ –ø—Ä–æ—Ü–µ–¥—É—Ä",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    keyboard = []

    for proc_type in types:
        status = "‚úÖ" if proc_type['is_active'] else "‚ùå"
        keyboard.append([
            InlineKeyboardButton(
                f"{status} {proc_type['name']}",
                callback_data=f"pt_view_{proc_type['id']}"
            )
        ])

    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–∏–ø", callback_data="pt_add")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])

    await query.edit_message_text(
        "üíâ –¢–∏–ø–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä:\n\n"
        "‚úÖ - –∞–∫—Ç–∏–≤–Ω–∏–π\n"
        "‚ùå - –≤–∏–º–∫–Ω–µ–Ω–∏–π\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —Ç–∏–ø –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def view_procedure_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–≥–ª—è–¥ —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    type_id = int(query.data.split('_')[2])
    proc_type = db.get_procedure_type(type_id)

    if not proc_type:
        await query.edit_message_text("–¢–∏–ø –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    status_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if proc_type['is_active'] else "‚ùå –í–∏–º–∫–Ω–µ–Ω–∏–π"
    toggle_text = "‚ùå –í–∏–º–∫–Ω—É—Ç–∏" if proc_type['is_active'] else "‚úÖ –£–≤—ñ–º–∫–Ω—É—Ç–∏"

    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É", callback_data=f"pt_edit_{type_id}")],
        [InlineKeyboardButton(toggle_text, callback_data=f"pt_toggle_{type_id}")],
        [InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"pt_delete_{type_id}")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_procedure_types")]
    ]

    await query.edit_message_text(
        f"üíâ –¢–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏:\n\n"
        f"<b>–ù–∞–∑–≤–∞:</b> {proc_type['name']}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        f"<b>–°—Ç–≤–æ—Ä–µ–Ω–æ:</b> {proc_type['created_at']}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )


async def toggle_procedure_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∏–º–∫–Ω—É—Ç–∏/—É–≤—ñ–º–∫–Ω—É—Ç–∏ —Ç–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    type_id = int(query.data.split('_')[2])
    db.toggle_procedure_type(type_id)

    # –û–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    await view_procedure_type(update, context)


async def delete_procedure_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    type_id = int(query.data.split('_')[2])
    proc_type = db.get_procedure_type(type_id)

    if not proc_type:
        await query.edit_message_text("–¢–∏–ø –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"pt_delete_confirm_{type_id}"),
            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"pt_view_{type_id}")
        ]
    ]

    await query.edit_message_text(
        f"‚ö†Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ '{proc_type['name']}'?\n\n"
        f"–Ø–∫—â–æ —Ü–µ–π —Ç–∏–ø –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –∑–∞—Ö–æ–¥–∞—Ö, –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±—É–¥–µ –Ω–µ–º–æ–∂–ª–∏–≤–∏–º.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def delete_procedure_type_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–ø—É"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    type_id = int(query.data.split('_')[3])
    proc_type = db.get_procedure_type(type_id)

    if not proc_type:
        await query.edit_message_text("‚ùå –¢–∏–ø –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    success = db.delete_procedure_type(type_id)

    if success:
        await query.edit_message_text("‚úÖ –¢–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–æ")
        await asyncio.sleep(1)
        # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å–ø–∏—Å–∫—É —Ç–∏–ø—ñ–≤
        context.user_data['temp_update'] = update
        await admin_procedure_types(update, context)
    else:
        status_icon = "‚úÖ" if proc_type['is_active'] else "‚ùå"
        keyboard = [
            [InlineKeyboardButton(f"{status_icon} –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏/–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏", callback_data=f"pt_toggle_{type_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data="admin_procedure_types")]
        ]

        await query.edit_message_text(
            f"‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ '{proc_type['name']}'.\n\n"
            f"–¶–µ–π —Ç–∏–ø –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –∑–∞—Ö–æ–¥–∞—Ö. "
            f"–í–∏ –º–æ–∂–µ—Ç–µ –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –π–æ–≥–æ –∑–∞–º—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–Ω—è.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


# ConversationHandler –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
async def add_procedure_type_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="pt_cancel")]]

    await query.edit_message_text(
        "‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return ADD_PROCEDURE_TYPE_NAME


async def add_procedure_type_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–∑–≤–∏ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø—É"""
    from constants import ADD_PROCEDURE_TYPE_NAME

    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END

    name = update.message.text.strip()

    if not name or len(name) > 100:
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤.\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return ADD_PROCEDURE_TYPE_NAME

    try:
        type_id = db.create_procedure_type(name)
        await update.message.reply_text(f"‚úÖ –¢–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ '{name}' –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")

        # –ü–æ–∫–∞–∑–∞—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é
        await show_admin_menu(update, context, edit_message=False)

        return ConversationHandler.END
    except Exception as e:
        if "UNIQUE constraint failed" in str(e):
            await update.message.reply_text(
                "‚ùå –¢–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î.\n\n"
                "–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É:"
            )
            return ADD_PROCEDURE_TYPE_NAME
        else:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–∏–ø—É")
            return ConversationHandler.END


async def cancel_procedure_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É"""
    query = update.callback_query
    await query.answer()

    await show_admin_menu(update, context, edit_message=True)
    return ConversationHandler.END


# ConversationHandler –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
async def edit_procedure_type_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END

    type_id = int(query.data.split('_')[2])
    proc_type = db.get_procedure_type(type_id)

    if not proc_type:
        await query.edit_message_text("–¢–∏–ø –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return ConversationHandler.END

    context.user_data['edit_type_id'] = type_id

    keyboard = [[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="pt_cancel")]]

    await query.edit_message_text(
        f"‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏\n\n"
        f"–ü–æ—Ç–æ—á–Ω–∞ –Ω–∞–∑–≤–∞: {proc_type['name']}\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return EDIT_PROCEDURE_TYPE_NAME


async def edit_procedure_type_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ—ó –Ω–∞–∑–≤–∏ —Ç–∏–ø—É"""
    from constants import EDIT_PROCEDURE_TYPE_NAME

    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END

    name = update.message.text.strip()
    type_id = context.user_data.get('edit_type_id')

    if not type_id:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–∏–ø –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return ConversationHandler.END

    if not name or len(name) > 100:
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤.\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return EDIT_PROCEDURE_TYPE_NAME

    try:
        db.update_procedure_type(type_id, name)
        await update.message.reply_text(f"‚úÖ –ù–∞–∑–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{name}'")

        # –ü–æ–∫–∞–∑–∞—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é
        await show_admin_menu(update, context, edit_message=False)

        return ConversationHandler.END
    except Exception as e:
        if "UNIQUE constraint failed" in str(e):
            await update.message.reply_text(
                "‚ùå –¢–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î.\n\n"
                "–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É:"
            )
            return EDIT_PROCEDURE_TYPE_NAME
        else:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ —Ç–∏–ø—É")
            return ConversationHandler.END


async def cancel_event_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞—Ö–æ–¥—É"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    event_id = int(query.data.split('_')[2])
    event = db.get_event(event_id)

    if not event:
        await query.edit_message_text("–ó–∞—Ö—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"confirm_cancel_event_{event_id}"),
            InlineKeyboardButton("‚ùå –ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏", callback_data="admin_manage_events")
        ]
    ]

    await query.edit_message_text(
        f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—Ö—ñ–¥?\n\n"
        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']}\n"
        f"–î–∞—Ç–∞: {format_date(event['date'])} –æ {event['time']}\n\n"
        f"–í—Å—ñ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ü–µ–π –∑–∞—Ö—ñ–¥ –±—É–¥—É—Ç—å —Ç–∞–∫–æ–∂ —Å–∫–∞—Å–æ–≤–∞–Ω—ñ.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def confirm_cancel_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞—Ö–æ–¥—É –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    event_id = int(query.data.split('_')[3])
    event = db.get_event(event_id)

    if not event:
        await query.edit_message_text("–ó–∞—Ö—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—Ö–æ–¥—É –Ω–∞ 'cancelled'
    db.update_event_status(event_id, 'cancelled')

    # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    applications = db.get_applications_by_event(event_id)
    for app in applications:
        try:
            await context.bot.send_message(
                chat_id=app['user_id'],
                text=f"–ó–∞—Ö—ñ–¥ '{event['procedure_type']}' {format_date(event['date'])} –æ {event['time']} —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n\n"
                     f"–í–∏–±–∞—á—Ç–µ –∑–∞ –Ω–µ–∑—Ä—É—á–Ω–æ—Å—Ç—ñ."
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {app['user_id']}: {e}")

    # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É, —è–∫—â–æ —î message_id
    if event.get('message_id'):
        try:
            await context.bot.delete_message(
                chat_id=CHANNEL_ID,
                message_id=event['message_id']
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É: {e}")

    await query.edit_message_text(
        f"–ó–∞—Ö—ñ–¥ '{event['procedure_type']}' {format_date(event['date'])} –æ {event['time']} —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n\n"
        f"–í—Å—ñ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
    )

    # –ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    await show_admin_menu(update, context, edit_message=False)


async def user_my_applications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞—è–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞—è–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    applications = db.get_user_applications(user_id)

    if not applications:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="user_back_to_menu")]]
        await query.edit_message_text(
            "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞—è–≤–æ–∫.\n\n"
            "–©–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞—Ö—ñ–¥ –≤ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    message = "–í–∞—à—ñ –∑–∞—è–≤–∫–∏:\n\n"
    keyboard = []

    for app in applications:
        status_emoji = {
            'pending': '‚è≥',
            'approved': '‚úÖ',
            'rejected': '‚ùå',
            'cancelled': 'üö´'
        }.get(app['status'], '‚ùì')

        status_text = {
            'pending': '–û—á—ñ–∫—É—î —Ä–æ–∑–≥–ª—è–¥—É',
            'approved': '–°—Ö–≤–∞–ª–µ–Ω–æ',
            'rejected': '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ',
            'cancelled': '–°–∫–∞—Å–æ–≤–∞–Ω–æ'
        }.get(app['status'], '–ù–µ–≤—ñ–¥–æ–º–æ')

        event_status = " (–ó–∞—Ö—ñ–¥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ)" if app['event_status'] == 'cancelled' else ""

        message += f"{status_emoji} {app['procedure_type']}\n"
        message += f"üìÖ {format_date(app['date'])} –æ {app['time']}\n"
        message += f"–°—Ç–∞—Ç—É—Å: {status_text}{event_status}\n"

        # –Ø–∫—â–æ –∑–∞—è–≤–∫–∞ —Å—Ö–≤–∞–ª–µ–Ω–∞ —ñ —î –æ—Å–Ω–æ–≤–Ω–æ—é - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ
        if app['status'] == 'approved' and app.get('is_primary'):
            message += "‚≠ê –û—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç\n"

        message += "\n"

        # –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞—è–≤–æ–∫
        if app['status'] == 'pending' and app['event_status'] == 'published':
            keyboard.append([
                InlineKeyboardButton(
                    f"‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ {app['procedure_type'][:20]}",
                    callback_data=f"cancel_app_{app['id']}"
                )
            ])

    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="user_back_to_menu")])
    await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))


async def user_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞"""
    query = update.callback_query
    await query.answer()

    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="user_back_to_menu")]]

    channel_text = f" {CHANNEL_LINK}" if CHANNEL_LINK else ""
    text = (
        "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞\n\n"
        "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—ñ—á–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏.\n\n"
        "–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:\n"
        f"1Ô∏è‚É£ –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª{channel_text}\n"
        "2Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É' –ø—ñ–¥ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º –ø—Ä–æ –∑–∞—Ö—ñ–¥\n"
        "3Ô∏è‚É£ –ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏\n"
        "4Ô∏è‚É£ –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


async def cancel_user_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º"""
    query = update.callback_query

    user_id = query.from_user.id
    app_id = int(query.data.split('_')[2])

    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ –∑–∞—è–≤–∫–∞ –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    app = db.get_application(app_id)
    if not app or app['user_id'] != user_id:
        await query.answer("–ü–æ–º–∏–ª–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    db.update_application_status(app_id, 'cancelled')

    await query.answer("–ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ", show_alert=True)

    # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
    await user_my_applications(update, context)


async def user_back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    query = update.callback_query
    await query.answer()

    await show_user_menu(update, context, edit_message=True)


async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()

    await show_admin_menu(update, context, edit_message=True)


async def noop_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –¥—ñ—ó (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è)"""
    query = update.callback_query
    await query.answer()


# ==================== –°–¢–í–û–†–ï–ù–ù–Ø –ó–ê–•–û–î–£ (–ê–î–ú–Ü–ù) ====================

async def create_event_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—É"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return ConversationHandler.END

    context.user_data.clear()
    context.user_data['event'] = {}

    date_options = generate_date_options()
    # –ì—Ä—É–ø—É—î–º–æ –¥–∞—Ç–∏ –ø–æ 4 –≤ —Ä—è–¥–æ–∫ (4 —Å—Ç–æ–≤–ø—á–∏–∫–∏)
    date_buttons = [InlineKeyboardButton(opt['display'], callback_data=f"date_{opt['date']}")
                    for opt in date_options]
    keyboard = list(chunk_list(date_buttons, 4))
    keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])

    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑–∞—Ö–æ–¥—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CREATE_EVENT_DATE


async def show_date_selection(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä –¥–∞—Ç–∏"""
    date_options = generate_date_options()
    # –ì—Ä—É–ø—É—î–º–æ –¥–∞—Ç–∏ –ø–æ 4 –≤ —Ä—è–¥–æ–∫ (4 —Å—Ç–æ–≤–ø—á–∏–∫–∏)
    date_buttons = [InlineKeyboardButton(opt['display'], callback_data=f"date_{opt['date']}")
                    for opt in date_options]
    keyboard = list(chunk_list(date_buttons, 4))
    keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])

    if query:
        await query.edit_message_text(
            "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑–∞—Ö–æ–¥—É:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    return CREATE_EVENT_DATE


async def create_event_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏"""
    query = update.callback_query
    await query.answer()

    # –Ø–∫—â–æ —Ü–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—ñ—Ä –¥–∞—Ç–∏
    if query.data == "back_to_date":
        return await show_date_selection(query, context)

    date = query.data.split('_', 1)[1]
    context.user_data['event']['date'] = date

    # –ü–æ–∫–∞–∑–∞—Ç–∏ —á–∞—Å–æ–≤—ñ —Å–ª–æ—Ç–∏ –ø–æ 5 –≤ —Ä—è–¥ (5 —Å—Ç–æ–≤–ø—á–∏–∫—ñ–≤)
    keyboard = list(chunk_list(
        [InlineKeyboardButton(time, callback_data=f"time_{time}") for time in TIME_SLOTS],
        5
    ))
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_date")])
    keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])

    await query.edit_message_text(
        "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –∑–∞—Ö–æ–¥—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CREATE_EVENT_TIME


async def show_time_selection(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä —á–∞—Å—É"""
    keyboard = list(chunk_list(
        [InlineKeyboardButton(time, callback_data=f"time_{time}") for time in TIME_SLOTS],
        5
    ))
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_date")])
    keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])

    await query.edit_message_text(
        "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –∑–∞—Ö–æ–¥—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CREATE_EVENT_TIME


async def create_event_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —á–∞—Å—É"""
    query = update.callback_query
    await query.answer()

    # –Ø–∫—â–æ —Ü–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –∑ –µ–∫—Ä–∞–Ω—É –ø—Ä–æ—Ü–µ–¥—É—Ä, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—ñ—Ä —á–∞—Å—É
    if query.data == "back_to_time":
        return await show_time_selection(query, context)

    time = query.data.split('_', 1)[1]
    context.user_data['event']['time'] = time

    # –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–∏–ø–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä –∑ –ë–î
    return await show_procedure_selection(query, context)


async def show_procedure_selection(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä–∏"""
    # –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–∏–ø–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä –∑ –ë–î
    procedure_types = db.get_active_procedure_types()

    if not procedure_types:
        await query.edit_message_text(
            "‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø—Ä–æ—Ü–µ–¥—É—Ä.\n\n"
            "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ–¥–∞—Ç–∏ —Ç–∏–ø–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]])
        )
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton(ptype['name'], callback_data=f"proc_{ptype['id']}")]
                for ptype in procedure_types]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_time")])
    keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])

    await query.edit_message_text(
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CREATE_EVENT_PROCEDURE


async def create_event_procedure(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏"""
    query = update.callback_query
    await query.answer()

    # –Ø–∫—â–æ —Ü–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—ñ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
    if query.data == "back_to_procedure":
        return await show_procedure_selection(query, context)

    proc_type_id = int(query.data.split('_')[1])
    proc_type = db.get_procedure_type(proc_type_id)

    if not proc_type:
        await query.edit_message_text("‚ùå –¢–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return ConversationHandler.END

    context.user_data['event']['procedure'] = proc_type['name']

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="photo_yes"),
            InlineKeyboardButton("‚ùå –ù—ñ", callback_data="photo_no")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_procedure")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]

    await query.edit_message_text(
        "–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º –Ω–∞–¥–∞–≤–∞—Ç–∏ —Ñ–æ—Ç–æ –∑–æ–Ω–∏?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CREATE_EVENT_PHOTO_NEEDED


async def show_photo_needed_selection(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —Ñ–æ—Ç–æ"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="photo_yes"),
            InlineKeyboardButton("‚ùå –ù—ñ", callback_data="photo_no")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_procedure")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]

    await query.edit_message_text(
        "–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º –Ω–∞–¥–∞–≤–∞—Ç–∏ —Ñ–æ—Ç–æ –∑–æ–Ω–∏?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CREATE_EVENT_PHOTO_NEEDED


async def create_event_photo_needed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —Ñ–æ—Ç–æ"""
    query = update.callback_query
    await query.answer()

    # –Ø–∫—â–æ —Ü–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—ñ—Ä —Ñ–æ—Ç–æ
    if query.data == "back_to_photo":
        return await show_photo_needed_selection(query, context)

    needs_photo = query.data == "photo_yes"
    context.user_data['event']['needs_photo'] = needs_photo

    keyboard = [
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_comment")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_photo")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]

    msg = await query.edit_message_text(
        "–î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞—Ö–æ–¥—É (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ).\n\n"
        "–Ø–∫—â–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ message_id —ñ chat_id –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    context.user_data['last_bot_message_id'] = msg.message_id
    context.user_data['last_bot_chat_id'] = query.message.chat_id

    return CREATE_EVENT_COMMENT


async def show_comment_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –µ–∫—Ä–∞–Ω –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è"""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_comment")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_photo")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]

    msg = await query.edit_message_text(
        "–î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞—Ö–æ–¥—É (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ).\n\n"
        "–Ø–∫—â–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ message_id —ñ chat_id –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    context.user_data['last_bot_message_id'] = msg.message_id
    context.user_data['last_bot_chat_id'] = query.message.chat_id

    return CREATE_EVENT_COMMENT


async def create_event_comment_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è"""
    context.user_data['event']['comment'] = update.message.text

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º
    try:
        await update.message.delete()
    except:
        pass

    return await show_event_summary(update, context)


async def show_event_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ –∑–∞—Ö–æ–¥—É"""
    event = context.user_data['event']

    photo_required = "–û–±–æ–≤'—è–∑–∫–æ–≤–µ" if event['needs_photo'] else "–ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ"

    summary = (
        f"–ü—ñ–¥—Å—É–º–æ–∫ –∑–∞—Ö–æ–¥—É:\n\n"
        f"–î–∞—Ç–∞: {event['date']}\n"
        f"–ß–∞—Å: {event['time']}\n"
        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure']}\n"
        f"–§–æ—Ç–æ –≤—ñ–¥ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤: {photo_required}\n"
        f"–ö–æ–º–µ–Ω—Ç–∞—Ä: {event.get('comment', '–í—ñ–¥—Å—É—Ç–Ω—ñ–π')}"
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —ñ –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data="confirm_event")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_comment")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π message_id –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    if update.callback_query:
        await update.callback_query.edit_message_text(
            summary,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        # –Ø–∫—â–æ —Ü–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∫–æ–º–µ–Ω—Ç–∞—Ä), —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
        if 'last_bot_message_id' in context.user_data and 'last_bot_chat_id' in context.user_data:
            await context.bot.edit_message_text(
                chat_id=context.user_data['last_bot_chat_id'],
                message_id=context.user_data['last_bot_message_id'],
                text=summary,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

    return CREATE_EVENT_CONFIRM


async def confirm_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—É"""
    query = update.callback_query
    await query.answer()

    event = context.user_data['event']

    try:
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await query.delete_message()

        # –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–∞—Ö—ñ–¥
        event_id = db.create_event(
            date=event['date'],
            time=event['time'],
            procedure_type=event['procedure'],
            needs_photo=event['needs_photo'],
            comment=event.get('comment')
        )

        # –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤ –∫–∞–Ω–∞–ª
        await publish_event_to_channel(context, event_id)

        # –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–µ –º–µ–Ω—é, —è–∫—â–æ –≤–æ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–µ
        if 'menu_to_delete' in context.user_data:
            try:
                await context.bot.delete_message(
                    chat_id=query.message.chat_id,
                    message_id=context.user_data['menu_to_delete']
                )
            except Exception as e:
                logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–µ –º–µ–Ω—é: {e}")

        success_msg = await query.message.reply_text(
            f"‚úÖ –ó–∞—Ö—ñ–¥ \"{event['procedure']} {event['date']} –Ω–∞ {event['time']}\" —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ!"
        )

        # –û—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ
        context.user_data.clear()

        # –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–æ–≤–µ –º–µ–Ω—é
        await show_admin_menu(update, context)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—É: {e}")
        await query.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞—Ö–æ–¥—É")

        # –û—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ
        context.user_data.clear()

    return ConversationHandler.END


async def publish_event_to_channel(context: ContextTypes.DEFAULT_TYPE, event_id: int):
    """–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –∑–∞—Ö–æ–¥—É –≤ –∫–∞–Ω–∞–ª"""
    event = db.get_event(event_id)

    bot_username = (await context.bot.get_me()).username

    message_text = (
        f"–ë–ï–ó–ö–û–®–¢–û–í–ù–û!\n\n"
        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']}\n"
        f"–î–∞—Ç–∞: {format_date(event['date'])}\n"
        f"–ß–∞—Å: {event['time']}\n"
    )

    if event['comment']:
        message_text += f"\n{event['comment']}\n"

    if event['needs_photo']:
        message_text += f"\n–ü–æ—Ç—Ä—ñ–±–Ω–µ —Ñ–æ—Ç–æ –∑–æ–Ω–∏!\n"

    message_text += "\n–î–ª—è –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:"

    # –î–æ–¥–∞—î–º–æ timestamp –¥–æ URL —â–æ–± –∫–æ–∂–µ–Ω deep link –±—É–≤ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º
    import time
    timestamp = int(time.time())

    keyboard = [[InlineKeyboardButton(
        "–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É",
        url=f"https://t.me/{bot_username}?start=event_{event_id}_{timestamp}"
    )]]

    message = await context.bot.send_message(
        chat_id=CHANNEL_ID,
        text=message_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    db.update_event_message_id(event_id, message.message_id)
    db.update_event_status(event_id, 'published')


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É"""
    query = update.callback_query
    user_id = update.effective_user.id

    if query:
        await query.answer()
        await query.edit_message_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ")
    else:
        await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ")

    context.user_data.clear()

    # –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    if is_admin(user_id):
        if query:
            await show_admin_menu(update, context, edit_message=False)
        else:
            await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é")
    else:
        # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if query:
            await show_user_menu(update, context, edit_message=False)
        else:
            await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é")

    return ConversationHandler.END


# ==================== –ü–û–î–ê–ß–ê –ó–ê–Ø–í–ö–ò (–ú–û–î–ï–õ–¨) ====================

async def apply_event_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏"""
    logger.info(f"apply_event_start() –≤–∏–∫–ª–∏–∫–∞–Ω–æ, user_data: {context.user_data}")
    event_id = context.user_data.get('apply_event_id')

    if not event_id:
        logger.error("event_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ user_data")
        await update.effective_message.reply_text("–ó–∞—Ö—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return ConversationHandler.END

    user_id = update.effective_user.id
    logger.info(f"–ü–æ—á–∏–Ω–∞—é –æ–±—Ä–æ–±–∫—É –∑–∞—è–≤–∫–∏ –¥–ª—è user_id={user_id}, event_id={event_id}")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
    if db.is_user_blocked(user_id):
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π")
        await update.effective_message.reply_text("–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç–∏ –∑–∞—è–≤–∫–∏.")
        return ConversationHandler.END

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∑–∞—Ö–æ–¥—É
    event = db.get_event(event_id)
    if not event or event['status'] != 'published':
        logger.warning(f"–ó–∞—Ö—ñ–¥ {event_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        await update.effective_message.reply_text("–ó–∞—Ö—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –≤–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π")
        return ConversationHandler.END

    context.user_data['application'] = {'event_id': event_id, 'photos': []}

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user = db.get_user(user_id)

    if user and user['full_name'] and user['phone']:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ")
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="use_saved_data"),
                InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ñ", callback_data="enter_new_data")
            ],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
        ]

        await update.effective_message.reply_text(
            f"–£ –Ω–∞—Å —î –≤–∞—à—ñ –¥–∞–Ω—ñ:\n\n"
            f"–ü–Ü–ë: {user['full_name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n\n"
            f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ü—ñ –¥–∞–Ω—ñ?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö")
        return APPLY_FULL_NAME
    else:
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö")
        await update.effective_message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è (–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ):"
        )
        logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –ü–Ü–ë")
        return APPLY_FULL_NAME


async def apply_use_saved_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
    query = update.callback_query
    await query.answer()

    user = db.get_user(update.effective_user.id)
    context.user_data['application']['full_name'] = user['full_name']
    context.user_data['application']['phone'] = user['phone']

    await query.delete_message()

    event = db.get_event(context.user_data['application']['event_id'])

    if event['needs_photo']:
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="photos_done")],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
        ]
        await query.message.reply_text(
            "üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∑–æ–Ω–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏\n\n"
            "–Ø–∫ –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–æ—Ç–æ:\n"
            "1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É üìé (—Å–∫—Ä—ñ–ø–∫–∞) –∑–Ω–∏–∑—É\n"
            "2. –û–±–µ—Ä—ñ—Ç—å \"–ì–∞–ª–µ—Ä–µ—è\" –∞–±–æ \"–ö–∞–º–µ—Ä–∞\"\n"
            "3. –í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ç–æ –∑–æ–Ω–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏\n"
            "4. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ (–¥–æ 3 —à—Ç.)\n\n"
            "–ü—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–æ—Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"‚úÖ –ì–æ—Ç–æ–≤–æ\"",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return APPLY_PHOTOS
    else:
        return await show_application_summary(query.message, context)


async def apply_enter_new_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ñ –¥–∞–Ω—ñ"""
    query = update.callback_query
    await query.answer()

    await query.delete_message()
    await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è (–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ):")
    return APPLY_FULL_NAME


async def apply_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ü–Ü–ë"""
    context.user_data['application']['full_name'] = update.message.text
    await update.message.reply_text("–ü–Ü–ë –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return APPLY_PHONE


def validate_ukrainian_phone(phone: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    # –û—á–∏—Å—Ç–∏—Ç–∏ –Ω–æ–º–µ—Ä –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
    cleaned = re.sub(r'[\s\-\(\)]', '', phone)

    # –ü–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤
    patterns = [
        r'^(\+380|380|0)(39|50|63|66|67|68|73|91|92|93|94|95|96|97|98|99)\d{7}$',
    ]

    for pattern in patterns:
        if re.match(pattern, cleaned):
            return True

    return False


async def apply_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    phone = update.message.text

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    if not validate_ukrainian_phone(phone):
        await update.message.reply_text(
            "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:\n"
            "+380501234567\n"
            "0501234567\n"
            "050 123 45 67\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:"
        )
        return APPLY_PHONE

    context.user_data['application']['phone'] = phone
    await update.message.reply_text("–¢–µ–ª–µ—Ñ–æ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ")

    # –ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.update_user(
        update.effective_user.id,
        context.user_data['application']['full_name'],
        phone
    )

    event = db.get_event(context.user_data['application']['event_id'])

    if event['needs_photo']:
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="photos_done")],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
        ]
        await update.message.reply_text(
            "üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∑–æ–Ω–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏\n\n"
            "–Ø–∫ –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–æ—Ç–æ:\n"
            "1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É üìé (—Å–∫—Ä—ñ–ø–∫–∞) –∑–Ω–∏–∑—É\n"
            "2. –û–±–µ—Ä—ñ—Ç—å \"–ì–∞–ª–µ—Ä–µ—è\" –∞–±–æ \"–ö–∞–º–µ—Ä–∞\"\n"
            "3. –í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ç–æ –∑–æ–Ω–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏\n"
            "4. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ (–¥–æ 3 —à—Ç.)\n\n"
            "–ü—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–æ—Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"‚úÖ –ì–æ—Ç–æ–≤–æ\"",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return APPLY_PHOTOS
    else:
        return await show_application_summary(update.message, context)


async def apply_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ –≤—ñ–¥ –º–æ–¥–µ–ª—ñ"""
    if 'application' not in context.user_data:
        await update.message.reply_text("–°–µ—Å—ñ—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ.")
        return ConversationHandler.END

    photos = context.user_data['application'].get('photos', [])

    if len(photos) >= 3:
        await update.message.reply_text("–ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ 3 —Ñ–æ—Ç–æ")
        return APPLY_PHOTOS

    file_id = update.message.photo[-1].file_id
    photos.append(file_id)
    context.user_data['application']['photos'] = photos

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="photos_done")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]

    await update.message.reply_text(
        f"–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ ({len(photos)}/3)\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return APPLY_PHOTOS


async def apply_photos_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ"""
    query = update.callback_query

    event = db.get_event(context.user_data['application']['event_id'])
    photos = context.user_data['application'].get('photos', [])

    if event['needs_photo'] and len(photos) == 0:
        await query.answer("–î–ª—è —Ü—å–æ–≥–æ –∑–∞—Ö–æ–¥—É —Ñ–æ—Ç–æ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º. –î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω–µ —Ñ–æ—Ç–æ.", show_alert=True)
        return APPLY_PHOTOS

    await query.answer()
    await query.delete_message()
    return await show_application_summary(query.message, context)


async def show_application_summary(message, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ –∑–∞—è–≤–∫–∏ –∑—ñ –∑–≥–æ–¥–æ—é"""
    app = context.user_data['application']
    event = db.get_event(app['event_id'])

    summary = (
        f"–ü—ñ–¥—Å—É–º–æ–∫ –∑–∞—è–≤–∫–∏:\n\n"
        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']}\n"
        f"–î–∞—Ç–∞: {format_date(event['date'])}\n"
        f"–ß–∞—Å: {event['time']}\n\n"
        f"–ü–Ü–ë: {app['full_name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {app['phone']}\n"
        f"–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ: {len(app.get('photos', []))}\n\n"
        f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é, —â–æ –º–µ–Ω—ñ –≤–∏–ø–æ–≤–Ω–∏–ª–æ—Å—å 18 —Ä–æ–∫—ñ–≤"
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É", callback_data="submit_application")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]

    await message.reply_text(
        summary,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return APPLY_CONFIRM


async def submit_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É"""
    query = update.callback_query
    await query.answer()

    app = context.user_data['application']

    try:
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–∞—è–≤–∫—É
        application_id = db.create_application(
            event_id=app['event_id'],
            user_id=update.effective_user.id,
            full_name=app['full_name'],
            phone=app['phone']
        )

        # –ó–±–µ—Ä–µ–≥—Ç–∏ —Ñ–æ—Ç–æ
        for file_id in app.get('photos', []):
            db.add_application_photo(application_id, file_id)

        await query.edit_message_text(
            "–í–∞—à—É –∑–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–Ω–æ!\n\n"
            "–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )

        # –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤ –≥—Ä—É–ø—É
        await publish_application_to_group(context, application_id)

        # –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        keyboard = [
            [
                InlineKeyboardButton("üìã –ú–æ—ó –∑–∞—è–≤–∫–∏", callback_data="user_my_applications"),
                InlineKeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data="user_info")
            ]
        ]
        await query.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏: {e}")
        await query.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏")

    context.user_data.clear()
    return ConversationHandler.END


async def publish_application_to_group(context: ContextTypes.DEFAULT_TYPE, application_id: int):
    """–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø—É"""
    app = db.get_application(application_id)
    event = db.get_event(app['event_id'])
    photos = db.get_application_photos(application_id)

    message_text = (
        f"–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{application_id}\n\n"
        f"#–∑–∞—Ö—ñ–¥_{event['id']} #–∫–∞–Ω–¥–∏–¥–∞—Ç_{app['user_id']}\n\n"
        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']}\n"
        f"–î–∞—Ç–∞: {format_date(event['date'])} {event['time']}\n\n"
        f"–ü–Ü–ë: {app['full_name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {app['phone']}"
    )

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"approve_{application_id}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{application_id}")
        ],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ—ñ–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", url=f"tg://user?id={app['user_id']}")]
    ]

    if photos:
        if len(photos) == 1:
            message = await context.bot.send_photo(
                chat_id=GROUP_ID,
                photo=photos[0],
                caption=message_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            media = [InputMediaPhoto(media=photo_id, caption=message_text if i == 0 else '')
                    for i, photo_id in enumerate(photos)]
            messages = await context.bot.send_media_group(chat_id=GROUP_ID, media=media)
            message = messages[0]
            await context.bot.send_message(
                chat_id=GROUP_ID,
                text=f"–ó–∞—è–≤–∫–∞ ‚Ññ{application_id}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    else:
        message = await context.bot.send_message(
            chat_id=GROUP_ID,
            text=message_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    db.update_application_group_message_id(application_id, message.message_id)


# ==================== –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ó–ê–Ø–í–ö–ê–ú–ò ====================

async def approve_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞—è–≤–∫—É"""
    query = update.callback_query

    if not is_admin(query.from_user.id):
        await query.answer("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    await query.answer()

    application_id = int(query.data.split('_')[1])
    app = db.get_application(application_id)

    db.update_application_status(application_id, 'approved')

    keyboard = [
        [
            InlineKeyboardButton("‚≠ê –û–±—Ä–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–º", callback_data=f"primary_{application_id}"),
            InlineKeyboardButton("–ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞—Ö—ñ–¥", callback_data=f"view_apps_{app['event_id']}")
        ],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ—ñ–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", url=f"tg://user?id={app['user_id']}")]
    ]

    await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))


async def reject_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É"""
    query = update.callback_query

    if not is_admin(query.from_user.id):
        await query.answer("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    await query.answer()

    application_id = int(query.data.split('_')[1])
    app = db.get_application(application_id)

    db.update_application_status(application_id, 'rejected')

    await query.edit_message_reply_markup(reply_markup=None)

    # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        keyboard = [
            [
                InlineKeyboardButton("üìã –ú–æ—ó –∑–∞—è–≤–∫–∏", callback_data="user_my_applications"),
                InlineKeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data="user_info")
            ]
        ]
        await context.bot.send_message(
            chat_id=app['user_id'],
            text="–ù–∞ –∂–∞–ª—å, –≤–∞—à—É –∑–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}")


async def set_primary_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É —è–∫ –æ—Å–Ω–æ–≤–Ω—É"""
    query = update.callback_query

    if not is_admin(query.from_user.id):
        await query.answer("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    await query.answer("–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–∏–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º")

    application_id = int(query.data.split('_')[1])
    app = db.get_application(application_id)
    event = db.get_event(app['event_id'])

    db.set_primary_application(application_id)

    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é
    instruction = (
        f"–í—ñ—Ç–∞—î–º–æ! –í–∏ –æ–±—Ä–∞–Ω—ñ –æ—Å–Ω–æ–≤–Ω–∏–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º!\n\n"
        f"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {event['procedure_type']}\n"
        f"–î–∞—Ç–∞: {format_date(event['date'])}\n"
        f"–ß–∞—Å: {event['time']}\n\n"
        f"–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:\n"
        f"‚Ä¢ –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–∏–π–¥—ñ—Ç—å –∑–∞ 10 —Ö–≤–∏–ª–∏–Ω –¥–æ –ø–æ—á–∞—Ç–∫—É\n"
        f"‚Ä¢ –ú–∞–π—Ç–µ –ø—Ä–∏ —Å–æ–±—ñ –¥–æ–∫—É–º–µ–Ω—Ç, —â–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –æ—Å–æ–±—É\n"
        f"‚Ä¢ –£ —Ä–∞–∑—ñ –Ω–µ–º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø—Ä–∏–π—Ç–∏, –ø–æ–≤—ñ–¥–æ–º—Ç–µ –Ω–∞—Å –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å\n\n"
        f"–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ! "
    )

    try:
        keyboard = [
            [
                InlineKeyboardButton("üìã –ú–æ—ó –∑–∞—è–≤–∫–∏", callback_data="user_my_applications"),
                InlineKeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data="user_info")
            ]
        ]
        await context.bot.send_message(
            chat_id=app['user_id'],
            text=instruction,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        await query.message.reply_text("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—É")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó: {e}")
        await query.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é")


async def view_event_applications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞—Ö—ñ–¥"""
    query = update.callback_query

    if not is_admin(query.from_user.id):
        await query.answer("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    event_id = int(query.data.split('_')[2])
    all_applications = db.get_applications_by_event(event_id)

    if not all_applications:
        await query.answer("–ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ –Ω–∞ —Ü–µ–π –∑–∞—Ö—ñ–¥", show_alert=True)
        return

    await query.answer()

    # –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞—Ö—ñ–¥
    event = db.get_event(event_id)

    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞—è–≤–∫–∏: —Å–ø–æ—á–∞—Ç–∫—É –æ—Å–Ω–æ–≤–Ω–∏–π, –ø–æ—Ç—ñ–º —Å—Ö–≤–∞–ª–µ–Ω—ñ, –ø–æ—Ç—ñ–º —Ä–µ—à—Ç–∞
    primary = [app for app in all_applications if app['is_primary'] == 1]
    approved = [app for app in all_applications if app['status'] == 'approved' and app['is_primary'] == 0]
    other = [app for app in all_applications if app['status'] != 'approved']

    message = f"üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞—Ö—ñ–¥:\n"
    message += f"üìÖ {event['procedure_type']}\n"
    message += f"üïê {format_date(event['date'])} –æ {event['time']}\n\n"

    # –û—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç (—á–µ—Ä–≤–æ–Ω–∏–º —á–µ—Ä–µ–∑ HTML)
    if primary:
        app = primary[0]
        message += f"üî¥ <b>–û–°–ù–û–í–ù–ò–ô –ö–ê–ù–î–ò–î–ê–¢:</b>\n"
        message += f"   üë§ {app['full_name']}\n"
        message += f"   üì± {app['phone']}\n\n"

    # –°—Ö–≤–∞–ª–µ–Ω—ñ –∑–∞—è–≤–∫–∏ (–∂–∏—Ä–Ω–∏–º)
    if approved:
        message += "<b>‚úÖ –°–•–í–ê–õ–ï–ù–Ü –ó–ê–Ø–í–ö–ò:</b>\n"
        for i, app in enumerate(approved, 1):
            message += f"<b>{i}. {app['full_name']}</b>\n"
            message += f"   üì± {app['phone']}\n"
        message += "\n"

    # –Ü–Ω—à—ñ –∑–∞—è–≤–∫–∏ (pending, rejected, cancelled)
    if other:
        message += "üì• –Ü–ù–®–Ü –ó–ê–Ø–í–ö–ò:\n"
        for app in other:
            status_emoji = {
                'pending': '‚è≥',
                'rejected': '‚ùå',
                'cancelled': 'üö´'
            }.get(app['status'], '‚ùì')

            message += f"{status_emoji} {app['full_name']}\n"
            message += f"   üì± {app['phone']}\n"
            message += f"   –°—Ç–∞—Ç—É—Å: {app['status']}\n"

    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_events")]]

    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )


# ==================== –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –ö–ê–ù–î–ò–î–ê–¢–£ ====================

async def forward_candidate_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –≤ –≥—Ä—É–ø—É"""
    user_id = update.effective_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —Ü–µ –Ω–µ –∞–¥–º—ñ–Ω
    if is_admin(user_id):
        return

    # –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ —è–∫—â–æ —Ü–µ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç (conversation –∞–∫—Ç–∏–≤–Ω–∏–π)
    # –¢—ñ–ª—å–∫–∏ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—ñ –ù–ï –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ conversation
    if 'application' in context.user_data or 'event' in context.user_data:
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤ –±–∞–∑—ñ (–ø–æ–¥–∞–≤–∞–≤ –∑–∞—è–≤–∫—É)
    user = db.get_user(user_id)
    if not user or not user['full_name']:
        return

    # –ü–µ—Ä–µ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É
    try:
        message_text = (
            f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:\n\n"
            f"üë§ {user['full_name']}\n"
            f"üì± {user['phone']}\n"
            f"üÜî User ID: {user_id}\n\n"
            f"–¢–µ–∫—Å—Ç: {update.message.text}"
        )

        keyboard = [[InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ—ñ–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", url=f"tg://user?id={user_id}")]]

        await context.bot.send_message(
            chat_id=GROUP_ID,
            text=message_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")


# ==================== MAIN ====================

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    token = os.getenv('BOT_TOKEN')
    if not token:
        logger.error("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ!")
        return

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è HTTP –∑–∞–ø–∏—Ç—ñ–≤ –∑ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    request = HTTPXRequest(
        connection_pool_size=8,
        connect_timeout=10.0,
        read_timeout=10.0,
        write_timeout=10.0
    )

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è persistence –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    persistence = PicklePersistence(filepath="bot_data.pickle")

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É –∑ —É—Å—ñ–º–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    application = (
        Application.builder()
        .token(token)
        .request(request)
        .persistence(persistence)
        .build()
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—É
    create_event_handler = ConversationHandler(
        entry_points=[
            CommandHandler('create_event', create_event_start),
            CommandHandler('new_event', create_event_start),
            CallbackQueryHandler(admin_create_event_button, pattern='^admin_create_event$')
        ],
        states={
            CREATE_EVENT_DATE: [
                CallbackQueryHandler(create_event_date, pattern='^date_'),
                CallbackQueryHandler(create_event_date, pattern='^back_to_date$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            CREATE_EVENT_TIME: [
                CallbackQueryHandler(create_event_time, pattern='^time_'),
                CallbackQueryHandler(create_event_date, pattern='^back_to_date$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            CREATE_EVENT_PROCEDURE: [
                CallbackQueryHandler(create_event_procedure, pattern='^proc_'),
                CallbackQueryHandler(create_event_time, pattern='^back_to_time$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            CREATE_EVENT_PHOTO_NEEDED: [
                CallbackQueryHandler(create_event_photo_needed, pattern='^photo_'),
                CallbackQueryHandler(create_event_procedure, pattern='^back_to_procedure$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            CREATE_EVENT_COMMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, create_event_comment_text),
                CallbackQueryHandler(show_event_summary, pattern='^skip_comment$'),
                CallbackQueryHandler(create_event_photo_needed, pattern='^back_to_photo$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            CREATE_EVENT_CONFIRM: [
                CallbackQueryHandler(confirm_event, pattern='^confirm_event$'),
                CallbackQueryHandler(show_comment_input, pattern='^back_to_comment$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ]
        },
        fallbacks=[CallbackQueryHandler(cancel, pattern='^cancel$')],
        name="create_event_conversation",
        persistent=True,
        allow_reentry=True
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏
    apply_event_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            APPLY_FULL_NAME: [
                CallbackQueryHandler(apply_use_saved_data, pattern='^use_saved_data$'),
                CallbackQueryHandler(apply_enter_new_data, pattern='^enter_new_data$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, apply_full_name),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            APPLY_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, apply_phone),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            APPLY_PHOTOS: [
                MessageHandler(filters.PHOTO, apply_photo),
                CallbackQueryHandler(apply_photos_done, pattern='^photos_done$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            APPLY_CONFIRM: [
                CallbackQueryHandler(submit_application, pattern='^submit_application$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ]
        },
        fallbacks=[CallbackQueryHandler(cancel, pattern='^cancel$')],
        name="apply_event_conversation",
        persistent=True,
        allow_reentry=True
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    block_user_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_block_user_button, pattern='^admin_block_user$')],
        states={
            BLOCK_USER_ID: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, block_user_id),
                CallbackQueryHandler(cancel_block, pattern='^cancel_block$')
            ]
        },
        fallbacks=[CallbackQueryHandler(cancel_block, pattern='^cancel_block$')],
        name="block_user_conversation",
        persistent=True,
        allow_reentry=True
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
    add_procedure_type_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_procedure_type_start, pattern='^pt_add$')],
        states={
            ADD_PROCEDURE_TYPE_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_procedure_type_name),
                CallbackQueryHandler(cancel_procedure_type, pattern='^pt_cancel$')
            ]
        },
        fallbacks=[CallbackQueryHandler(cancel_procedure_type, pattern='^pt_cancel$')],
        name="add_procedure_type_conversation",
        persistent=True,
        allow_reentry=True
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
    edit_procedure_type_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(edit_procedure_type_start, pattern='^pt_edit_')],
        states={
            EDIT_PROCEDURE_TYPE_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_procedure_type_name),
                CallbackQueryHandler(cancel_procedure_type, pattern='^pt_cancel$')
            ]
        },
        fallbacks=[CallbackQueryHandler(cancel_procedure_type, pattern='^pt_cancel$')],
        name="edit_procedure_type_conversation",
        persistent=True,
        allow_reentry=True
    )

    # –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ (ConversationHandlers –º–∞—é—Ç—å –≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç - group 0)
    application.add_handler(create_event_handler, group=0)
    application.add_handler(apply_event_handler, group=0)
    application.add_handler(block_user_handler, group=0)
    application.add_handler(add_procedure_type_handler, group=0)
    application.add_handler(edit_procedure_type_handler, group=0)

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    application.add_handler(CallbackQueryHandler(back_to_menu, pattern='^back_to_menu$'))
    application.add_handler(CallbackQueryHandler(noop_callback, pattern='^noop$'))
    application.add_handler(CallbackQueryHandler(admin_manage_events_button, pattern='^admin_manage_events$'))
    application.add_handler(CallbackQueryHandler(admin_past_events_button, pattern='^past_events$'))
    application.add_handler(CallbackQueryHandler(cancel_event_confirm, pattern='^cancel_event_'))
    application.add_handler(CallbackQueryHandler(confirm_cancel_event, pattern='^confirm_cancel_event_'))
    application.add_handler(CallbackQueryHandler(admin_procedure_types, pattern='^admin_procedure_types$'))
    application.add_handler(CallbackQueryHandler(view_procedure_type, pattern='^pt_view_'))
    application.add_handler(CallbackQueryHandler(toggle_procedure_type_handler, pattern='^pt_toggle_'))
    application.add_handler(CallbackQueryHandler(delete_procedure_type_handler, pattern='^pt_delete_'))
    application.add_handler(CallbackQueryHandler(delete_procedure_type_confirm, pattern='^pt_delete_confirm_'))
    application.add_handler(CallbackQueryHandler(admin_clear_db, pattern='^admin_clear_db$'))
    application.add_handler(CallbackQueryHandler(clear_db_confirm, pattern='^clear_db_confirm$'))

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    application.add_handler(CallbackQueryHandler(user_my_applications, pattern='^user_my_applications$'))
    application.add_handler(CallbackQueryHandler(user_info, pattern='^user_info$'))
    application.add_handler(CallbackQueryHandler(user_back_to_menu, pattern='^user_back_to_menu$'))
    application.add_handler(CallbackQueryHandler(cancel_user_application, pattern='^cancel_app_'))

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ callback –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞—è–≤–∫–∞–º–∏
    application.add_handler(CallbackQueryHandler(approve_application, pattern='^approve_'))
    application.add_handler(CallbackQueryHandler(reject_application, pattern='^reject_'))
    application.add_handler(CallbackQueryHandler(set_primary_application, pattern='^primary_'))
    application.add_handler(CallbackQueryHandler(view_event_applications, pattern='^view_apps_'))

    # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ (–ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤ –≥—Ä—É–ø—É) - –Ω–∏–∂—á–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, forward_candidate_message), group=1)

    # –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(error_handler)

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è graceful shutdown
    def signal_handler(sig, frame):
        logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏. –ó—É–ø–∏–Ω—è—é –±–æ—Ç–∞...")
        application.stop_running()
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    try:
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True  # –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ —Å—Ç–∞—Ä—ñ updates –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
        )
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞")


if __name__ == '__main__':
    main()
